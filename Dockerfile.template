FROM node:10.6-stretch as canopsis-next_build

COPY sources/webcore/src/canopsis-next /canopsis-next
WORKDIR /canopsis-next
RUN npm install

RUN NODE_ENV=production npm run build


# Use this image as a build image in a multistage build ?
# FROM %%BASE_IMAGE%% as build
FROM debian:stretch-slim as sysbase

ENV http_proxy ${PROXY}
ENV https_proxy ${PROXY}
ENV CPS_HOME /opt/canopsis
ENV CPS_USER canopsis
ENV CPS_GROUP canopsis

ARG PROXY
ARG TAG

SHELL ["/bin/bash", "-c"]

# In case of error with the boot of the image or services, use the value set in the Dockerfile.sysbase-*
COPY docker/files/systemd/* /etc/systemd/system/
COPY docker/files/vimrc /root/.vimrc
COPY docker/files/bashrc /root/.bashrc

RUN groupadd ${CPS_GROUP} && useradd -d ${CPS_HOME} -g ${CPS_GROUP} -s /bin/bash ${CPS_USER}

COPY docker/files/vimrc ${CPS_HOME}/.vimrc

RUN apt-get update; \
    apt-get -y --no-install-recommends install \
	sudo \
    build-essential \
    # curl \
    # libcurl4-openssl-dev \
    # libsasl2-dev \
    # libxml2-dev \
    # libxslt1-dev \
    # libssl-dev \
    # libffi-dev \
    # libxmlsec1-dev \
    # libxmlsec1-openssl \
    # libldap2-dev \
    pkg-config \
    python2.7-dev \
    python-pip \
    python-pkg-resources \
    python-wheel; \
	apt-get clean; \
	pip install -b /tmp/pipbuild --no-cache-dir virtualenv


WORKDIR ${CPS_HOME}

COPY sources/canopsis/etc ./etc
COPY docker/files/sudoers /etc/sudoers.d/canopsis
COPY docker/files/bashrc .bashrc
COPY docker/files/bash_profile .bash_profile
COPY docker/files/entrypoint.sh/ /
COPY docker/files/etc/ ./etc/
COPY sources/db-conf/opt ./opt

### Install virtualenv
RUN virtualenv .;\
	source /etc/os-release;\
	source ${CPS_HOME}/bin/activate;\
	pip install -b /tmp/pipbuild -U setuptools pip wheel;\
	pyopenssl="pyOpenSSL"; \
	if [ "${VERSION_ID}" = "8" ]&&[ "${ID}" = "debian" ]; then\
	   pyopenssl="pyOpenSSL==17.5.0";\
	fi;\
	pip install -b /tmp/pipbuild -U setuptools --no-cache-dir jmespath "pymongo==3.5.0" "influxdb==5.1.0" "${pyopenssl}" \
	rm -rf /tmp/pipbuild; rm -rf ~/.cache;

# Install canopsis requirements
COPY sources/canopsis/requirements.txt /sources/canopsis/requirements.txt
RUN source ./bin/activate && pip install --no-cache-dir -r /sources/canopsis/requirements.txt -b /tmp/pipbuild; rm -rf /tmp/pipbuild; rm -rf ~/.cache;

# Install canopsis
COPY sources/canopsis /sources/canopsis
RUN source ./bin/activate; pip install --no-deps --no-cache-dir -b /tmp/pipbuild /sources/canopsis/; rm -rf /tmp/pipbuild; rm -rf ~/.cache; rm -rf /sources/

RUN ln -s ${CPS_HOME}/bin/canoctl /usr/bin/canoctl


RUN mkdir -p ./etc/init.d && \
    mkdir -p var/log/engines && \
    mkdir -p var/cache/canopsis && \
    mkdir -p tmp && \
    sed -r "s@~@${CPS_HOME}@g" -i ./etc/webserver.conf && \
    chown -R ${CPS_USER}:${CPS_GROUP} ${CPS_HOME}/var/cache ${CPS_HOME}/var/log ${CPS_HOME}/tmp


# Install webcore
RUN mkdir -p ${CPS_HOME}/var/www
COPY sources/webcore ${CPS_HOME}/var/www

# Copy UI bricks as root
# RUN python /${CPS_HOME}/bin/brickmanager install brick-querybuilder && \
#     python /${CPS_HOME}/bin/brickmanager install brick-listalarm && \
#     python /${CPS_HOME}/bin/brickmanager install brick-timeline

# # Ansible
# COPY deploy-ansible/ ${CPS_HOME}/deploy-ansible

# USER ${CPS_USER}:${CPS_GROUP}

EXPOSE 8082
ENTRYPOINT /entrypoint.sh
