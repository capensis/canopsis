Ember.Application.initializer({name:"component-userpreferencesmanager",after:"NotificationUtils",initialize:function(e,r){var t=e.lookupFactory("utility:notification"),i=Ember.set,s=Ember.get,o=Ember.Component.extend({init:function(){this._super(),this.getUserPreferences()},getUserPreferences:function(){var e=this,r=s(this,"userId");return Ember.isNone(r)?void console.warn("No user id found for user preferences"):(console.debug("loading configuration for user "+r),void $.ajax({url:"/rest/userpreferences/userpreferences",async:!1,data:{limit:100,filter:JSON.stringify({crecord_name:r})},success:function(r){if(r.success){console.log("User configuration load for widget complete",r);for(var t=[],o=r.data.length,n=0;n<o;n++){var c=[];for(var a in r.data[n].widget_preferences)c.push(a);t.push({labels:c,widgetId:r.data[n].widget_id,widgetXtype:s(r.data[n],"widgetXtype"),viewId:s(r.data[n],"viewId"),title:s(r.data[n],"title"),preferenceId:s(r.data[n],"_id")})}i(e,"informations",t)}else console.debug("No user preference exists for widget"+s(e,"title"))}}).fail(function(e){console.log("No user s preference found for this widget")}))},actions:{removeUserPreference:function(e){var r=this,i=s(this,"controllers.login.record._id");console.debug("will remove user preference with preference id "+e+" for user "+i),$.ajax({url:"/rest/userpreferences/userpreferences/"+e,type:"DELETE",success:function(e){r.getUserPreferences(),t.info("successfuly removed user preference")}}).fail(function(e){console.log("Unable to remove user preference"),t.error("Unable to remove user preference")})}}});r.register("component:component-userpreferencesmanager",o)}}),Ember.Application.initializer({name:"UserconfigurationMixin",after:["MixinFactory","HashUtils","DataUtils"],initialize:function(e,r){var t=e.lookupFactory("factory:mixin"),i=e.lookupFactory("utility:hash"),s=e.lookupFactory("utility:data"),o=Ember.get,n=Ember.set;DS.Store.reopen({serialize:function(e,r){var t={},c=s.getLoggedUserController();if(e.userPreferencesModel.attributes.list&&e.userPreferencesModel.attributes.list.length>0){console.group("userpreferences for widget",e.get("title"),e);var a=e.userPreferencesModel.attributes.list,l=o(e,"preference_id"),f=o(c,"record._id");void 0===l&&(l=i.generate_GUID(),n(e,"preference_id",l));for(var d=0,u=a.length;d<u;d++)console.log("userpreferenceAttributes",a[d]),t[a[d].name]=o(e,a[d].name),console.log("key",a[d].name,"value",o(e,a[d].name));var g={widget_preferences:t,crecord_name:f,widget_id:o(e,"id"),widgetXtype:o(e,"xtype"),title:o(e,"title"),viewId:o(e,"viewId"),id:o(e,"id")+"_"+f,_id:o(e,"id")+"_"+f,crecord_type:"userpreferences"};console.log("push UP",g),$.ajax({url:"/rest/userpreferences/userpreferences",type:"POST",data:JSON.stringify(g)}),console.groupEnd("userpreferences for widget",e.get("title"))}else console.log("no userpreferences to save for widget",e.get("title"));return this._super.apply(this,arguments)},push:function(e,r){var t=this._super.apply(this,arguments),i=s.getLoggedUserController(),c=t.userPreferencesModel.attributes.list;if(c.length>0){var a=o(i,"record._id");$.ajax({url:"/rest/userpreferences/userpreferences",async:!1,data:{limit:1,filter:JSON.stringify({crecord_name:a,widget_id:o(t,"id"),_id:o(t,"id")+"_"+a})},success:function(e){if(e.success&&e.data.length&&void 0!==e.data[0].widget_preferences){console.log("User configuration load for widget complete",JSON.stringify(e));var r=e.data[0].widget_preferences;n(t,o(t,"id")+"_"+a),n(t,"userPreferences",r);for(var i in r)console.log("User preferences: will set key",i,"in widget",o(t,"title"),r[i]),t.set(i,r[i])}else console.log("No user preference exists for widget"+o(t,"title"))}}).fail(function(e){console.log("No user s preference found for this widget")})}return t}});var c=t("userconfiguration",{needs:["login"],saveUserConfiguration:function(){var e=o(this,"model");console.log("saveUserConfiguration",e);var r={};if(e.userPreferencesModel.attributes.list&&e.userPreferencesModel.attributes.list.length>0){console.group("userpreferences for widget",e.get("title"),e);var t=e.userPreferencesModel.attributes.list,i=s.getLoggedUserController(),n=o(e,"preference_id"),c=o(i,"record._id");if(void 0===n)e.save();else{for(var a=0,l=t.length;a<l;a++)console.log("userpreferenceAttributes",t[a]),r[t[a].name]=o(e,t[a].name),console.log("key",t[a].name,"value",o(e,t[a].name));var f={widget_preferences:r,crecord_name:c,widget_id:o(e,"id"),widgetXtype:o(e,"xtype"),title:o(e,"title"),viewId:o(e,"viewId"),id:n+"_"+c,_id:o(e,"id")+"_"+c,crecord_type:"userpreferences"};$.ajax({url:"/rest/userpreferences/userpreferences",type:"POST",data:JSON.stringify(f)})}console.groupEnd("userpreferences for widget",e.get("title"))}else console.log("no userpreferences to save for widget",e.get("title"))}});r.register("mixin:userconfiguration",c)}});
//# sourceMappingURL=dist/brick.map.js