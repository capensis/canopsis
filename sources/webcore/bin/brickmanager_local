#! /usr/bin/env node

process.env.NODE_PATH = process.env.HOME + '/lib/node_modules';
require('module').Module._initPaths();

var sc = require('subcommander');
var execSync = require('sync-exec');
var fs = require('fs');

sc.command('help', {
    desc: 'Reset default configuration',
    callback: function () {
      sc.usage();
    }
});

sc.command('init', {
    desc: 'Reset default configuration',
    callback: function () {
      init();
      console.log('Bricks configuration restored to default.');
    }
});

sc.command('list', {
    desc: 'List enabled bricks',
    abbr: 'l',
    callback: function () {
      list();
    }
});

sc.command('enable', {
    desc: 'Enables a brick',
    abbr: 'e',
    callback: function (options) {
      enableBrick(options[0]);
    }
});

sc.command('disable', {
    desc: 'Disables a brick',
    abbr: 'd',
    callback: function (options) {
      disableBrick(options[0]);
    }
});

sc.command('install', {
    desc: 'Installs a brick',
    abbr: 'i',
    callback: function (options) {

      if(options[0]) {
        installBrick('https://git.canopsis.net/canopsis-ui-bricks/' + options[0] + '.git');
      } else {
        if(options.folder) {
          installBrick(options.folder);
        } else if(options.ssh) {
          installBrick('ssh://git@git.canopsis.net/canopsis-ui-bricks/' + options.ssh + '.git');
        }
      }
    }
}).option('folder', {
  abbr: 'f',
  desc: 'install using a local folder, or a local or distant archive file'
}).option('ssh', {
  abbr: 's',
  desc: 'install using ssh'
});

sc.command('uninstall', {
    desc: 'Uninstalls a brick',
    abbr: 'u',
    callback: function (options) {
      uninstallBrick(options[0]);
    }
});

sc.parse();

function in_array(needle, haystack){
    var found = 0;
    for (var i=0, len=haystack.length;i<len;i++) {
      if (haystack[i] == needle) return i;
        found++;
    }
    return -1;
}

function enableBrick(brickName) {
  try {
    fs.accessSync('src/canopsis/' + brickName);
  }
  catch(e) {
    console.log('error while enabling the brick: ', e);
    process.exit();
  }
  var contents = JSON.parse(fs.readFileSync('src/canopsis/enabled-bricks.json').toString());

  //copy the jsDoc file only if it exists.
  var jsDocFilePath = 'src/canopsis/'+ brickName +'/doc/jsdoc';
  if (fs.existsSync(jsDocFilePath)) {
    execSync('cp -r ' + jsDocFilePath + ' doc/api/bricks-documentation/' + brickName, {stdio:[0,1,2]});
  }
  if(in_array(brickName, contents) !== -1) {
    console.log('brick '+ brickName +' already enabled');
  } else {
    contents.push(brickName);
    try {
      fs.writeFileSync('src/canopsis/enabled-bricks.json', JSON.stringify(contents), 'utf8');
    }
    catch (e) {
      console.log('Error while writing on enable-bricks: ', e);
    }
    try {
      fs.writeFileSync('doc/api/config.js', 'window.bricks = \''+ JSON.stringify(contents) + '\'', 'utf8');
      console.log('Brick ' + brickName + ' enabled.');
    }
    catch (e) {
      console.log('Error while writing on config: ', e);
    }
  }
}

function disableBrick(brickName) {
  var contents = JSON.parse(fs.readFileSync('src/canopsis/enabled-bricks.json').toString());
  if(in_array(brickName, contents) !== -1) {
    var index = contents.indexOf(brickName);
    contents.splice(index, 1);

    // Remove the documentation only if it exists
    var jsonDocPath = 'doc/api/bricks-documentation/' + brickName;
    if (fs.existsSync(jsonDocPath)) {
      execSync('rm -r ' + jsonDocPath, {stdio:[0,1,2]});
    }
    try {
      fs.writeFileSync('src/canopsis/enabled-bricks.json', JSON.stringify(contents), 'utf8');
    }
    catch(e) {
      console.log('Error while writing enable-bricks: ',e);
    }
    try {
      fs.writeFileSync('doc/api/config.js', 'window.bricks = \'' + JSON.stringify(contents) + '\'', 'utf8');
      console.log('Brick ' + brickName + ' disabled.');

    }
    catch(e) {
      console.log('Error while writing config: ', e);
    }
  } else {
    console.log('brick '+ brickName +' is not enabled');
  }
}

function installBrick(brickUrl) {
    execSync('bower install --config.interactive=false --save ' + brickUrl, {stdio:[0,1,2]});
}

function uninstallBrick(brickName) {
  disableBrick(brickName);
  execSync('bower uninstall --config.interactive=false --save ' + brickName, {stdio:[0,1,2]});
}

function list() {
  var contents = JSON.parse(fs.readFileSync('src/canopsis/enabled-bricks.json').toString());
  console.log(contents);
}

function init() {
  var contents = ["core", "monitoring", "uiv1_themes", "charts", "canopsis-ui", "canopsis-backend-ui-connector", "uibase", "userpreferences", "canopsis-rights", "canopsis-vevent", "brick-stats", "canopsis-pbehavior"];
  for (var i = 0; i < contents.length; i++) {
    enableBrick(contents[i]);
  }

  fs.writeFileSync('src/canopsis/enabled-bricks.json', JSON.stringify(contents), 'utf8');
  fs.writeFileSync('doc/api/config.js', 'window.bricks = \''+ JSON.stringify(contents) + '\'', 'utf8');
}
