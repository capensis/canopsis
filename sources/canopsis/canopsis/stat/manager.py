# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2019 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

from __future__ import unicode_literals

from canopsis.common.influx import InfluxDBClient
from canopsis.common.influx_query import SelectQuery
from canopsis.pbehavior.manager import PBehaviorManager
from canopsis.stat.model import Stats


class StatManager(object):
    """
    StatManager is an object used to work with the statistics generated by the
    go engine `engine-stat`.

    :param InfluxDBClient influxdb_client:
    :param PBehaviorManager pbehavior_manager:
    """
    def __init__(self, influxdb_client, pbehavior_manager):
        self.influxdb_client = influxdb_client
        self.pbehavior_manager = pbehavior_manager

    @staticmethod
    def provide_default_basics(logger):
        """
        Provide the default configuration and logger objects
        for StatManager.

        Do not use those defaults for tests.
        """
        influxdb_client = InfluxDBClient.from_configuration(logger)
        pbehavior_manager = PBehaviorManager(
            *PBehaviorManager.provide_default_basics())
        return (influxdb_client, pbehavior_manager)

    def get_stats(self, entity_id):
        """
        Return the statistics of an entity given its id.

        :param str entity_id: The entity's id.
        :return Stats: A Stat object containing the entity's statistics.
        """
        last_pbehavior_end = self.pbehavior_manager.get_ok_ko_timestamp(
            entity_id)

        ok_count, ko_count = self._get_counts(entity_id, last_pbehavior_end)
        last_ok = self._get_last_ok(entity_id)
        last_ko = self._get_last_ko(entity_id)

        last_event = None
        if last_ko is not None and last_ko is not None:
            last_event = max(last_ok, last_ko)
        elif last_ok is not None:
            last_event = last_ok
        elif last_ko is not None:
            last_event = last_ko

        return Stats(ok_count, ko_count, last_ko, last_event)

    def _get_counts(self, entity_id, after):
        """
        Return the number of events received on an entity after a timestamp.

        :param str entity_id: The entity's id
        :param int after: A timestamp
        :return Tuple[int, int]: The number of check events received with state
            0, and the number of events received with state 1, 2 or 3.
        """
        counts_query = (
            SelectQuery('event_state_history')
            .select('ok', function='sum', alias='ok')
            .select('ko', function='sum', alias='ko')
            .where_equal('eid', entity_id)
            .after(after)
            .build())
        result_set = self.influxdb_client.query(counts_query, epoch='s')
        row = next(result_set.get_points(), None)
        if row is None:
            return 0, 0

        return row['ok'] or 0, row['ko'] or 0

    def _get_last_ko(self, entity_id):
        """
        Return the timestamp of the last event received on an entity with state
        1, 2 or 3.

        :param str entity_id: The entity's id.
        :return Union[int, None]: The timestamp of the last event, or None if
            no event was received.
        """
        last_ko_query = (
            SelectQuery('event_state_history')
            .select('ko', function='last', alias='last_ko')
            .where_equal('eid', entity_id)
            .build())
        result_set = self.influxdb_client.query(last_ko_query, epoch='s')
        row = next(result_set.get_points(), None)
        if row is None:
            return None

        return row['time']

    def _get_last_ok(self, entity_id):
        """
        Return the timestamp of the last event received on an entity with state
        0.

        :param str entity_id: The entity's id.
        :return Union[int, None]: The timestamp of the last event, or None if
            no event was received.
        """
        last_ok_query = (
            SelectQuery('event_state_history')
            .select('ok', function='last', alias='last_ok')
            .where_equal('eid', entity_id)
            .build())
        result_set = self.influxdb_client.query(last_ok_query, epoch='s')
        row = next(result_set.get_points(), None)
        if row is None:
            return None

        return row['time']
