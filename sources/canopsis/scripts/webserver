#!/usr/bin/env python

# https://github.com/benoitc/gunicorn/issues/669

import os

from gunicorn.app.base import Application

from canopsis.common import root_path
from canopsis.webcore.wsgi import get_default_app


class WebServerPy(Application):
    """
    Transparently replace the usual gunicorn command so we can
    package the Canopsis Web Server with PyInstaller.
    """

    def __init__(self, wsgi_getter, accesslog, access_log_format):
        self.wsgi_getter = wsgi_getter
        self.accesslog = accesslog
        self.access_log_format = access_log_format
        super(WebServerPy, self).__init__()

    def init(self, parser, opts, args):
        """
        Implementation is required from the Application class.
        """
        options = {}

        if opts.accesslog is None:
            options['accesslog'] = self.accesslog

        if opts.access_log_format is None:
            options['access_log_format'] = self.access_log_format

        return options

    def load(self):
        """
        Must return the final WSGI app object.
        """
        return self.wsgi_getter()


if __name__ == "__main__":
    accesslog = os.path.join(
        root_path, 'var', 'log', 'webserver-access.log')
    access_fmt = '%(h)s %(l)s %(U)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s"'
    gunicorn_app = WebServerPy(
        get_default_app, accesslog, access_fmt)
    gunicorn_app.run()
