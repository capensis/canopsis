#!/usr/bin/env python
# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2018 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------
import os
import subprocess
import time

from canopsis.common.mongo_store import MongoStore
from pymongo.errors import ConnectionFailure

COMMANDS = [["canopsis-filldb", "--yes"], "schema2db"]

ENV_MAX_RETRY = "CPS_INIT_MAX_RETRY"
ENV_RETRY_DELAY = "CPS_INIT_RETRY_DELAY"
ENV_WAIT_FIRST_ATTEMPT = "CPS_WAIT_FIRST_ATTEMPT"

DFT_MAX_RETRY = 10
DFT_RETRY_DELAY = 30
DFT_WAIT_FIRST_ATTEMPT = 60

if __name__ == "__main__":
    max_retry = int(os.getenv(ENV_MAX_RETRY, DFT_MAX_RETRY))
    retry_delay = int(os.getenv(ENV_RETRY_DELAY, DFT_RETRY_DELAY))
    wait_first_time = int(os.getenv(ENV_WAIT_FIRST_ATTEMPT, DFT_WAIT_FIRST_ATTEMPT))
    print("Waiting {}s.".format(wait_first_time))

    time.sleep(wait_first_time)

    started = False
    retry = 0
    while started is False and retry < max_retry:
        print("Attempt {} : ".format(retry + 1))
        try:
            store = MongoStore.get_default()
            store.authenticate()
        except ConnectionFailure:
            print("\tFailed")
            retry += 1
            time.sleep(retry_delay)
        else:
            print("\tSuccess")
            started = True

    if started is True:
        for cmd in COMMANDS:
            try:
                subprocess.check_call(cmd)
            except subprocess.CalledProcessError:
                exit(2)

    else:
        exit(1)
