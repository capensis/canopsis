#!/usr/bin/env python
# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2015 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

from sys import exit, argv

from urllib2 import build_opener, HTTPCookieProcessor, Request

from cookielib import CookieJar

from argparse import ArgumentParser

from logging import basicConfig, getLogger

from time import time

from datetime import date

try:
    from json import loads
except:
    from simplejson import loads


def authentificate(server, authkey):
    cj = CookieJar()
    opener = build_opener(HTTPCookieProcessor(cj))
    r = opener.open('http://%s/autoLogin/%s' % (server, authkey))
    r = opener.open('http://%s/account/me' % server)

    try:
        response = loads(r.read())
    except Exception as err:
        print('Error: bad response from server %s' % err)

    if not response['success']:
        print('Bad authkey, no matching with any user')
        exit()

    return opener


basicConfig()
logger = getLogger('launch_report')
unit = {
    "s": 1, "m": 60, "h": 60 * 60, "d": 60 * 60 * 24, "w": 60 * 60 * 24 * 7,
    "M": 60 * 60 * 24 * 30, "y": 60 * 60 * 24 * 365}

parser = ArgumentParser(description='Launch canopsis report through cmd (type "run_report your_authkey -l" to list views)')
parser.add_argument('authkey', help='The user auth key')
parser.add_argument('view_id', help='Canopsis view id', nargs='?')
parser.add_argument('-t', '--time_interval', help='int + char y/M/w/d/h/m/s  (optional)',default=None)
parser.add_argument('-o', '--output-file', help='The output file full path',dest='output_file')
parser.add_argument('-f', '--file-name', help='Auto generated if not provided',dest='filename')
parser.add_argument('-s', '--server', help='The canopsis webserver',default="127.0.0.1:8082", dest='server')
parser.add_argument('--no-file', help="Don't save file after reporting",action="count",dest='nofile')
parser.add_argument('-l', '--list', help='list all views with their ids',action="count", dest='list')
parser.add_argument('-d', '--delete', help='Delete file in breifcase after saving on hdd',action="count")

args = parser.parse_args()
if len(argv) == 1:
    parser.print_help()
    exit(1)

server, authkey = args.server, args.authkey
opener = authentificate(server, authkey)

####check if request listing
if not args.list is None:
    request = Request(
        'http://%s/rest/object/view?&noInternal=true&limit=0' % server)
    r = opener.open(request)
    json_output = loads(r.read())

    print('View ID\t\t\t\tName')
    print('--------------------------------------------')
    for view in json_output['data']:
        if not view.get('internal', False):
            print('%s\t%s' % (view['_id'], view['crecord_name']))

    exit(0)

if not args.view_id:
    print('You must provide one view_id')
    exit(0)

#######Time interval process
time_interval = args.time_interval

tsStop = int(time())
tsStart = - 1  # -1 is the flag for no start (use widget time window)

if(time_interval):
    last_char = time_interval[len(time_interval) - 1:]
    try:
        if last_char.isdigit():
            time_interval = int(time_interval)
        else:
            multiple = unit[last_char]
            time_interval = int(time_interval[:len(time_interval) - 1])
            time_interval *= multiple

        tsStart = int(tsStop - time_interval)

    except Exception as err:
        logger.error("Unrecognized time interval: %s" % err)
        exit(1)

#####launch report

request = Request(
    'http://%s/reporting/%s/%s/%s' % (
        server, tsStart, tsStop, args.view_id), '')
r = opener.open(request)
json_output = loads(r.read())

if not json_output['success']:
    raise Exception(
        'Webserver have failed to export: %s' % json_output['data'])

#####save report
if not args.nofile:
    request = Request(
        'http://%s/file/%s' % (server, json_output['data'][0]['id']))
    r = opener.open(request)

    path = ''
    if args.output_file:
        path = args.output_file
    if args.filename:
        path = '%s%s' % (path, args.filename)
    else:
        dateStop = date.fromtimestamp(tsStop).isoformat()
        if(tsStart != -1):
            dateStart = date.fromtimestamp(tsStart).isoformat()
            path = '%s%s__%s_%s' % (path, args.view_id, dateStart, dateStop)
        else:
            path = '%s%s__%s' % (path, args.view_id, dateStop)

    if path.find('.pdf') == -1:
        path = '%s.pdf' % path

    file = open(path, 'w')
    file.write(r.read())
    file.close()

    print(' + %s saved' % path)

    if args.delete is not None:
        request = Request(
            'http://%s/files/%s' % (
                server, json_output['data']['id']))
        request.get_method = lambda: 'DELETE'
        r = opener.open(request)
        try:
            json.output = loads(r.read())
            if json_output['success']:
                print(' + File successfuly removed from canopsis briefcase')
        except Exception as err:
            logger.error(u'Error when trying to remove file: %s' % err)
