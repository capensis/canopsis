#!/usr/bin/env python

import argparse
import importlib
import os
import re
import subprocess
import sys
import unittest

import xmlrunner
from canopsis.common import root_path

DEFAULT_TEST_DIR = root_path + "/var/lib/canopsis/unittest/canopsis/"
CANOPSIS_PACKAGE = "canopsis"
COVERAGE_OUTPUT_FILE = "coverage.xml"
TESTS_REPORT_DIR = "tests_report"

PATTERN = re.compile("^(?!__).*(?!__)\.py$")

sys.path.append(DEFAULT_TEST_DIR)

def parse_args():
    """Parse the command line arguments."""
    parser = argparse.ArgumentParser(description="unit tests runner")
    parser.add_argument("test_dir", nargs="?",
                        help="Directory where the tests are stored",
                        default=DEFAULT_TEST_DIR)
    return parser.parse_args()

def path_to_modname(path):
    """From the path extract the module name.
    :param path: the path
    :return str: the module name"""
    path = path.replace(DEFAULT_TEST_DIR, "")
    return path.replace("/", ".")[:-3]

def get_tests_list(dir_):
    """Return the list with all unit test files in dir_ and his subdir.
    :param dir_: the directory where the search start
    return tupe: a list of string."""
    files_ = []
    for root, _, filenames in os.walk(dir_):
        for filename in filenames:
            if re.match(PATTERN, filename):
                mod_name = path_to_modname(os.path.join(root, filename))
                files_.append(mod_name)

    return files_

def load_test(modnames, test_suite):
    loader = unittest.TestLoader()
    for mod in modnames:
        test_suite.addTest(loader.loadTestsFromName(mod))

def main():
    args = parse_args()
    modname_list = get_tests_list(args.test_dir)

    os.makedirs(os.path.join(root_path, TESTS_REPORT_DIR))

    os.chdir(DEFAULT_TEST_DIR)
    subprocess.check_call(["coverage", "erase"])
    for modname in modname_list:
        subprocess.call(["coverage",
                         "run",
                         "-p",
                         "--source={}".format(CANOPSIS_PACKAGE),
                         "-m",
                         modname])
    subprocess.call(["coverage", "combine"])
    subprocess.call(["coverage",
                     "xml",
                     "-o",
                     os.path.join(root_path, COVERAGE_OUTPUT_FILE)])

if __name__ == "__main__":
    main()
