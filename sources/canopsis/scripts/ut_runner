#!/usr/bin/env python

import argparse
import importlib
import os
import re
import subprocess
import shutil
import sys
import unittest

import xmlrunner
from canopsis.common import root_path

DEFAULT_TEST_DIR = root_path + "/var/lib/canopsis/unittest/canopsis/"
CANOPSIS_PACKAGE = "canopsis"
COVERAGE_OUTPUT_FILE = "tests_report/coverage.xml"
TESTS_REPORT_DIR = "tests_report"

PATTERN = re.compile("^(?!__).*(?!__)\.py$")

sys.path.append(DEFAULT_TEST_DIR)

def parse_args():
    """Parse the command line arguments."""
    parser = argparse.ArgumentParser(description="unit tests runner")
    parser.add_argument("test_dir", nargs="?",
                        help="Directory where the tests are stored",
                        default=DEFAULT_TEST_DIR)
    return parser.parse_args()

def get_tests_list(dir_):
    """Return the list with all unit test files in dir_ and his subdir.
    :param dir_: the directory where the search start
    return tupe: a list of string."""
    files_ = []
    for root, _, filenames in os.walk(dir_):
        for filename in filenames:
            if re.match(PATTERN, filename):
                mod_name = os.path.join(root, filename)
                files_.append(mod_name)

    return files_

def load_test(modnames, test_suite):
    loader = unittest.TestLoader()
    for mod in modnames:
        test_suite.addTest(loader.loadTestsFromName(mod))

def main():
    args = parse_args()
    modname_list = get_tests_list(args.test_dir)

    result_dir = os.path.join(root_path, TESTS_REPORT_DIR)
    if not os.path.exists(result_dir):
        os.makedirs(result_dir)
    else:
        shutil.rmtree(result_dir)

    cov_filename = os.path.join(root_path, COVERAGE_OUTPUT_FILE)
    if os.path.exists(cov_filename):
        os.remove(cov_filename)

    os.chdir(DEFAULT_TEST_DIR)
    subprocess.check_call(["coverage", "erase"])
    total = 0
    failed = 0
    passed = 0
    for modname in modname_list:
        total += 1
        try:
            _ = subprocess.check_output(["coverage",
                                         "run",
                                         "-p",
                                         "--source={}".format(
                                             CANOPSIS_PACKAGE),
                                         modname],
                                        stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as exc:
            print("{} -> FAIL".format(modname))
            print(exc.output)
            failed += 1
        else:
            print("{} -> SUCESS".format(modname))
            passed += 1
    subprocess.call(["coverage", "combine"])
    subprocess.call(["coverage",
                     "xml",
                     "-o",
                     cov_filename])

    print("\n===============")
    print("Total : {0}\tPassed : {1}\tFailed : {2}".format(total, passed, failed))

if __name__ == "__main__":
    main()
