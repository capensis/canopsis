#!/usr/bin/env python
import sys, hashlib, getpass, time, argparse, logging
from caccount import caccount, caccount_get, caccount_getall
from cstorage import cstorage
from pymongo import Connection
from crecord import crecord

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)s %(levelname)s %(message)s',
                    )

parser = argparse.ArgumentParser()
parser.add_argument('-list', '--list-users',action='store_const',const=True)
parser.add_argument('-add',  '--add-user',action='store_const',const=True)
parser.add_argument('-del',  '--delete-user',action='store_const',const=True)
parser.add_argument('-chpa', '--user-chpass',action='store_const',const=True)

parser.add_argument('-user', '--user-name')
parser.add_argument('-pass', '--user-pass')
parser.add_argument('-mail', '--user-mail')
parser.add_argument('-fnam', '--first-name')
parser.add_argument('-lnam', '--last-name')
parser.add_argument('-debg', '--debug-output')

if len(sys.argv)==1:
    parser.print_help()
    sys.exit(1)

args = parser.parse_args()
if (args.debug_output):
	verbosity = logging.DEBUG
else:
	verbosity = logging.ERROR

whoami = caccount(user="root", group="root")
my_storage = cstorage(whoami, namespace='object', logging_level=verbosity)

def user_exist(cstorage, user_name):
	try:
		my_user = caccount_get(cstorage,user_name)
	except:
		my_user = None
	if (args.debug_output):
		print ("DEBUG: my_user = %s \n" %my_user)	
	return my_user

if (args.list_users):
	all_users = caccount_getall(my_storage)
	counter = 0
	for each_user in all_users:
		counter +=1
		each_user.cat()
		print " + shadowpasswd:\t",each_user.shadowpasswd, "\n"
	if (args.debug_output):
		print "DEBUG: total accounts = %s" % counter

if (args.add_user):
	if not args.user_name:
		print "args.user_name is None"
		sys.exit(1)
	elif not args.user_pass:
		print "args.user_pass is None"
		sys.exit(1)
	elif not args.first_name:
		print "args.first_name is None"
		sys.exit(1)
	elif not args.last_name:
		print "args.last_name is None"
		sys.exit(1)	
	elif not args.user_mail:
		print "args.user_mail is None"
		sys.exit(1)
	else:
		my_user = user_exist(my_storage, args.user_name)
		if (my_user is None):	
			my_account = caccount(firstname = args.first_name, lastname = args.last_name, \
									user=args.user_name, group="capensis", mail=args.user_mail)
			my_account.passwd(args.user_pass)
			my_storage.put(my_account)
			print ("user %s added \n" %(args.user_name))
		else:
			print ("user already exist \n")
			sys.exit(1)
	
if (args.delete_user):
	if not args.user_name:
		print "args.user_name is None"
		sys.exit(1)
	else:
		my_user=user_exist(my_storage, args.user_name)
		if (my_user is not None):	
			my_storage.remove(my_user, account = whoami)
			print ("user %s deleted \n" %(args.user_name))
		else:
			print ("user doesn't exist \n")
			sys.exit(1)

if (args.user_chpass):
		if not args.user_name:
			print "args.user_name is None"
			sys.exit(1)
		else:
			my_user = user_exist(my_storage, args.user_name)
			if (my_user is not None):
				if not args.user_pass:
					inputUserPassword1 = getpass.getpass("Enter password: ")
					inputUserPassword2 = getpass.getpass("Confirm  password: ")
					if (inputUserPassword1 == inputUserPassword2):
						password = inputUserPassword2
					else:
						print ("password didn't match \n")
						sys.exit(1)
				elif args.user_pass:
					password = args.user_pass
					
				my_user.passwd(password)
				my_storage.put(my_user)
			else:
				print ("user doesn't exist \n")
				sys.exit(1)







