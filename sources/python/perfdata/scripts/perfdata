#!/usr/bin/env python
# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2015 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

import logging
import sys

logging_level = logging.INFO

## Options parsing
from optparse import OptionParser

usage = "usage: %prog [options] [showstats|rotate|update]"

parser = OptionParser(usage=usage)

parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                  help="more verbose")

(options, args) = parser.parse_args()

if options.verbose:
    logging_level = logging.DEBUG

logging.basicConfig(level=logging_level,
    #format='%(name)s %(levelname)s %(message)s',
    format='%(message)s')

logger = logging.getLogger('pyperfstore3')


def get_arg(args, index):
    try:
        arg = args[index]
    except:
        logger.error(u'Missing parameters ...')
        sys.exit(1)
    return arg

#### MAIN
logger.debug("Command line options:")
logger.debug(" + Options: %s" % options)
logger.debug(" + Args: %s" % args)

action = get_arg(args, 0)
logger.debug(" + Action: %s" % action)

#node_id = get_arg(args, 1)
#logger.debug(" + Node: %s" % node_id)

## Go
import pyperfstore2
manager = pyperfstore2.manager()

if action == "showstats":
    manager.showStats()

elif action == "update":
    logger.info("Update Pyperfstore data")
    # Rotate plain data
    metrics = manager.find(
        mfilter={'d': {'$exists': True, '$not': {'$size': 0}}})
    logger.info(" + %s metrics" % metrics.count())
    for metric in metrics:
        _id = metric.get('_id')
        dca = metric.get('d', False)
        if dca:
            logger.info(" + Move plain data of %s in Redis" % _id)
            points = ['%s|%s' % (point[0], point[1]) for point in dca]
            [manager.store.redis_pipe.rpush(_id, point) for point in points]
            manager.store.sync()
            manager.store.collection.update(
                {'_id': _id}, {"$unset": {"d": True}})

elif action == "rotate":
    import multiprocessing
    concurrency = multiprocessing.cpu_count() - 1

    if concurrency <= 0:
        concurrency = 1

    logger.info("Concurrency: %s" % concurrency)
    manager.rotateAll(concurrency=concurrency)

else:
    logger.error(u'Invalid action ...')
    sys.exit(1)
