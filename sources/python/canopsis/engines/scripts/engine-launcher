#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2015 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

from canopsis.common.init import Init

from ConfigParser import ConfigParser, ParsingError
from importlib import import_module
from logging import INFO, getLevelName
from sys import stderr, exit, argv
from sys import prefix as sys_prefix
from csv import reader
from os.path import join


class EngineLauncher(object):

    class Config(object):
        """
        Define config parsing functions.
        """

        def __init__(self, parser, section, *args, **kwargs):

            super(EngineLauncher.Config, self).__init__(*args, **kwargs)

            self.parser = parser
            self.section = section

        def list(self, param, val):
            parser = reader([val])

            value = []

            for row in parser:
                value += row

            return value

        def bool(self, param, val):
            return self.parser.getboolean(self.section, param)

        def int(self, param, val):
            return self.parser.getint(self.section, param)

        def float(self, param, val):
            return self.parser.getfloat(self.section, param)

        def str(self, param, val):
            return val

    def __init__(self, etype, name, procnum, logging_level, *args, **kwargs):
        """
        Initialize launcher.

        :param etype: Engine's type (name of python module)
        :param name: Engine's name
        :param procnum: Instance number
        :param logging_level: Minimum logging level
        """

        super(EngineLauncher, self).__init__(*args, **kwargs)

        self.etype = etype
        self.ename = name
        self.name = '{0}-{1}'.format(name, procnum)

        self.section = 'engine:{0}'.format(name)

        self.loglevel = logging_level

        # Get logger
        self.Init = Init()
        self.logger = self.Init.getLogger(
            self.name, level=getLevelName(logging_level)
        )

        self.load_module()
        self.load_engine_config()
        self.init_engine()

    def load_module(self):
        """
        Load python module for the engine.
        """

        try:
            self.module = import_module(
                'canopsis.engines.{0}'.format(self.etype)
            )

        except ImportError as err:
            self.logger.error(
                'Impossible to load engine {0}.{1}: {2}'.format(
                    self.etype, self.name, err
                )
            )

            raise err

    def load_engine_config(self):
        """
        Load config file, and parse it.
        """

        confpath = join(sys_prefix, 'etc', 'amqp2engines.conf')

        try:
            config = ConfigParser()
            config.read(confpath)

        except ParsingError as err:
            self.logger.error(
                'Impossible to parse config file for engine {0}.{1}: {2}'.
                format(
                    self.etype,
                    self.name,
                    err
                )
            )

            raise err

        # Define the config schema
        parser = EngineLauncher.Config(config, self.section)
        schema = {
            'next': parser.list,
            'next_balanced': parser.bool,
            'beat_interval': parser.int,
            'exchange_name': parser.str,
            'routing_keys': parser.list,
            'event_processing': parser.str,
            'max_retries': parser.int
        }

        engine_conf = {}
        engine_extra = {}

        for item in config.items(self.section):
            param = item[0]
            value = item[1]

            # If the param is not defined in the schema, consider it as a string
            if param not in schema:
                self.logger.warning(
                    'Unknown parameter "{0}", assuming it\'s a string'.
                    format(param)
                )

                engine_extra[param] = value

            else:
                engine_conf[param] = schema[param](param, value)

        # Translate 'next' parameter
        if 'next' in engine_conf:
            engine_conf['next_amqp_queues'] = [
                'Engine_{0}'.format(n)
                for n in engine_conf['next']
            ]

            del engine_conf['next']

        self.logger.info(u'Configuration loaded')

        self.engine_conf = engine_conf
        self.engine_extra = engine_extra

    def init_engine(self):
        """
        Initialize engine with basic configuration, and add extra parameters once done.
        """

        self.engine_conf['name'] = self.ename
        self.engine_conf['logging_level'] = self.loglevel

        self.engine = self.module.engine(**self.engine_conf)

        for param in self.engine_extra:
            setattr(self.engine, param, self.engine_extra[param])

    def __call__(self):
        """
        Launch the engine.
        """

        self.engine.run()

if __name__ == '__main__':
    import getopt

    def usage():
        print >> stderr, "Usage: engine-launcher -e <engine type> -n <name> -w <process num> -l <loglevel>"

    try:
        opts, args = getopt.getopt(argv[1:], 'e:n:w:l:')

    except getopt.GetoptError:
        usage()
        exit(1)

    etype = None
    name = None
    procnum = None
    loglevel = INFO

    for o, a in opts:
        if o == '-e':
            etype = a

        elif o == '-n':
            name = a

        elif o == '-w':
            procnum = a

        elif o == '-l':
            loglevel = a.upper()

        else:
            assert False, 'Unknown option: {0}'.format(o)

    if not etype or not name or not procnum:
        usage()
        exit(1)

    # Launch the engine
    launcher = EngineLauncher(etype, name, procnum, loglevel)
    launcher()
