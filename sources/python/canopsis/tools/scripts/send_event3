#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2015 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

import traceback

import getopt

import sys

import os

import urllib

import http.cookiejar

try:
    import json
except:
    import simplejson as json


def usage():
    print(" Usage: send_event \n")
    print(" Options:")
    print("  -s, --server=[SERVER_ADDR]")
    print("     webserver address (default : localhost:8082)")
    print("  -a, --authkey=[AUTHKEY]")
    print("  -f, --file=[FILE_PATH]")
    print("     file contraining a json event to send")
    print("  -j, --json=[JSON]")
    print("     a json string containing a correct event to send")
    print("  -h, --help")
    print("     show help")


def main(argv):
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "s:a:f:j:h",
            ["server=", "authkey=", "file=", "json=", "help"])
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)

    if len(opts) < 1:
        usage()
        sys.exit()

    #---------------------------option processing----------------------
    authkey = None
    server = 'localhost:8082'
    file_path = None
    input_stream = None
    json_string = None

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            sys.exit()
        if opt in ('--server', '-s'):
            server = arg
        if opt in ('--authkey', '-a'):
            authkey = arg
        if opt in ('--file', '-f'):
            file_name, file_extension = os.path.splitext(arg)
            file_path = arg
        if opt in ('--json', '-j'):
            try:
                json_string = json.loads(arg)
            except:
                print('Bad json string')
                sys.exit()

    #---------------------------authenticate---------------------------
    if not authkey:
        print('You must provide an authkey to access the webserver.\n \
            You can generate it from the Canopsis Web UI.')
        usage()
        sys.exit()

    cj = http.cookiejar.CookieJar()
    opener = urllib.request.build_opener(
        urllib.request.HTTPCookieProcessor(cj))
    #print('http://%s/autoLogin/%s' % (server,authkey))
    r = opener.open('http://%s/autologin/%s' % (server, authkey))
    r = opener.open('http://%s/account/me' % server)

    charset = r.info().get_param('charset', 'utf8')

    try:
        response = json.loads(r.read().decode(charset))
    except Exception as err:
        print(('Error: Bad response from server %s' % err))
        sys.exit()

    if not response['success']:
        print('Error: The provided authkey does not match any existing user')
        sys.exit()

    #------------------------------find event source-----------------------
    event = None

    if json_string:
        event = json_string

    elif file_path:
        if file_extension != '.json':
            print('Error: Invalid file format (Must be .json)')
            sys.exit()

        if not os.path.exists(file_path):
            print(('Error: File not found (%s)' % file_path))
            sys.exit()

        #------------------read file-------------------
        try:
            with open(file_path) as f:
                event = json.load(f)
        except Exception as err:
            print(('Invalid json file: %s' % err))
            sys.exit()

    #check if input stream
    elif not sys.stdin.isatty():
        try:
            event = json.loads(sys.stdin.read())
        except:
            print('Error: Invalid json stream')
            sys.exit()

    #-----------------------------prepare event-----------------------------
    if not event:
        print(
            'Error: No json media found, you must provide file/stream/command')
        sys.exit()

    if event.get('perf_data_array', None):
        event['perf_data_array'] = json.dumps(event['perf_data_array'])

    if event.get('tags', None):
        event['tags'] = json.dumps(event['tags'])

    event['connector'] = 'Cli'

    if not event.get('connector_name', None):
        event['connector_name'] = 'Send_event'

    #-----------------------------send event-----------------------------
    clean_event = {}
    for k, v in event.items():
        clean_event[k] = str(v).encode('utf-8')

    request = urllib.request.Request(
        'http://%s/event/' % server,
        urllib.parse.urlencode(clean_event).encode('ascii'))
    r = opener.open(request)
    print('Webserver replied :')
    print((r.read()))


if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except Exception as err:
        traceback.print_exc(file=sys.stdout)
        sys.exit(1)
