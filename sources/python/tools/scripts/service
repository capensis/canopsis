#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2015 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

from ConfigParser import ConfigParser, NoOptionError, ParsingError

from subprocess import call

from os import listdir, kill, remove
from os.path import join, exists, splitext
from sys import prefix as sys_prefix


class Service(object):
    """
        Handle supervisord/internal services.
    """

    internaldir = join(sys_prefix, 'etc', 'init.d')
    supervisordir = join(sys_prefix, 'etc', 'supervisord.d')

    def __init__(self, name, *args, **kwargs):
        """
            :param name: Service name
            :type name: basestring
        """

        super(Service, self).__init__()

        self.name = name

        if name in listdir(Service.internaldir):
            self.internal = True

        elif '{0}.conf'.format(name) in listdir(Service.supervisordir) or "*" in name:
            self.internal = False

            self.ensure_supervisord()
            self.group = self.check_group()

        else:
            raise RuntimeError("Unknown service: {0}".format(name))

    def ensure_supervisord(self):
        """
            Make sure supervisord is running and updated.
        """

        pidfile = join(sys_prefix, 'var', 'run', 'supervisord.pid')
        started = False

        if exists(pidfile):
            with open(pidfile) as f:
                pid = int(f.read())

                try:
                    kill(pid, 0)
                    started = True

                except OSError:
                    started = False

            if not started:
                remove(pidfile)

        if not started:
            call(
                '/bin/bash -l -c "supervisord &>/dev/null"', shell=True)

        else:
            call(
                '/bin/bash -l -c "supervisorctl reread &>/dev/null"',
                shell=True)

    def check_group(self):
        """
            Check if supervisord service is referring to a group of process.
        """

        confpath = join(sys_prefix, 'etc', 'supervisord.d/{0}.conf'.format(
            self.name)
        )

        try:
            parser = ConfigParser()
            parser.read(confpath)

        except ParsingError as err:
            raise RuntimeError('Impossible to read {0}: {1}'.format(
                confpath, err))

        for section in parser.sections():
            if self.name in section:
                if section.startswith('group:'):
                    return True

                elif section.startswith('program:'):
                    try:
                        nprocs = parser.getint(section, 'numprocs')

                    except NoOptionError:
                        nprocs = 1

                    if nprocs > 1:
                        return True

        return False

    def internal_action(self, action):
        """
            Run action on internal service.
        """

        call(
            '/bin/bash -l -c "{0}/etc/init.d/{1} {2}"'.format(
                sys_prefix, self.name, action
            ),
            shell=True
        )

    def supervisord_action(self, action):
        """
            Run action on supervisord service.
        """

        if self.group:
            if action == 'status':
                call(
                    '/bin/bash -l -c \'supervisorctl status | grep "{0}"\''.
                    format(self.name), shell=True)
                return

            elif action in ['mstart', 'mstop', 'mrestart']:
                name = self.name

            else:
                name = '{0}:*'.format(self.name)

        else:
            name = self.name

        call('/bin/bash -l -c "supervisorctl {0} {1}"'.format(
            action, name), shell=True)

    def action(self, action):
        """
            Run action on service.
        """

        if action not in ['start', 'stop', 'restart', 'status', 'mrestart', 'mstart', 'mstop']:
            raise RuntimeError('Unknown action {0}'.format(action))

        if self.internal:
            self.internal_action(action)

        else:
            self.supervisord_action(action)

if __name__ == '__main__':
    import sys

    if len(sys.argv) == 2 and sys.argv[1] == '--status-all':
        services = listdir(Service.internaldir)
        services.extend(listdir(Service.supervisordir))

        for srv in services:
            srv, _ = splitext(srv)

            if srv not in ['.gitignore', 'canopsis']:
                sv = Service(srv)
                sv.action('status')

        sys.exit(0)

    elif len(sys.argv) != 3:
        print >>sys.stderr, "Usage: service <name> <action>"
        print >>sys.stderr, "       service --status-all"
        sys.exit(1)

    try:
        sv = Service(sys.argv[1])
        sv.action(sys.argv[2])

    except RuntimeError as err:
        print >>sys.stderr, err
        sys.exit(1)
