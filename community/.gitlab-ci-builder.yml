build_oci:
  extends: .common
  stage: build
  before_script:
    - docker login docker.canopsis.net -u oci_build -p $DOCKER_AUTH_CI_BUILDER
  after_script:
    - docker logout docker.canopsis.net
  script:
    - make -C ${OCI_PATH_1} docker-images VERSION=$CI_COMMIT_TAG
    - make -C ${OCI_PATH_2} docker-images VERSION=$CI_COMMIT_TAG
    - docker images --format="{{.Repository}}:{{.Tag}}" | grep docker.canopsis.net/docker/community | grep $CI_COMMIT_TAG | xargs -I {} docker push {}
  rules:
    - if: $CI_COMMIT_TAG =~ '/^[0-9]+\.[0-9]+(\.[0-9]+)?$/' && $CI_COMMIT_TAG !~ '/(rc([0-9])?|preview([0-9])?)/' && $CI_PROJECT_NAME == "canopsis-pro"

build_oci_dev:
  extends: .common
  stage: build
  before_script:
    - docker login docker.canopsis.net -u oci_build -p $DOCKER_AUTH_CI_BUILDER
  after_script:
    - docker logout docker.canopsis.net
  script:
    - make -C ${OCI_PATH_1} docker-images VERSION=$CI_COMMIT_TAG
    - make -C ${OCI_PATH_2} docker-images VERSION=$CI_COMMIT_TAG
    - >- 
      for i in $(docker images --format="{{.Repository}}:{{.Tag}}" |
      grep docker.canopsis.net/docker/community |
      grep $CI_COMMIT_TAG); do docker image tag $i $(echo $i |
      sed 's/.net\/docker\/community/.net\/docker\/develop-community/g') ; done
      && docker images --format="{{.Repository}}:{{.Tag}}" |
      grep develop-community |
      grep $CI_COMMIT_TAG |
      xargs -I {} docker push {}
  rules:
    - if: $CI_COMMIT_TAG =~ '/^[0-9]+\.[0-9]+(\.[0-9]+)?(-)?(rc([0-9])?|preview([0-9])?)/' && $CI_PROJECT_NAME == "canopsis-pro"

source_rpm:
  extends: .common
  stage: source
  tags:
   - executor-docker
  image: debian:latest
  before_script:
    - apt update && apt install -y make git
    - cd ${CANOPSIS_EDITION}
  script:
    - export DEFINE_Version="$(printf $CI_COMMIT_TAG)"
    - make -C dist clean
    - make -C dist prep-rpm VERSION=$DEFINE_Version
    - chown -R 1000:1000 dist/build
  artifacts:
    paths:
      - ${CANOPSIS_EDITION}/dist/build
  rules:
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAME == "canopsis-pro"

build_rpm:
  extends: .common
  stage: build
  tags:
    - executor-docker
  image: docker.capensis.fr/docker/images/mock-builder:latest
  variables:
    ENABLE_NETWORK: 1
  script:
    - export DEFINE_Version="$(printf $CI_COMMIT_TAG)"
    - export DEFINE_Version_safe="$(echo ${DEFINE_Version} | sed -e 's/\(.*\)-\([^g][^-]*\)/\1~\2/g' -e 's/-/_/g')"
    - set -e; for dist in almalinux-8-x86_64 almalinux-9-x86_64; do
          MOCK_CONFIG=dist/build/${dist}/canopsis.cfg RPMBUILD_DIR=dist/build/${dist} /build.sh;
      done
  artifacts:
    when: always
    paths:
      - ${CANOPSIS_EDITION}/dist/build/*/output/*.rpm
      - ${CANOPSIS_EDITION}/dist/build/*/output/*.log
  rules:
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAME == "canopsis-pro"

release-rpm:
  stage: release
  tags:
    - executor-docker
  image: docker.capensis.fr/docker/images/publish-rpm:latest
  variables:
    RPM_ARCH: x86_64
  script:
    - publish-rpm -p el8/${CANOPSIS_EDITION} dist/build/almalinux-8-x86_64/output
    - publish-rpm -p el9/${CANOPSIS_EDITION} dist/build/almalinux-9-x86_64/output
  rules:
    - if: $CI_COMMIT_TAG =~ '/(rc([0-9])?|preview([0-9])?)/' && $CI_PROJECT_NAME == "canopsis-pro"
      variables:
        RPM_REPO: ${RPM_REPO_DEVELOP}
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ '/(rc([0-9])?|preview([0-9])?)/' && $CI_PROJECT_NAME == "canopsis-pro"
      variables:
        RPM_REPO: ${RPM_REPO_RELEASE}
