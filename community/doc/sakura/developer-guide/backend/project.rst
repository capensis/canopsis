.. _dev-backend-pyproject:

Canopsis Python Project
=======================

Every Python component of Canopsis is distributed via a Python package, using
the namespace ``canopsis``.

For example, if I have to develop something specific to nagios, I will create the
following Python package : ``canopsis.nagios``.

A project exists within the ``sources/python`` folder and **must** contain a
``setup.py``. We provide some useful tools for this, in the module ``canopsis.common.setup``
(first package to be installed).

Basic Project
-------------

Architecture
++++++++++++

Create your simple project :

.. code-block:: bash

   $ cd canopsis/sources/python
   $ mkdir simplepy
   $ cd simplepy
   $ mkdir test scripts
   $ mkdir -p canopsis/simplepy
   $ touch setup.py
   $ touch test/__init__.py
   $ touch canopsis/__init__.py
   $ touch canopsis/simplepy/__init__.py

You will be able to put your unittests in the ``test`` folder, your executables
in the ``scripts`` folder, and your project code in ``canopsis/simplepy``.

But, it's not that simple, you will need to add this to ``canopsis/__init__.py`` :

.. code-block:: python

   # attach this project to canopsis namespace
   from pkgutil import extend_path
   __path__ = extend_path(__path__, __name__)

This will allow multiple egg (python packages generated by the ``setup.py``) to
distribute the same package (here ``canopsis``). This package will act as a
namespace.

Then, we will set the version of our package by editing ``canopsis/simplepy/__init__.py``
as following :

.. code-block:: python

   __version__ = '0.1'

setuptools
++++++++++

And now, the basic ``setup.py`` :

.. code-block:: python

   from canopsis.common.setup import setup

   install_requires = ['canopsis.common']

   setup(
       description='My awesome canopsis package',
       install_requires=install_requires,
       keywords='simplepy'
   )

Many things, usually required for standard *setuptools*, are unneeded here because
of our own ``setup()`` overriding the standard one.

Integration with Canopsis
-------------------------

Now we have our simple project, we can upload it to **PyPy**, in order to make it
available via ``pip`` or ``easy_install``.

Here, we want to build it with Canopsis. For this purpose, you will have to edit
the file ``sources/build.d/40_canolibs.install`` :

.. code-block:: bash

   NAME="canolibs"

   PROJECTS[0]='common'
   PROJECTS[1]='configuration'
   PROJECTS[2]='timeserie'
   PROJECTS[3]='middleware'
   PROJECTS[4]='old'
   PROJECTS[5]='schema'
   PROJECTS[6]='rpc'
   PROJECTS[7]='mom'
   PROJECTS[8]='storage'
   PROJECTS[9]='mongo'
   # ...

Simply add a line ``PROJECTS[XX]='simplepy'`` at the correct place (there is no
dependency handling here), and it will be built within the Canopsis environment.
