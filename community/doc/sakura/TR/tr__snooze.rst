.. _TR__Snooze:

=============
Snoozed alarm
=============

This document describes the snooze behaviour of Canopsis, and its
implementation.

.. contents::
   :depth: 3

References
==========

 - :ref:`FR::Alarm <FR__Alarm>`
 - :ref:`FR::Snooze <FR__Snooze>`
 - :ref:`FR::Snooze event <FR__Event__Snooze>`

Updates
=======

.. csv-table::
   :header: "Author(s)", "Date", "Version", "Summary", "Accepted by"

   "Jean-Baptiste Braun", "2016/09/16", "0.1", "Proposition of implementation", ""

Contents
========

Snooze behaviour will be implemented in ``*_alarm`` collections. It won't be
stored in events / events_log.

Snooze information
------------------

Snoozes will be notified with a new type of event : ``snooze``.

Auto-snoozes are events generated by the ``event_filter`` engine under some
conditions :

 - a snooze rule is defined
 - an event of type check and state != 0 matches this rule
 - there is currently no alarm about the ``entity_id`` of this event (it's
   going to be created when the KO will reach the ``alerts`` engine)

In this case, the ``event_filter`` will generate a snooze event and publish it.

Storage
-------

In alarm steps, snooze will be a new type of step, recording both the snooze
start time and end time. A snooze property (default value is null) will be
added to alarm values to carry information about the last snooze step.

To retrieve non-snoozed alarms, a mongo filter filtering snooze=null or
snooze_end < now is applied by default.

If a snoozed alarm is snoozed again :

 - The last snooze will be appended to steps
 - The new snooze will overwrite ``snooze`` field

Consequences :

 - A snoozed alarm that is snoozed again will stop being snoozed at the end of
   the most recent snooze
 - If the second snooze has a duration of 0 seconds, this behaviour achieve an
   'un-snooze' function

Configuration
-------------

A snooze action in rules does carry only one information : its duration.
