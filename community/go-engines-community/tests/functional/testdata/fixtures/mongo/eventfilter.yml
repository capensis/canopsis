template:
  - &eventfilter {
    _id: <UUID()>,
    author: root,
    config: {
      actions: [
        {
          name: connector,
          type: set_field,
          value: <LoremIpsumWord()>
        }
      ],
      on_failure: pass,
      on_success: pass
    },
    created: <NowUnix()>,
    updated: <Current().created>,
    description: <LoremIpsumSentence(3)>,
    enabled: true,
    event_pattern: [
      [
        {
          field: resource,
          cond: {
            type: eq,
            value: <LoremIpsumWord()>
          }
        }
      ]
    ],
    entity_pattern: [
      [
        {
          field: name,
          cond: {
            type: eq,
            value: <LoremIpsumWord()>
          }
        }
      ]
    ],
    priority: <Index()>,
    type: enrichment
  }
eventfilter:
  eventfilter_1:
    <<: *eventfilter
    _id: test-eventfilter-to-get-1
    config:
      actions:
      - name: connector
        type: set_field
        value: kafka_connector
      on_failure: pass
      on_success: pass
    description: how it should have ended.
    external_data:
      entity:
        type: entity
    event_pattern: [
      [
        {
          field: resource,
          cond: {
            type: eq,
            value: test-eventfilter-to-get-1-pattern
          }
        }
      ]
    ]
  eventfilter_2:
    <<: *eventfilter
    _id: test-eventfilter-to-get-2
    description: drop filter
    config: {}
    event_pattern: [
      [
        {
          field: resource,
          cond: {
            type: eq,
            value: test-eventfilter-to-get-2-pattern
          }
        }
      ]
    ]
    type: drop
  eventfilter_3:
    <<: *eventfilter
    _id: test-eventfilter-to-get-3
    description: break filter
    config: {}
    event_pattern: [
      [
        {
          field: resource,
          cond: {
            type: eq,
            value: test-eventfilter-to-get-3-pattern
          }
        }
      ]
    ]
    type: break
  eventfilter_4:
    <<: *eventfilter
    _id: test-eventfilter-to-update-1
  eventfilter_5:
    <<: *eventfilter
    _id: test-eventfilter-to-update-2
  eventfilter_6:
    <<: *eventfilter
    _id: test-eventfilter-to-update-3
  eventfilter_7:
    <<: *eventfilter
    _id: test-eventfilter-to-update-4
  eventfilter_8:
    <<: *eventfilter
    _id: test-eventfilter-bulk-update-1
  eventfilter_9:
    <<: *eventfilter
    _id: test-eventfilter-bulk-update-2
  eventfilter_10:
    <<: *eventfilter
    _id: test-eventfilter-bulk-update-3
  eventfilter_11:
    <<: *eventfilter
    _id: test-eventfilter-bulk-update-4
  eventfilter_12:
    <<: *eventfilter
    _id: test-eventfilter-bulk-update-5
    description: break filter
    event_pattern: [
      [
        {
          field: resource,
          cond: {
            type: eq,
            value: test-eventfilter-bulk-update-5-pattern
          }
        }
      ]
    ]
    type: break
  eventfilter_13:
    <<: *eventfilter
    _id: test-eventfilter-to-delete
  eventfilter_14:
    <<: *eventfilter
    _id: test-eventfilter-to-bulk-delete-1
  eventfilter_15:
    <<: *eventfilter
    _id: test-eventfilter-to-bulk-delete-2
  eventfilter_16:
    <<: *eventfilter
    _id: test-eventfilter-check-id
  eventfilter_17:
    _id: test-update-change-entity
    config:
      component: change_entity
    type: change_entity
  eventfilter_18:
    <<: *eventfilter
    _id: test-eventfilter-to-update-5
  eventfilter_19:
    <<: *eventfilter
    _id: test-eventfilter-to-update-6
  eventfilter_20:
    <<: *eventfilter
    _id: test-eventfilter-to-update-7
  eventfilter_21:
    <<: *eventfilter
    _id: test-eventfilter-to-update-8
  eventfilter_22:
    <<: *eventfilter
    _id: test-eventfilter-to-update-9

  eventfilter_backward_compatibility_1:
    <<: *eventfilter
    _id: test-eventfilter-to-backward-compatibility-1
    config:
      actions:
        - name: customer
          description: customer
          type: set_entity_info_from_template
          value: '{{ .RegexMatch.Resource.SI_CMDB }}'
        - name: manager
          description: manager
          type: set_entity_info_from_template
          value: '{{ .RegexMatch.Resource.SI_CMDB }}'
      on_failure: pass
      on_success: pass
    old_patterns:
      - resource:
          regex_match: 'CMDD:(?P<SI_CMDB>.*?)($|,)'
    type: enrichment

  eventfilter_backward_compatibility_to_get:
    _id: test-eventfilter-to-backward-compatibility-to-get
    author: root
    config:
      actions:
        - name: customer
          description: customer
          type: set_entity_info_from_template
          value: 'test'
      on_failure: pass
      on_success: pass
    created: 1608284568
    description: how it should have ended.
    enabled: true
    old_patterns:
      - resource:
          regex_match: 'test-eventfilter-to-backward-compatibility-to-get'
    priority: 0
    type: enrichment
    updated: 1608285370

  eventfilter_backward_compatibility_to_update:
    <<: *eventfilter
    _id: test-eventfilter-to-backward-compatibility-to-update
    old_patterns:
      - resource:
          regex_match: 'test-eventfilter-to-backward-compatibility-to-update'
    type: drop
