// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "connector":
			out.Connector = string(in.String())
		case "connector_name":
			out.ConnectorName = string(in.String())
		case "event_type":
			out.EventType = string(in.String())
		case "component":
			out.Component = string(in.String())
		case "resource":
			out.Resource = string(in.String())
		case "perf_data":
			if in.IsNull() {
				in.Skip()
				out.PerfData = nil
			} else {
				if out.PerfData == nil {
					out.PerfData = new(string)
				}
				*out.PerfData = string(in.String())
			}
		case "perf_data_array":
			if in.IsNull() {
				in.Skip()
				out.PerfDataArray = nil
			} else {
				in.Delim('[')
				if out.PerfDataArray == nil {
					if !in.IsDelim(']') {
						out.PerfDataArray = make([]PerfData, 0, 1)
					} else {
						out.PerfDataArray = []PerfData{}
					}
				} else {
					out.PerfDataArray = (out.PerfDataArray)[:0]
				}
				for !in.IsDelim(']') {
					var v1 PerfData
					easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(in, &v1)
					out.PerfDataArray = append(out.PerfDataArray, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(CpsNumber)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Status).UnmarshalJSON(data))
				}
			}
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "state_type":
			if in.IsNull() {
				in.Skip()
				out.StateType = nil
			} else {
				if out.StateType == nil {
					out.StateType = new(CpsNumber)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StateType).UnmarshalJSON(data))
				}
			}
		case "source_type":
			out.SourceType = string(in.String())
		case "long_output":
			out.LongOutput = string(in.String())
		case "state":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.State).UnmarshalJSON(data))
			}
		case "output":
			out.Output = string(in.String())
		case "current_alarm":
			if in.IsNull() {
				in.Skip()
				out.Alarm = nil
			} else {
				if out.Alarm == nil {
					out.Alarm = new(Alarm)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes2(in, out.Alarm)
			}
		case "current_entity":
			if in.IsNull() {
				in.Skip()
				out.Entity = nil
			} else {
				if out.Entity == nil {
					out.Entity = new(Entity)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(in, out.Entity)
			}
		case "author":
			out.Author = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "routing_key":
			out.RK = string(in.String())
		case "ack_resources":
			out.AckResources = bool(in.Bool())
		case "duration":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Duration).UnmarshalJSON(data))
			}
		case "ticket":
			out.Ticket = string(in.String())
		case "ticket_data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TicketData = make(map[string]string)
				} else {
					out.TicketData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.TicketData)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "stat_name":
			out.StatName = string(in.String())
		case "debug":
			out.Debug = bool(in.Bool())
		case "role":
			out.Role = string(in.String())
		case "extra":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ExtraInfos = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.ExtraInfos)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "alarm_change":
			if in.IsNull() {
				in.Skip()
				out.AlarmChange = nil
			} else {
				if out.AlarmChange == nil {
					out.AlarmChange = new(AlarmChange)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(in, out.AlarmChange)
			}
		case "metaalarm_rule_id":
			out.MetaAlarmRuleID = string(in.String())
		case "metaalarm_value_path":
			out.MetaAlarmValuePath = string(in.String())
		case "ma_parents":
			if in.IsNull() {
				in.Skip()
				out.MetaAlarmParents = nil
			} else {
				if out.MetaAlarmParents == nil {
					out.MetaAlarmParents = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.MetaAlarmParents = nil
				} else {
					in.Delim('[')
					if *out.MetaAlarmParents == nil {
						if !in.IsDelim(']') {
							*out.MetaAlarmParents = make([]string, 0, 4)
						} else {
							*out.MetaAlarmParents = []string{}
						}
					} else {
						*out.MetaAlarmParents = (*out.MetaAlarmParents)[:0]
					}
					for !in.IsDelim(']') {
						var v4 string
						v4 = string(in.String())
						*out.MetaAlarmParents = append(*out.MetaAlarmParents, v4)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "ma_children":
			if in.IsNull() {
				in.Skip()
				out.MetaAlarmChildren = nil
			} else {
				if out.MetaAlarmChildren == nil {
					out.MetaAlarmChildren = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.MetaAlarmChildren = nil
				} else {
					in.Delim('[')
					if *out.MetaAlarmChildren == nil {
						if !in.IsDelim(']') {
							*out.MetaAlarmChildren = make([]string, 0, 4)
						} else {
							*out.MetaAlarmChildren = []string{}
						}
					} else {
						*out.MetaAlarmChildren = (*out.MetaAlarmChildren)[:0]
					}
					for !in.IsDelim(']') {
						var v5 string
						v5 = string(in.String())
						*out.MetaAlarmChildren = append(*out.MetaAlarmChildren, v5)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "display_name":
			out.DisplayName = string(in.String())
		case "pbehavior_info":
			easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(in, &out.PbehaviorInfo)
		case "initiator":
			out.Initiator = string(in.String())
		case "delayed_scenario_id":
			out.DelayedScenarioID = string(in.String())
		case "added_to_services":
			if in.IsNull() {
				in.Skip()
				out.AddedToServices = nil
			} else {
				in.Delim('[')
				if out.AddedToServices == nil {
					if !in.IsDelim(']') {
						out.AddedToServices = make([]string, 0, 4)
					} else {
						out.AddedToServices = []string{}
					}
				} else {
					out.AddedToServices = (out.AddedToServices)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.AddedToServices = append(out.AddedToServices, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "removed_from_services":
			if in.IsNull() {
				in.Skip()
				out.RemovedFromServices = nil
			} else {
				in.Delim('[')
				if out.RemovedFromServices == nil {
					if !in.IsDelim(']') {
						out.RemovedFromServices = make([]string, 0, 4)
					} else {
						out.RemovedFromServices = []string{}
					}
				} else {
					out.RemovedFromServices = (out.RemovedFromServices)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.RemovedFromServices = append(out.RemovedFromServices, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pbh_parameters":
			out.PbhParameters = string(in.String())
		case "idle_rule_apply":
			out.IdleRuleApply = string(in.String())
		case "execution":
			out.Execution = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	{
		const prefix string = ",\"connector\":"
		out.RawString(prefix)
		out.String(string(in.Connector))
	}
	{
		const prefix string = ",\"connector_name\":"
		out.RawString(prefix)
		out.String(string(in.ConnectorName))
	}
	{
		const prefix string = ",\"event_type\":"
		out.RawString(prefix)
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"component\":"
		out.RawString(prefix)
		out.String(string(in.Component))
	}
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix)
		out.String(string(in.Resource))
	}
	{
		const prefix string = ",\"perf_data\":"
		out.RawString(prefix)
		if in.PerfData == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PerfData))
		}
	}
	{
		const prefix string = ",\"perf_data_array\":"
		out.RawString(prefix)
		if in.PerfDataArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.PerfDataArray {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(out, v9)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Status).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"state_type\":"
		out.RawString(prefix)
		if in.StateType == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.StateType).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"source_type\":"
		out.RawString(prefix)
		out.String(string(in.SourceType))
	}
	{
		const prefix string = ",\"long_output\":"
		out.RawString(prefix)
		out.String(string(in.LongOutput))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Raw((in.State).MarshalJSON())
	}
	{
		const prefix string = ",\"output\":"
		out.RawString(prefix)
		out.String(string(in.Output))
	}
	{
		const prefix string = ",\"current_alarm\":"
		out.RawString(prefix)
		if in.Alarm == nil {
			out.RawString("null")
		} else {
			easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes2(out, *in.Alarm)
		}
	}
	{
		const prefix string = ",\"current_entity\":"
		out.RawString(prefix)
		if in.Entity == nil {
			out.RawString("null")
		} else {
			easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(out, *in.Entity)
		}
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"routing_key\":"
		out.RawString(prefix)
		out.String(string(in.RK))
	}
	{
		const prefix string = ",\"ack_resources\":"
		out.RawString(prefix)
		out.Bool(bool(in.AckResources))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Raw((in.Duration).MarshalJSON())
	}
	{
		const prefix string = ",\"ticket\":"
		out.RawString(prefix)
		out.String(string(in.Ticket))
	}
	if len(in.TicketData) != 0 {
		const prefix string = ",\"ticket_data\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.TicketData {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"stat_name\":"
		out.RawString(prefix)
		out.String(string(in.StatName))
	}
	{
		const prefix string = ",\"debug\":"
		out.RawString(prefix)
		out.Bool(bool(in.Debug))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"extra\":"
		out.RawString(prefix)
		if in.ExtraInfos == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.ExtraInfos {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				if m, ok := v11Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v11Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v11Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"alarm_change\":"
		out.RawString(prefix)
		if in.AlarmChange == nil {
			out.RawString("null")
		} else {
			easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(out, *in.AlarmChange)
		}
	}
	{
		const prefix string = ",\"metaalarm_rule_id\":"
		out.RawString(prefix)
		out.String(string(in.MetaAlarmRuleID))
	}
	{
		const prefix string = ",\"metaalarm_value_path\":"
		out.RawString(prefix)
		out.String(string(in.MetaAlarmValuePath))
	}
	{
		const prefix string = ",\"ma_parents\":"
		out.RawString(prefix)
		if in.MetaAlarmParents == nil {
			out.RawString("null")
		} else {
			if *in.MetaAlarmParents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v12, v13 := range *in.MetaAlarmParents {
					if v12 > 0 {
						out.RawByte(',')
					}
					out.String(string(v13))
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"ma_children\":"
		out.RawString(prefix)
		if in.MetaAlarmChildren == nil {
			out.RawString("null")
		} else {
			if *in.MetaAlarmChildren == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v14, v15 := range *in.MetaAlarmChildren {
					if v14 > 0 {
						out.RawByte(',')
					}
					out.String(string(v15))
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"display_name\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"pbehavior_info\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(out, in.PbehaviorInfo)
	}
	{
		const prefix string = ",\"initiator\":"
		out.RawString(prefix)
		out.String(string(in.Initiator))
	}
	if in.DelayedScenarioID != "" {
		const prefix string = ",\"delayed_scenario_id\":"
		out.RawString(prefix)
		out.String(string(in.DelayedScenarioID))
	}
	if len(in.AddedToServices) != 0 {
		const prefix string = ",\"added_to_services\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v16, v17 := range in.AddedToServices {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	if len(in.RemovedFromServices) != 0 {
		const prefix string = ",\"removed_from_services\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v18, v19 := range in.RemovedFromServices {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if in.PbhParameters != "" {
		const prefix string = ",\"pbh_parameters\":"
		out.RawString(prefix)
		out.String(string(in.PbhParameters))
	}
	if in.IdleRuleApply != "" {
		const prefix string = ",\"idle_rule_apply\":"
		out.RawString(prefix)
		out.String(string(in.IdleRuleApply))
	}
	if in.Execution != "" {
		const prefix string = ",\"execution\":"
		out.RawString(prefix)
		out.String(string(in.Execution))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(l, v)
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(in *jlexer.Lexer, out *PbehaviorInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Timestamp).UnmarshalJSON(data))
				}
			}
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "type":
			out.TypeID = string(in.String())
		case "type_name":
			out.TypeName = string(in.String())
		case "canonical_type":
			out.CanonicalType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(out *jwriter.Writer, in PbehaviorInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		if in.Timestamp == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Timestamp).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.TypeID))
	}
	{
		const prefix string = ",\"type_name\":"
		out.RawString(prefix)
		out.String(string(in.TypeName))
	}
	{
		const prefix string = ",\"canonical_type\":"
		out.RawString(prefix)
		out.String(string(in.CanonicalType))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(in *jlexer.Lexer, out *AlarmChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = AlarmChangeType(in.String())
		case "PreviousState":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousState).UnmarshalJSON(data))
			}
		case "PreviousStateChange":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousStateChange).UnmarshalJSON(data))
			}
		case "PreviousStatus":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousStatus).UnmarshalJSON(data))
			}
		case "PreviousStatusChange":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousStatusChange).UnmarshalJSON(data))
			}
		case "PreviousPbehaviorTypeID":
			out.PreviousPbehaviorTypeID = string(in.String())
		case "PreviousPbehaviorCannonicalType":
			out.PreviousPbehaviorCannonicalType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(out *jwriter.Writer, in AlarmChange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"PreviousState\":"
		out.RawString(prefix)
		out.Raw((in.PreviousState).MarshalJSON())
	}
	{
		const prefix string = ",\"PreviousStateChange\":"
		out.RawString(prefix)
		out.Raw((in.PreviousStateChange).MarshalJSON())
	}
	{
		const prefix string = ",\"PreviousStatus\":"
		out.RawString(prefix)
		out.Raw((in.PreviousStatus).MarshalJSON())
	}
	{
		const prefix string = ",\"PreviousStatusChange\":"
		out.RawString(prefix)
		out.Raw((in.PreviousStatusChange).MarshalJSON())
	}
	{
		const prefix string = ",\"PreviousPbehaviorTypeID\":"
		out.RawString(prefix)
		out.String(string(in.PreviousPbehaviorTypeID))
	}
	{
		const prefix string = ",\"PreviousPbehaviorCannonicalType\":"
		out.RawString(prefix)
		out.String(string(in.PreviousPbehaviorCannonicalType))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(in *jlexer.Lexer, out *Entity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "impact":
			if in.IsNull() {
				in.Skip()
				out.Impacts = nil
			} else {
				in.Delim('[')
				if out.Impacts == nil {
					if !in.IsDelim(']') {
						out.Impacts = make([]string, 0, 4)
					} else {
						out.Impacts = []string{}
					}
				} else {
					out.Impacts = (out.Impacts)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Impacts = append(out.Impacts, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "impacted_services":
			if in.IsNull() {
				in.Skip()
				out.ImpactedServices = nil
			} else {
				in.Delim('[')
				if out.ImpactedServices == nil {
					if !in.IsDelim(']') {
						out.ImpactedServices = make([]string, 0, 4)
					} else {
						out.ImpactedServices = []string{}
					}
				} else {
					out.ImpactedServices = (out.ImpactedServices)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.ImpactedServices = append(out.ImpactedServices, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "impacted_services_to_add":
			if in.IsNull() {
				in.Skip()
				out.ImpactedServicesToAdd = nil
			} else {
				in.Delim('[')
				if out.ImpactedServicesToAdd == nil {
					if !in.IsDelim(']') {
						out.ImpactedServicesToAdd = make([]string, 0, 4)
					} else {
						out.ImpactedServicesToAdd = []string{}
					}
				} else {
					out.ImpactedServicesToAdd = (out.ImpactedServicesToAdd)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.ImpactedServicesToAdd = append(out.ImpactedServicesToAdd, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "impacted_services_to_remove":
			if in.IsNull() {
				in.Skip()
				out.ImpactedServicesToRemove = nil
			} else {
				in.Delim('[')
				if out.ImpactedServicesToRemove == nil {
					if !in.IsDelim(']') {
						out.ImpactedServicesToRemove = make([]string, 0, 4)
					} else {
						out.ImpactedServicesToRemove = []string{}
					}
				} else {
					out.ImpactedServicesToRemove = (out.ImpactedServicesToRemove)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.ImpactedServicesToRemove = append(out.ImpactedServicesToRemove, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "depends":
			if in.IsNull() {
				in.Skip()
				out.Depends = nil
			} else {
				in.Delim('[')
				if out.Depends == nil {
					if !in.IsDelim(']') {
						out.Depends = make([]string, 0, 4)
					} else {
						out.Depends = []string{}
					}
				} else {
					out.Depends = (out.Depends)[:0]
				}
				for !in.IsDelim(']') {
					var v24 string
					v24 = string(in.String())
					out.Depends = append(out.Depends, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "enable_history":
			if in.IsNull() {
				in.Skip()
				out.EnableHistory = nil
			} else {
				in.Delim('[')
				if out.EnableHistory == nil {
					if !in.IsDelim(']') {
						out.EnableHistory = make([]CpsTime, 0, 2)
					} else {
						out.EnableHistory = []CpsTime{}
					}
				} else {
					out.EnableHistory = (out.EnableHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v25 CpsTime
					if data := in.Raw(); in.Ok() {
						in.AddError((v25).UnmarshalJSON(data))
					}
					out.EnableHistory = append(out.EnableHistory, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "measurements":
			if m, ok := out.Measurements.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Measurements.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Measurements = in.Interface()
			}
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "infos":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Infos = make(map[string]Info)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v26 Info
					easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, &v26)
					(out.Infos)[key] = v26
					in.WantComma()
				}
				in.Delim('}')
			}
		case "component_infos":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ComponentInfos = make(map[string]Info)
				} else {
					out.ComponentInfos = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 Info
					easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, &v27)
					(out.ComponentInfos)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "type":
			out.Type = string(in.String())
		case "component":
			out.Component = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "impact_level":
			out.ImpactLevel = int64(in.Int64())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "last_event_date":
			if in.IsNull() {
				in.Skip()
				out.LastEventDate = nil
			} else {
				if out.LastEventDate == nil {
					out.LastEventDate = new(CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastEventDate).UnmarshalJSON(data))
				}
			}
		case "last_idle_rule_apply":
			out.LastIdleRuleApply = string(in.String())
		case "idle_since":
			if in.IsNull() {
				in.Skip()
				out.IdleSince = nil
			} else {
				if out.IdleSince == nil {
					out.IdleSince = new(CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IdleSince).UnmarshalJSON(data))
				}
			}
		case "import_source":
			out.ImportSource = string(in.String())
		case "imported":
			if in.IsNull() {
				in.Skip()
				out.Imported = nil
			} else {
				if out.Imported == nil {
					out.Imported = new(CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Imported).UnmarshalJSON(data))
				}
			}
		case "pbehavior_info":
			easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(in, &out.PbehaviorInfo)
		case "sli_avail_state":
			out.SliAvailState = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(out *jwriter.Writer, in Entity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"impact\":"
		out.RawString(prefix)
		if in.Impacts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Impacts {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if len(in.ImpactedServices) != 0 {
		const prefix string = ",\"impacted_services\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v30, v31 := range in.ImpactedServices {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"impacted_services_to_add\":"
		out.RawString(prefix)
		if in.ImpactedServicesToAdd == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.ImpactedServicesToAdd {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"impacted_services_to_remove\":"
		out.RawString(prefix)
		if in.ImpactedServicesToRemove == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.ImpactedServicesToRemove {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"depends\":"
		out.RawString(prefix)
		if in.Depends == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Depends {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"enable_history\":"
		out.RawString(prefix)
		if in.EnableHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.EnableHistory {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Raw((v39).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"measurements\":"
		out.RawString(prefix)
		if m, ok := in.Measurements.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Measurements.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Measurements))
		}
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"infos\":"
		out.RawString(prefix)
		if in.Infos == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v40First := true
			for v40Name, v40Value := range in.Infos {
				if v40First {
					v40First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v40Name))
				out.RawByte(':')
				easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, v40Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.ComponentInfos) != 0 {
		const prefix string = ",\"component_infos\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v41First := true
			for v41Name, v41Value := range in.ComponentInfos {
				if v41First {
					v41First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v41Name))
				out.RawByte(':')
				easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, v41Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.Component != "" {
		const prefix string = ",\"component\":"
		out.RawString(prefix)
		out.String(string(in.Component))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"impact_level\":"
		out.RawString(prefix)
		out.Int64(int64(in.ImpactLevel))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	if in.LastEventDate != nil {
		const prefix string = ",\"last_event_date\":"
		out.RawString(prefix)
		out.Raw((*in.LastEventDate).MarshalJSON())
	}
	if in.LastIdleRuleApply != "" {
		const prefix string = ",\"last_idle_rule_apply\":"
		out.RawString(prefix)
		out.String(string(in.LastIdleRuleApply))
	}
	if in.IdleSince != nil {
		const prefix string = ",\"idle_since\":"
		out.RawString(prefix)
		out.Raw((*in.IdleSince).MarshalJSON())
	}
	{
		const prefix string = ",\"import_source\":"
		out.RawString(prefix)
		out.String(string(in.ImportSource))
	}
	{
		const prefix string = ",\"imported\":"
		out.RawString(prefix)
		if in.Imported == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Imported).MarshalJSON())
		}
	}
	if true {
		const prefix string = ",\"pbehavior_info\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(out, in.PbehaviorInfo)
	}
	{
		const prefix string = ",\"sli_avail_state\":"
		out.RawString(prefix)
		out.Int64(int64(in.SliAvailState))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes2(in *jlexer.Lexer, out *Alarm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		case "t":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "d":
			out.EntityID = string(in.String())
		case "v":
			easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes7(in, &out.Value)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes2(out *jwriter.Writer, in Alarm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		out.String(string(in.EntityID))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes7(out, in.Value)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes7(in *jlexer.Lexer, out *AlarmValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ack":
			if in.IsNull() {
				in.Skip()
				out.ACK = nil
			} else {
				if out.ACK == nil {
					out.ACK = new(AlarmStep)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(in, out.ACK)
			}
		case "canceled":
			if in.IsNull() {
				in.Skip()
				out.Canceled = nil
			} else {
				if out.Canceled == nil {
					out.Canceled = new(AlarmStep)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(in, out.Canceled)
			}
		case "done":
			if in.IsNull() {
				in.Skip()
				out.Done = nil
			} else {
				if out.Done == nil {
					out.Done = new(AlarmStep)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(in, out.Done)
			}
		case "snooze":
			if in.IsNull() {
				in.Skip()
				out.Snooze = nil
			} else {
				if out.Snooze == nil {
					out.Snooze = new(AlarmStep)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(in, out.Snooze)
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(AlarmStep)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(in, out.State)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(AlarmStep)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(in, out.Status)
			}
		case "ticket":
			if in.IsNull() {
				in.Skip()
				out.Ticket = nil
			} else {
				if out.Ticket == nil {
					out.Ticket = new(AlarmTicket)
				}
				easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes9(in, out.Ticket)
			}
		case "steps":
			if in.IsNull() {
				in.Skip()
				out.Steps = nil
			} else {
				in.Delim('[')
				if out.Steps == nil {
					if !in.IsDelim(']') {
						out.Steps = make(AlarmSteps, 0, 0)
					} else {
						out.Steps = AlarmSteps{}
					}
				} else {
					out.Steps = (out.Steps)[:0]
				}
				for !in.IsDelim(']') {
					var v42 AlarmStep
					easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(in, &v42)
					out.Steps = append(out.Steps, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "component":
			out.Component = string(in.String())
		case "connector":
			out.Connector = string(in.String())
		case "connector_name":
			out.ConnectorName = string(in.String())
		case "creation_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationDate).UnmarshalJSON(data))
			}
		case "activation_date":
			if in.IsNull() {
				in.Skip()
				out.ActivationDate = nil
			} else {
				if out.ActivationDate == nil {
					out.ActivationDate = new(CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ActivationDate).UnmarshalJSON(data))
				}
			}
		case "display_name":
			out.DisplayName = string(in.String())
		case "hard_limit":
			if in.IsNull() {
				in.Skip()
				out.HardLimit = nil
			} else {
				if out.HardLimit == nil {
					out.HardLimit = new(CpsNumber)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.HardLimit).UnmarshalJSON(data))
				}
			}
		case "initial_output":
			out.InitialOutput = string(in.String())
		case "output":
			out.Output = string(in.String())
		case "initial_long_output":
			out.InitialLongOutput = string(in.String())
		case "long_output":
			out.LongOutput = string(in.String())
		case "long_output_history":
			if in.IsNull() {
				in.Skip()
				out.LongOutputHistory = nil
			} else {
				in.Delim('[')
				if out.LongOutputHistory == nil {
					if !in.IsDelim(']') {
						out.LongOutputHistory = make([]string, 0, 4)
					} else {
						out.LongOutputHistory = []string{}
					}
				} else {
					out.LongOutputHistory = (out.LongOutputHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.LongOutputHistory = append(out.LongOutputHistory, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_update_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastUpdateDate).UnmarshalJSON(data))
			}
		case "last_event_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastEventDate).UnmarshalJSON(data))
			}
		case "resource":
			out.Resource = string(in.String())
		case "resolved":
			if in.IsNull() {
				in.Skip()
				out.Resolved = nil
			} else {
				if out.Resolved == nil {
					out.Resolved = new(CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Resolved).UnmarshalJSON(data))
				}
			}
		case "pbehavior_info":
			easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(in, &out.PbehaviorInfo)
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v44 string
					v44 = string(in.String())
					out.Tags = append(out.Tags, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			out.Meta = string(in.String())
		case "meta_value_path":
			out.MetaValuePath = string(in.String())
		case "parents":
			if in.IsNull() {
				in.Skip()
				out.Parents = nil
			} else {
				in.Delim('[')
				if out.Parents == nil {
					if !in.IsDelim(']') {
						out.Parents = make([]string, 0, 4)
					} else {
						out.Parents = []string{}
					}
				} else {
					out.Parents = (out.Parents)[:0]
				}
				for !in.IsDelim(']') {
					var v45 string
					v45 = string(in.String())
					out.Parents = append(out.Parents, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]string, 0, 4)
					} else {
						out.Children = []string{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.Children = append(out.Children, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state_changes_since_status_update":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StateChangesSinceStatusUpdate).UnmarshalJSON(data))
			}
		case "total_state_changes":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TotalStateChanges).UnmarshalJSON(data))
			}
		case "events_count":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EventsCount).UnmarshalJSON(data))
			}
		case "infos":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Infos = make(map[string]map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v47 map[string]interface{}
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v47 = make(map[string]interface{})
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v48 interface{}
							if m, ok := v48.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v48.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v48 = in.Interface()
							}
							(v47)[key] = v48
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Infos)[key] = v47
					in.WantComma()
				}
				in.Delim('}')
			}
		case "RuleVersion":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.RuleVersion = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v49 string
					v49 = string(in.String())
					(out.RuleVersion)[key] = v49
					in.WantComma()
				}
				in.Delim('}')
			}
		case "snooze_duration":
			out.SnoozeDuration = int64(in.Int64())
		case "pbh_inactive_duration":
			out.PbehaviorInactiveDuration = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes7(out *jwriter.Writer, in AlarmValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ACK != nil {
		const prefix string = ",\"ack\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(out, *in.ACK)
	}
	if in.Canceled != nil {
		const prefix string = ",\"canceled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(out, *in.Canceled)
	}
	if in.Done != nil {
		const prefix string = ",\"done\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(out, *in.Done)
	}
	if in.Snooze != nil {
		const prefix string = ",\"snooze\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(out, *in.Snooze)
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(out, *in.State)
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(out, *in.Status)
	}
	if in.Ticket != nil {
		const prefix string = ",\"ticket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes9(out, *in.Ticket)
	}
	{
		const prefix string = ",\"steps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Steps == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Steps {
				if v50 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(out, v51)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"component\":"
		out.RawString(prefix)
		out.String(string(in.Component))
	}
	{
		const prefix string = ",\"connector\":"
		out.RawString(prefix)
		out.String(string(in.Connector))
	}
	{
		const prefix string = ",\"connector_name\":"
		out.RawString(prefix)
		out.String(string(in.ConnectorName))
	}
	{
		const prefix string = ",\"creation_date\":"
		out.RawString(prefix)
		out.Raw((in.CreationDate).MarshalJSON())
	}
	if in.ActivationDate != nil {
		const prefix string = ",\"activation_date\":"
		out.RawString(prefix)
		out.Raw((*in.ActivationDate).MarshalJSON())
	}
	{
		const prefix string = ",\"display_name\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	if in.HardLimit != nil {
		const prefix string = ",\"hard_limit\":"
		out.RawString(prefix)
		out.Raw((*in.HardLimit).MarshalJSON())
	}
	{
		const prefix string = ",\"initial_output\":"
		out.RawString(prefix)
		out.String(string(in.InitialOutput))
	}
	{
		const prefix string = ",\"output\":"
		out.RawString(prefix)
		out.String(string(in.Output))
	}
	{
		const prefix string = ",\"initial_long_output\":"
		out.RawString(prefix)
		out.String(string(in.InitialLongOutput))
	}
	{
		const prefix string = ",\"long_output\":"
		out.RawString(prefix)
		out.String(string(in.LongOutput))
	}
	{
		const prefix string = ",\"long_output_history\":"
		out.RawString(prefix)
		if in.LongOutputHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.LongOutputHistory {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.String(string(v53))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_update_date\":"
		out.RawString(prefix)
		out.Raw((in.LastUpdateDate).MarshalJSON())
	}
	{
		const prefix string = ",\"last_event_date\":"
		out.RawString(prefix)
		out.Raw((in.LastEventDate).MarshalJSON())
	}
	if in.Resource != "" {
		const prefix string = ",\"resource\":"
		out.RawString(prefix)
		out.String(string(in.Resource))
	}
	if in.Resolved != nil {
		const prefix string = ",\"resolved\":"
		out.RawString(prefix)
		out.Raw((*in.Resolved).MarshalJSON())
	}
	if true {
		const prefix string = ",\"pbehavior_info\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(out, in.PbehaviorInfo)
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v54, v55 := range in.Tags {
				if v54 > 0 {
					out.RawByte(',')
				}
				out.String(string(v55))
			}
			out.RawByte(']')
		}
	}
	if in.Meta != "" {
		const prefix string = ",\"meta\":"
		out.RawString(prefix)
		out.String(string(in.Meta))
	}
	if in.MetaValuePath != "" {
		const prefix string = ",\"meta_value_path\":"
		out.RawString(prefix)
		out.String(string(in.MetaValuePath))
	}
	{
		const prefix string = ",\"parents\":"
		out.RawString(prefix)
		if in.Parents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Parents {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		if in.Children == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.Children {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	if in.StateChangesSinceStatusUpdate != 0 {
		const prefix string = ",\"state_changes_since_status_update\":"
		out.RawString(prefix)
		out.Raw((in.StateChangesSinceStatusUpdate).MarshalJSON())
	}
	if in.TotalStateChanges != 0 {
		const prefix string = ",\"total_state_changes\":"
		out.RawString(prefix)
		out.Raw((in.TotalStateChanges).MarshalJSON())
	}
	if in.EventsCount != 0 {
		const prefix string = ",\"events_count\":"
		out.RawString(prefix)
		out.Raw((in.EventsCount).MarshalJSON())
	}
	{
		const prefix string = ",\"infos\":"
		out.RawString(prefix)
		if in.Infos == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v60First := true
			for v60Name, v60Value := range in.Infos {
				if v60First {
					v60First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v60Name))
				out.RawByte(':')
				if v60Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v61First := true
					for v61Name, v61Value := range v60Value {
						if v61First {
							v61First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v61Name))
						out.RawByte(':')
						if m, ok := v61Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v61Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v61Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"RuleVersion\":"
		out.RawString(prefix)
		if in.RuleVersion == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v62First := true
			for v62Name, v62Value := range in.RuleVersion {
				if v62First {
					v62First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v62Name))
				out.RawByte(':')
				out.String(string(v62Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"snooze_duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.SnoozeDuration))
	}
	{
		const prefix string = ",\"pbh_inactive_duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.PbehaviorInactiveDuration))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes9(in *jlexer.Lexer, out *AlarmTicket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_t":
			out.Type = string(in.String())
		case "t":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "a":
			out.Author = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "m":
			out.Message = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "val":
			out.Value = string(in.String())
		case "Data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Data = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v63 string
					v63 = string(in.String())
					(out.Data)[key] = v63
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes9(out *jwriter.Writer, in AlarmTicket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_t\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"val\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v64First := true
			for v64Name, v64Value := range in.Data {
				if v64First {
					v64First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v64Name))
				out.RawByte(':')
				out.String(string(v64Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(in *jlexer.Lexer, out *AlarmStep) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_t":
			out.Type = string(in.String())
		case "t":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "a":
			out.Author = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "m":
			out.Message = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "val":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Value).UnmarshalJSON(data))
			}
		case "statecounter":
			easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes10(in, &out.StateCounter)
		case "pbehavior_canonical_type":
			out.PbehaviorCanonicalType = string(in.String())
		case "initiator":
			out.Initiator = string(in.String())
		case "exec":
			out.Execution = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes8(out *jwriter.Writer, in AlarmStep) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_t\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"val\":"
		out.RawString(prefix)
		out.Raw((in.Value).MarshalJSON())
	}
	if true {
		const prefix string = ",\"statecounter\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes10(out, in.StateCounter)
	}
	if in.PbehaviorCanonicalType != "" {
		const prefix string = ",\"pbehavior_canonical_type\":"
		out.RawString(prefix)
		out.String(string(in.PbehaviorCanonicalType))
	}
	if in.Initiator != "" {
		const prefix string = ",\"initiator\":"
		out.RawString(prefix)
		out.String(string(in.Initiator))
	}
	if in.Execution != "" {
		const prefix string = ",\"exec\":"
		out.RawString(prefix)
		out.String(string(in.Execution))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes10(in *jlexer.Lexer, out *CropCounter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statechanges":
			out.StateChanges = int(in.Int())
		case "stateinc":
			out.Stateinc = int(in.Int())
		case "statedec":
			out.Statedec = int(in.Int())
		case "state:0":
			out.StateInfo = int(in.Int())
		case "state:1":
			out.StateMinor = int(in.Int())
		case "state:2":
			out.StateMajor = int(in.Int())
		case "state:3":
			out.StateCritical = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes10(out *jwriter.Writer, in CropCounter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statechanges\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StateChanges))
	}
	{
		const prefix string = ",\"stateinc\":"
		out.RawString(prefix)
		out.Int(int(in.Stateinc))
	}
	{
		const prefix string = ",\"statedec\":"
		out.RawString(prefix)
		out.Int(int(in.Statedec))
	}
	if in.StateInfo != 0 {
		const prefix string = ",\"state:0\":"
		out.RawString(prefix)
		out.Int(int(in.StateInfo))
	}
	if in.StateMinor != 0 {
		const prefix string = ",\"state:1\":"
		out.RawString(prefix)
		out.Int(int(in.StateMinor))
	}
	if in.StateMajor != 0 {
		const prefix string = ",\"state:2\":"
		out.RawString(prefix)
		out.Int(int(in.StateMajor))
	}
	if in.StateCritical != 0 {
		const prefix string = ",\"state:3\":"
		out.RawString(prefix)
		out.Int(int(in.StateCritical))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(in *jlexer.Lexer, out *PerfData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric":
			out.Metric = string(in.String())
		case "unit":
			out.Unit = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(out *jwriter.Writer, in PerfData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metric\":"
		out.RawString(prefix[1:])
		out.String(string(in.Metric))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}
