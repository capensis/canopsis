// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package rpc

import (
	json "encoding/json"
	datetime "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/datetime"
	types "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/types"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc(in *jlexer.Lexer, out *WebhookEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "execution":
			out.Execution = string(in.String())
		case "healthcheck":
			out.Healthcheck = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc(out *jwriter.Writer, in WebhookEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"execution\":"
		out.RawString(prefix[1:])
		out.String(string(in.Execution))
	}
	{
		const prefix string = ",\"healthcheck\":"
		out.RawString(prefix)
		out.Bool(bool(in.Healthcheck))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebhookEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebhookEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc1(in *jlexer.Lexer, out *RemediationJobEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "job_execution_id":
			out.JobExecutionID = string(in.String())
		case "step":
			out.Step = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc1(out *jwriter.Writer, in RemediationJobEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"job_execution_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.JobExecutionID))
	}
	{
		const prefix string = ",\"step\":"
		out.RawString(prefix)
		out.Int(int(in.Step))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemediationJobEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemediationJobEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc1(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc2(in *jlexer.Lexer, out *RemediationEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alarm":
			if in.IsNull() {
				in.Skip()
				out.Alarm = nil
			} else {
				if out.Alarm == nil {
					out.Alarm = new(types.Alarm)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(in, out.Alarm)
			}
		case "entity":
			if in.IsNull() {
				in.Skip()
				out.Entity = nil
			} else {
				if out.Entity == nil {
					out.Entity = new(types.Entity)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(in, out.Entity)
			}
		case "alarm_change":
			easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes2(in, &out.AlarmChange)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc2(out *jwriter.Writer, in RemediationEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alarm\":"
		out.RawString(prefix[1:])
		if in.Alarm == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(out, *in.Alarm)
		}
	}
	{
		const prefix string = ",\"entity\":"
		out.RawString(prefix)
		if in.Entity == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(out, *in.Entity)
		}
	}
	{
		const prefix string = ",\"alarm_change\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes2(out, in.AlarmChange)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemediationEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemediationEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc2(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes2(in *jlexer.Lexer, out *types.AlarmChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = types.AlarmChangeType(in.String())
		case "PreviousState":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousState).UnmarshalJSON(data))
			}
		case "PreviousStateChange":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousStateChange).UnmarshalJSON(data))
			}
		case "PreviousStatus":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousStatus).UnmarshalJSON(data))
			}
		case "PreviousStatusChange":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreviousStatusChange).UnmarshalJSON(data))
			}
		case "PreviousPbehaviorTime":
			if in.IsNull() {
				in.Skip()
				out.PreviousPbehaviorTime = nil
			} else {
				if out.PreviousPbehaviorTime == nil {
					out.PreviousPbehaviorTime = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PreviousPbehaviorTime).UnmarshalJSON(data))
				}
			}
		case "PreviousEntityPbehaviorTime":
			if in.IsNull() {
				in.Skip()
				out.PreviousEntityPbehaviorTime = nil
			} else {
				if out.PreviousEntityPbehaviorTime == nil {
					out.PreviousEntityPbehaviorTime = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PreviousEntityPbehaviorTime).UnmarshalJSON(data))
				}
			}
		case "PreviousPbehaviorTypeID":
			out.PreviousPbehaviorTypeID = string(in.String())
		case "PreviousPbehaviorCannonicalType":
			out.PreviousPbehaviorCannonicalType = string(in.String())
		case "EventsCount":
			out.EventsCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes2(out *jwriter.Writer, in types.AlarmChange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"PreviousState\":"
		out.RawString(prefix)
		out.Raw((in.PreviousState).MarshalJSON())
	}
	{
		const prefix string = ",\"PreviousStateChange\":"
		out.RawString(prefix)
		out.Raw((in.PreviousStateChange).MarshalJSON())
	}
	{
		const prefix string = ",\"PreviousStatus\":"
		out.RawString(prefix)
		out.Raw((in.PreviousStatus).MarshalJSON())
	}
	{
		const prefix string = ",\"PreviousStatusChange\":"
		out.RawString(prefix)
		out.Raw((in.PreviousStatusChange).MarshalJSON())
	}
	{
		const prefix string = ",\"PreviousPbehaviorTime\":"
		out.RawString(prefix)
		if in.PreviousPbehaviorTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PreviousPbehaviorTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"PreviousEntityPbehaviorTime\":"
		out.RawString(prefix)
		if in.PreviousEntityPbehaviorTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PreviousEntityPbehaviorTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"PreviousPbehaviorTypeID\":"
		out.RawString(prefix)
		out.String(string(in.PreviousPbehaviorTypeID))
	}
	{
		const prefix string = ",\"PreviousPbehaviorCannonicalType\":"
		out.RawString(prefix)
		out.String(string(in.PreviousPbehaviorCannonicalType))
	}
	{
		const prefix string = ",\"EventsCount\":"
		out.RawString(prefix)
		out.Int(int(in.EventsCount))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(in *jlexer.Lexer, out *types.Entity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "enable_history":
			if in.IsNull() {
				in.Skip()
				out.EnableHistory = nil
			} else {
				in.Delim('[')
				if out.EnableHistory == nil {
					if !in.IsDelim(']') {
						out.EnableHistory = make([]datetime.CpsTime, 0, 2)
					} else {
						out.EnableHistory = []datetime.CpsTime{}
					}
				} else {
					out.EnableHistory = (out.EnableHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v1 datetime.CpsTime
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.EnableHistory = append(out.EnableHistory, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "measurements":
			if m, ok := out.Measurements.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Measurements.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Measurements = in.Interface()
			}
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "infos":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Infos = make(map[string]types.Info)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 types.Info
					easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(in, &v2)
					(out.Infos)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "component_infos":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ComponentInfos = make(map[string]types.Info)
				} else {
					out.ComponentInfos = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 types.Info
					easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(in, &v3)
					(out.ComponentInfos)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "type":
			out.Type = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "impact_level":
			out.ImpactLevel = int64(in.Int64())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "last_event_date":
			if in.IsNull() {
				in.Skip()
				out.LastEventDate = nil
			} else {
				if out.LastEventDate == nil {
					out.LastEventDate = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastEventDate).UnmarshalJSON(data))
				}
			}
		case "connector":
			out.Connector = string(in.String())
		case "component":
			out.Component = string(in.String())
		case "services":
			if in.IsNull() {
				in.Skip()
				out.Services = nil
			} else {
				in.Delim('[')
				if out.Services == nil {
					if !in.IsDelim(']') {
						out.Services = make([]string, 0, 4)
					} else {
						out.Services = []string{}
					}
				} else {
					out.Services = (out.Services)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Services = append(out.Services, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_idle_rule_apply":
			out.LastIdleRuleApply = string(in.String())
		case "idle_since":
			if in.IsNull() {
				in.Skip()
				out.IdleSince = nil
			} else {
				if out.IdleSince == nil {
					out.IdleSince = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IdleSince).UnmarshalJSON(data))
				}
			}
		case "import_source":
			out.ImportSource = string(in.String())
		case "imported":
			if in.IsNull() {
				in.Skip()
				out.Imported = nil
			} else {
				if out.Imported == nil {
					out.Imported = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Imported).UnmarshalJSON(data))
				}
			}
		case "pbehavior_info":
			easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(in, &out.PbehaviorInfo)
		case "last_pbehavior_date":
			if in.IsNull() {
				in.Skip()
				out.LastPbehaviorDate = nil
			} else {
				if out.LastPbehaviorDate == nil {
					out.LastPbehaviorDate = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastPbehaviorDate).UnmarshalJSON(data))
				}
			}
		case "sli_avail_state":
			out.SliAvailState = int64(in.Int64())
		case "services_to_add":
			if in.IsNull() {
				in.Skip()
				out.ServicesToAdd = nil
			} else {
				in.Delim('[')
				if out.ServicesToAdd == nil {
					if !in.IsDelim(']') {
						out.ServicesToAdd = make([]string, 0, 4)
					} else {
						out.ServicesToAdd = []string{}
					}
				} else {
					out.ServicesToAdd = (out.ServicesToAdd)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.ServicesToAdd = append(out.ServicesToAdd, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "services_to_remove":
			if in.IsNull() {
				in.Skip()
				out.ServicesToRemove = nil
			} else {
				in.Delim('[')
				if out.ServicesToRemove == nil {
					if !in.IsDelim(']') {
						out.ServicesToRemove = make([]string, 0, 4)
					} else {
						out.ServicesToRemove = []string{}
					}
				} else {
					out.ServicesToRemove = (out.ServicesToRemove)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.ServicesToRemove = append(out.ServicesToRemove, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "soft_deleted":
			if in.IsNull() {
				in.Skip()
				out.SoftDeleted = nil
			} else {
				if out.SoftDeleted == nil {
					out.SoftDeleted = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SoftDeleted).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(out *jwriter.Writer, in types.Entity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"enable_history\":"
		out.RawString(prefix)
		if in.EnableHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.EnableHistory {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.Raw((v8).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"measurements\":"
		out.RawString(prefix)
		if m, ok := in.Measurements.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Measurements.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Measurements))
		}
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"infos\":"
		out.RawString(prefix)
		if in.Infos == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Infos {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(out, v9Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.ComponentInfos) != 0 {
		const prefix string = ",\"component_infos\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.ComponentInfos {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(out, v10Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"impact_level\":"
		out.RawString(prefix)
		out.Int64(int64(in.ImpactLevel))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	if in.LastEventDate != nil {
		const prefix string = ",\"last_event_date\":"
		out.RawString(prefix)
		out.Raw((*in.LastEventDate).MarshalJSON())
	}
	if in.Connector != "" {
		const prefix string = ",\"connector\":"
		out.RawString(prefix)
		out.String(string(in.Connector))
	}
	if in.Component != "" {
		const prefix string = ",\"component\":"
		out.RawString(prefix)
		out.String(string(in.Component))
	}
	if len(in.Services) != 0 {
		const prefix string = ",\"services\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Services {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.LastIdleRuleApply != "" {
		const prefix string = ",\"last_idle_rule_apply\":"
		out.RawString(prefix)
		out.String(string(in.LastIdleRuleApply))
	}
	if in.IdleSince != nil {
		const prefix string = ",\"idle_since\":"
		out.RawString(prefix)
		out.Raw((*in.IdleSince).MarshalJSON())
	}
	{
		const prefix string = ",\"import_source\":"
		out.RawString(prefix)
		out.String(string(in.ImportSource))
	}
	{
		const prefix string = ",\"imported\":"
		out.RawString(prefix)
		if in.Imported == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Imported).MarshalJSON())
		}
	}
	if true {
		const prefix string = ",\"pbehavior_info\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(out, in.PbehaviorInfo)
	}
	if in.LastPbehaviorDate != nil {
		const prefix string = ",\"last_pbehavior_date\":"
		out.RawString(prefix)
		out.Raw((*in.LastPbehaviorDate).MarshalJSON())
	}
	{
		const prefix string = ",\"sli_avail_state\":"
		out.RawString(prefix)
		out.Int64(int64(in.SliAvailState))
	}
	if len(in.ServicesToAdd) != 0 {
		const prefix string = ",\"services_to_add\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v13, v14 := range in.ServicesToAdd {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.ServicesToRemove) != 0 {
		const prefix string = ",\"services_to_remove\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.ServicesToRemove {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if in.SoftDeleted != nil {
		const prefix string = ",\"soft_deleted\":"
		out.RawString(prefix)
		out.Raw((*in.SoftDeleted).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(in *jlexer.Lexer, out *types.PbehaviorInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Timestamp).UnmarshalJSON(data))
				}
			}
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "reason_name":
			out.ReasonName = string(in.String())
		case "reason":
			out.ReasonID = string(in.String())
		case "type":
			out.TypeID = string(in.String())
		case "type_name":
			out.TypeName = string(in.String())
		case "canonical_type":
			out.CanonicalType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(out *jwriter.Writer, in types.PbehaviorInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		if in.Timestamp == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Timestamp).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"reason_name\":"
		out.RawString(prefix)
		out.String(string(in.ReasonName))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.ReasonID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.TypeID))
	}
	{
		const prefix string = ",\"type_name\":"
		out.RawString(prefix)
		out.String(string(in.TypeName))
	}
	{
		const prefix string = ",\"canonical_type\":"
		out.RawString(prefix)
		out.String(string(in.CanonicalType))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(in *jlexer.Lexer, out *types.Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes3(out *jwriter.Writer, in types.Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(in *jlexer.Lexer, out *types.Alarm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		case "t":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "d":
			out.EntityID = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.Tags = append(out.Tags, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "etags":
			if in.IsNull() {
				in.Skip()
				out.ExternalTags = nil
			} else {
				in.Delim('[')
				if out.ExternalTags == nil {
					if !in.IsDelim(']') {
						out.ExternalTags = make([]string, 0, 4)
					} else {
						out.ExternalTags = []string{}
					}
				} else {
					out.ExternalTags = (out.ExternalTags)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.ExternalTags = append(out.ExternalTags, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "itags":
			if in.IsNull() {
				in.Skip()
				out.InternalTags = nil
			} else {
				in.Delim('[')
				if out.InternalTags == nil {
					if !in.IsDelim(']') {
						out.InternalTags = make([]string, 0, 4)
					} else {
						out.InternalTags = []string{}
					}
				} else {
					out.InternalTags = (out.InternalTags)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.InternalTags = append(out.InternalTags, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "itags_upd":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.InternalTagsUpdated).UnmarshalJSON(data))
			}
		case "v":
			easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(in, &out.Value)
		case "kpi_assigned_instructions":
			if in.IsNull() {
				in.Skip()
				out.KpiAssignedInstructions = nil
			} else {
				in.Delim('[')
				if out.KpiAssignedInstructions == nil {
					if !in.IsDelim(']') {
						out.KpiAssignedInstructions = make([]string, 0, 4)
					} else {
						out.KpiAssignedInstructions = []string{}
					}
				} else {
					out.KpiAssignedInstructions = (out.KpiAssignedInstructions)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.KpiAssignedInstructions = append(out.KpiAssignedInstructions, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "kpi_executed_instructions":
			if in.IsNull() {
				in.Skip()
				out.KpiExecutedInstructions = nil
			} else {
				in.Delim('[')
				if out.KpiExecutedInstructions == nil {
					if !in.IsDelim(']') {
						out.KpiExecutedInstructions = make([]string, 0, 4)
					} else {
						out.KpiExecutedInstructions = []string{}
					}
				} else {
					out.KpiExecutedInstructions = (out.KpiExecutedInstructions)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.KpiExecutedInstructions = append(out.KpiExecutedInstructions, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "kpi_assigned_auto_instructions":
			if in.IsNull() {
				in.Skip()
				out.KpiAssignedAutoInstructions = nil
			} else {
				in.Delim('[')
				if out.KpiAssignedAutoInstructions == nil {
					if !in.IsDelim(']') {
						out.KpiAssignedAutoInstructions = make([]string, 0, 4)
					} else {
						out.KpiAssignedAutoInstructions = []string{}
					}
				} else {
					out.KpiAssignedAutoInstructions = (out.KpiAssignedAutoInstructions)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.KpiAssignedAutoInstructions = append(out.KpiAssignedAutoInstructions, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "kpi_executed_auto_instructions":
			if in.IsNull() {
				in.Skip()
				out.KpiExecutedAutoInstructions = nil
			} else {
				in.Delim('[')
				if out.KpiExecutedAutoInstructions == nil {
					if !in.IsDelim(']') {
						out.KpiExecutedAutoInstructions = make([]string, 0, 4)
					} else {
						out.KpiExecutedAutoInstructions = []string{}
					}
				} else {
					out.KpiExecutedAutoInstructions = (out.KpiExecutedAutoInstructions)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.KpiExecutedAutoInstructions = append(out.KpiExecutedAutoInstructions, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "auto_instruction_in_progress":
			out.InactiveAutoInstructionInProgress = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(out *jwriter.Writer, in types.Alarm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		out.String(string(in.EntityID))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Tags {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"etags\":"
		out.RawString(prefix)
		if in.ExternalTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.ExternalTags {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"itags\":"
		out.RawString(prefix)
		if in.InternalTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.InternalTags {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"itags_upd\":"
		out.RawString(prefix)
		out.Raw((in.InternalTagsUpdated).MarshalJSON())
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(out, in.Value)
	}
	if len(in.KpiAssignedInstructions) != 0 {
		const prefix string = ",\"kpi_assigned_instructions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v30, v31 := range in.KpiAssignedInstructions {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.KpiExecutedInstructions) != 0 {
		const prefix string = ",\"kpi_executed_instructions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.KpiExecutedInstructions {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if len(in.KpiAssignedAutoInstructions) != 0 {
		const prefix string = ",\"kpi_assigned_auto_instructions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v34, v35 := range in.KpiAssignedAutoInstructions {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	if len(in.KpiExecutedAutoInstructions) != 0 {
		const prefix string = ",\"kpi_executed_auto_instructions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v36, v37 := range in.KpiExecutedAutoInstructions {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	if in.InactiveAutoInstructionInProgress {
		const prefix string = ",\"auto_instruction_in_progress\":"
		out.RawString(prefix)
		out.Bool(bool(in.InactiveAutoInstructionInProgress))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(in *jlexer.Lexer, out *types.AlarmValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ack":
			if in.IsNull() {
				in.Skip()
				out.ACK = nil
			} else {
				if out.ACK == nil {
					out.ACK = new(types.AlarmStep)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, out.ACK)
			}
		case "canceled":
			if in.IsNull() {
				in.Skip()
				out.Canceled = nil
			} else {
				if out.Canceled == nil {
					out.Canceled = new(types.AlarmStep)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, out.Canceled)
			}
		case "snooze":
			if in.IsNull() {
				in.Skip()
				out.Snooze = nil
			} else {
				if out.Snooze == nil {
					out.Snooze = new(types.AlarmStep)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, out.Snooze)
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(types.AlarmStep)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, out.State)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(types.AlarmStep)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, out.Status)
			}
		case "last_comment":
			if in.IsNull() {
				in.Skip()
				out.LastComment = nil
			} else {
				if out.LastComment == nil {
					out.LastComment = new(types.AlarmStep)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, out.LastComment)
			}
		case "tickets":
			if in.IsNull() {
				in.Skip()
				out.Tickets = nil
			} else {
				in.Delim('[')
				if out.Tickets == nil {
					if !in.IsDelim(']') {
						out.Tickets = make([]types.AlarmStep, 0, 0)
					} else {
						out.Tickets = []types.AlarmStep{}
					}
				} else {
					out.Tickets = (out.Tickets)[:0]
				}
				for !in.IsDelim(']') {
					var v38 types.AlarmStep
					easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, &v38)
					out.Tickets = append(out.Tickets, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ticket":
			if in.IsNull() {
				in.Skip()
				out.Ticket = nil
			} else {
				if out.Ticket == nil {
					out.Ticket = new(types.AlarmStep)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, out.Ticket)
			}
		case "steps":
			if in.IsNull() {
				in.Skip()
				out.Steps = nil
			} else {
				in.Delim('[')
				if out.Steps == nil {
					if !in.IsDelim(']') {
						out.Steps = make(types.AlarmSteps, 0, 0)
					} else {
						out.Steps = types.AlarmSteps{}
					}
				} else {
					out.Steps = (out.Steps)[:0]
				}
				for !in.IsDelim(']') {
					var v39 types.AlarmStep
					easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in, &v39)
					out.Steps = append(out.Steps, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "component":
			out.Component = string(in.String())
		case "connector":
			out.Connector = string(in.String())
		case "connector_name":
			out.ConnectorName = string(in.String())
		case "creation_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationDate).UnmarshalJSON(data))
			}
		case "activation_date":
			if in.IsNull() {
				in.Skip()
				out.ActivationDate = nil
			} else {
				if out.ActivationDate == nil {
					out.ActivationDate = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ActivationDate).UnmarshalJSON(data))
				}
			}
		case "display_name":
			out.DisplayName = string(in.String())
		case "hard_limit":
			if in.IsNull() {
				in.Skip()
				out.HardLimit = nil
			} else {
				if out.HardLimit == nil {
					out.HardLimit = new(types.CpsNumber)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.HardLimit).UnmarshalJSON(data))
				}
			}
		case "initial_output":
			out.InitialOutput = string(in.String())
		case "output":
			out.Output = string(in.String())
		case "initial_long_output":
			out.InitialLongOutput = string(in.String())
		case "long_output":
			out.LongOutput = string(in.String())
		case "long_output_history":
			if in.IsNull() {
				in.Skip()
				out.LongOutputHistory = nil
			} else {
				in.Delim('[')
				if out.LongOutputHistory == nil {
					if !in.IsDelim(']') {
						out.LongOutputHistory = make([]string, 0, 4)
					} else {
						out.LongOutputHistory = []string{}
					}
				} else {
					out.LongOutputHistory = (out.LongOutputHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.LongOutputHistory = append(out.LongOutputHistory, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_update_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastUpdateDate).UnmarshalJSON(data))
			}
		case "last_event_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastEventDate).UnmarshalJSON(data))
			}
		case "resource":
			out.Resource = string(in.String())
		case "resolved":
			if in.IsNull() {
				in.Skip()
				out.Resolved = nil
			} else {
				if out.Resolved == nil {
					out.Resolved = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Resolved).UnmarshalJSON(data))
				}
			}
		case "pbehavior_info":
			easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(in, &out.PbehaviorInfo)
		case "meta":
			out.Meta = string(in.String())
		case "meta_value_path":
			out.MetaValuePath = string(in.String())
		case "parents":
			if in.IsNull() {
				in.Skip()
				out.Parents = nil
			} else {
				in.Delim('[')
				if out.Parents == nil {
					if !in.IsDelim(']') {
						out.Parents = make([]string, 0, 4)
					} else {
						out.Parents = []string{}
					}
				} else {
					out.Parents = (out.Parents)[:0]
				}
				for !in.IsDelim(']') {
					var v41 string
					v41 = string(in.String())
					out.Parents = append(out.Parents, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]string, 0, 4)
					} else {
						out.Children = []string{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.Children = append(out.Children, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unlinked_parents":
			if in.IsNull() {
				in.Skip()
				out.UnlinkedParents = nil
			} else {
				in.Delim('[')
				if out.UnlinkedParents == nil {
					if !in.IsDelim(']') {
						out.UnlinkedParents = make([]string, 0, 4)
					} else {
						out.UnlinkedParents = []string{}
					}
				} else {
					out.UnlinkedParents = (out.UnlinkedParents)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.UnlinkedParents = append(out.UnlinkedParents, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state_changes_since_status_update":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StateChangesSinceStatusUpdate).UnmarshalJSON(data))
			}
		case "total_state_changes":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TotalStateChanges).UnmarshalJSON(data))
			}
		case "events_count":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EventsCount).UnmarshalJSON(data))
			}
		case "infos":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Infos = make(map[string]map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v44 map[string]interface{}
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v44 = make(map[string]interface{})
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v45 interface{}
							if m, ok := v45.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v45.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v45 = in.Interface()
							}
							(v44)[key] = v45
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Infos)[key] = v44
					in.WantComma()
				}
				in.Delim('}')
			}
		case "infos_rule_version":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.RuleVersion = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v46 string
					v46 = string(in.String())
					(out.RuleVersion)[key] = v46
					in.WantComma()
				}
				in.Delim('}')
			}
		case "inactive_start":
			if in.IsNull() {
				in.Skip()
				out.InactiveStart = nil
			} else {
				if out.InactiveStart == nil {
					out.InactiveStart = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InactiveStart).UnmarshalJSON(data))
				}
			}
		case "duration":
			out.Duration = int64(in.Int64())
		case "current_state_duration":
			out.CurrentStateDuration = int64(in.Int64())
		case "active_duration":
			out.ActiveDuration = int64(in.Int64())
		case "inactive_duration":
			out.InactiveDuration = int64(in.Int64())
		case "snooze_duration":
			out.SnoozeDuration = int64(in.Int64())
		case "pbh_inactive_duration":
			out.PbehaviorInactiveDuration = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes5(out *jwriter.Writer, in types.AlarmValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ACK != nil {
		const prefix string = ",\"ack\":"
		first = false
		out.RawString(prefix[1:])
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, *in.ACK)
	}
	if in.Canceled != nil {
		const prefix string = ",\"canceled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, *in.Canceled)
	}
	if in.Snooze != nil {
		const prefix string = ",\"snooze\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, *in.Snooze)
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, *in.State)
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, *in.Status)
	}
	if in.LastComment != nil {
		const prefix string = ",\"last_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, *in.LastComment)
	}
	if len(in.Tickets) != 0 {
		const prefix string = ",\"tickets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Tickets {
				if v47 > 0 {
					out.RawByte(',')
				}
				easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, v48)
			}
			out.RawByte(']')
		}
	}
	if in.Ticket != nil {
		const prefix string = ",\"ticket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, *in.Ticket)
	}
	{
		const prefix string = ",\"steps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Steps == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.Steps {
				if v49 > 0 {
					out.RawByte(',')
				}
				easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out, v50)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"component\":"
		out.RawString(prefix)
		out.String(string(in.Component))
	}
	{
		const prefix string = ",\"connector\":"
		out.RawString(prefix)
		out.String(string(in.Connector))
	}
	{
		const prefix string = ",\"connector_name\":"
		out.RawString(prefix)
		out.String(string(in.ConnectorName))
	}
	{
		const prefix string = ",\"creation_date\":"
		out.RawString(prefix)
		out.Raw((in.CreationDate).MarshalJSON())
	}
	if in.ActivationDate != nil {
		const prefix string = ",\"activation_date\":"
		out.RawString(prefix)
		out.Raw((*in.ActivationDate).MarshalJSON())
	}
	{
		const prefix string = ",\"display_name\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	if in.HardLimit != nil {
		const prefix string = ",\"hard_limit\":"
		out.RawString(prefix)
		out.Raw((*in.HardLimit).MarshalJSON())
	}
	{
		const prefix string = ",\"initial_output\":"
		out.RawString(prefix)
		out.String(string(in.InitialOutput))
	}
	{
		const prefix string = ",\"output\":"
		out.RawString(prefix)
		out.String(string(in.Output))
	}
	{
		const prefix string = ",\"initial_long_output\":"
		out.RawString(prefix)
		out.String(string(in.InitialLongOutput))
	}
	{
		const prefix string = ",\"long_output\":"
		out.RawString(prefix)
		out.String(string(in.LongOutput))
	}
	{
		const prefix string = ",\"long_output_history\":"
		out.RawString(prefix)
		if in.LongOutputHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.LongOutputHistory {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.String(string(v52))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_update_date\":"
		out.RawString(prefix)
		out.Raw((in.LastUpdateDate).MarshalJSON())
	}
	{
		const prefix string = ",\"last_event_date\":"
		out.RawString(prefix)
		out.Raw((in.LastEventDate).MarshalJSON())
	}
	if in.Resource != "" {
		const prefix string = ",\"resource\":"
		out.RawString(prefix)
		out.String(string(in.Resource))
	}
	if in.Resolved != nil {
		const prefix string = ",\"resolved\":"
		out.RawString(prefix)
		out.Raw((*in.Resolved).MarshalJSON())
	}
	if true {
		const prefix string = ",\"pbehavior_info\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(out, in.PbehaviorInfo)
	}
	if in.Meta != "" {
		const prefix string = ",\"meta\":"
		out.RawString(prefix)
		out.String(string(in.Meta))
	}
	if in.MetaValuePath != "" {
		const prefix string = ",\"meta_value_path\":"
		out.RawString(prefix)
		out.String(string(in.MetaValuePath))
	}
	{
		const prefix string = ",\"parents\":"
		out.RawString(prefix)
		if in.Parents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Parents {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.String(string(v54))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		if in.Children == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Children {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.String(string(v56))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"unlinked_parents\":"
		out.RawString(prefix)
		if in.UnlinkedParents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v57, v58 := range in.UnlinkedParents {
				if v57 > 0 {
					out.RawByte(',')
				}
				out.String(string(v58))
			}
			out.RawByte(']')
		}
	}
	if in.StateChangesSinceStatusUpdate != 0 {
		const prefix string = ",\"state_changes_since_status_update\":"
		out.RawString(prefix)
		out.Raw((in.StateChangesSinceStatusUpdate).MarshalJSON())
	}
	if in.TotalStateChanges != 0 {
		const prefix string = ",\"total_state_changes\":"
		out.RawString(prefix)
		out.Raw((in.TotalStateChanges).MarshalJSON())
	}
	if in.EventsCount != 0 {
		const prefix string = ",\"events_count\":"
		out.RawString(prefix)
		out.Raw((in.EventsCount).MarshalJSON())
	}
	{
		const prefix string = ",\"infos\":"
		out.RawString(prefix)
		if in.Infos == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v59First := true
			for v59Name, v59Value := range in.Infos {
				if v59First {
					v59First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v59Name))
				out.RawByte(':')
				if v59Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v60First := true
					for v60Name, v60Value := range v59Value {
						if v60First {
							v60First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v60Name))
						out.RawByte(':')
						if m, ok := v60Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v60Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v60Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"infos_rule_version\":"
		out.RawString(prefix)
		if in.RuleVersion == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v61First := true
			for v61Name, v61Value := range in.RuleVersion {
				if v61First {
					v61First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v61Name))
				out.RawByte(':')
				out.String(string(v61Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"inactive_start\":"
		out.RawString(prefix)
		if in.InactiveStart == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.InactiveStart).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.Duration))
	}
	{
		const prefix string = ",\"current_state_duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.CurrentStateDuration))
	}
	{
		const prefix string = ",\"active_duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.ActiveDuration))
	}
	{
		const prefix string = ",\"inactive_duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.InactiveDuration))
	}
	{
		const prefix string = ",\"snooze_duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.SnoozeDuration))
	}
	{
		const prefix string = ",\"pbh_inactive_duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.PbehaviorInactiveDuration))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(in *jlexer.Lexer, out *types.AlarmStep) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_t":
			out.Type = string(in.String())
		case "t":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "a":
			out.Author = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "m":
			out.Message = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "val":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Value).UnmarshalJSON(data))
			}
		case "statecounter":
			easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes7(in, &out.StateCounter)
		case "pbehavior_canonical_type":
			out.PbehaviorCanonicalType = string(in.String())
		case "initiator":
			out.Initiator = string(in.String())
		case "exec":
			out.Execution = string(in.String())
		case "ticket":
			out.Ticket = string(in.String())
		case "ticket_url":
			out.TicketURL = string(in.String())
		case "ticket_comment":
			out.TicketComment = string(in.String())
		case "ticket_system_name":
			out.TicketSystemName = string(in.String())
		case "ticket_meta_alarm_id":
			out.TicketMetaAlarmID = string(in.String())
		case "ticket_rule_id":
			out.TicketRuleID = string(in.String())
		case "ticket_rule_name":
			out.TicketRuleName = string(in.String())
		case "ticket_data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TicketData = make(map[string]string)
				} else {
					out.TicketData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v62 string
					v62 = string(in.String())
					(out.TicketData)[key] = v62
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes6(out *jwriter.Writer, in types.AlarmStep) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_t\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	if in.UserID != "" {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"val\":"
		out.RawString(prefix)
		out.Raw((in.Value).MarshalJSON())
	}
	if true {
		const prefix string = ",\"statecounter\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes7(out, in.StateCounter)
	}
	if in.PbehaviorCanonicalType != "" {
		const prefix string = ",\"pbehavior_canonical_type\":"
		out.RawString(prefix)
		out.String(string(in.PbehaviorCanonicalType))
	}
	if in.Initiator != "" {
		const prefix string = ",\"initiator\":"
		out.RawString(prefix)
		out.String(string(in.Initiator))
	}
	if in.Execution != "" {
		const prefix string = ",\"exec\":"
		out.RawString(prefix)
		out.String(string(in.Execution))
	}
	if in.Ticket != "" {
		const prefix string = ",\"ticket\":"
		out.RawString(prefix)
		out.String(string(in.Ticket))
	}
	if in.TicketURL != "" {
		const prefix string = ",\"ticket_url\":"
		out.RawString(prefix)
		out.String(string(in.TicketURL))
	}
	if in.TicketComment != "" {
		const prefix string = ",\"ticket_comment\":"
		out.RawString(prefix)
		out.String(string(in.TicketComment))
	}
	if in.TicketSystemName != "" {
		const prefix string = ",\"ticket_system_name\":"
		out.RawString(prefix)
		out.String(string(in.TicketSystemName))
	}
	if in.TicketMetaAlarmID != "" {
		const prefix string = ",\"ticket_meta_alarm_id\":"
		out.RawString(prefix)
		out.String(string(in.TicketMetaAlarmID))
	}
	if in.TicketRuleID != "" {
		const prefix string = ",\"ticket_rule_id\":"
		out.RawString(prefix)
		out.String(string(in.TicketRuleID))
	}
	if in.TicketRuleName != "" {
		const prefix string = ",\"ticket_rule_name\":"
		out.RawString(prefix)
		out.String(string(in.TicketRuleName))
	}
	if len(in.TicketData) != 0 {
		const prefix string = ",\"ticket_data\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v63First := true
			for v63Name, v63Value := range in.TicketData {
				if v63First {
					v63First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v63Name))
				out.RawByte(':')
				out.String(string(v63Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes7(in *jlexer.Lexer, out *types.CropCounter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statechanges":
			out.StateChanges = int(in.Int())
		case "stateinc":
			out.Stateinc = int(in.Int())
		case "statedec":
			out.Statedec = int(in.Int())
		case "state:0":
			out.StateInfo = int(in.Int())
		case "state:1":
			out.StateMinor = int(in.Int())
		case "state:2":
			out.StateMajor = int(in.Int())
		case "state:3":
			out.StateCritical = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes7(out *jwriter.Writer, in types.CropCounter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statechanges\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StateChanges))
	}
	{
		const prefix string = ",\"stateinc\":"
		out.RawString(prefix)
		out.Int(int(in.Stateinc))
	}
	{
		const prefix string = ",\"statedec\":"
		out.RawString(prefix)
		out.Int(int(in.Statedec))
	}
	if in.StateInfo != 0 {
		const prefix string = ",\"state:0\":"
		out.RawString(prefix)
		out.Int(int(in.StateInfo))
	}
	if in.StateMinor != 0 {
		const prefix string = ",\"state:1\":"
		out.RawString(prefix)
		out.Int(int(in.StateMinor))
	}
	if in.StateMajor != 0 {
		const prefix string = ",\"state:2\":"
		out.RawString(prefix)
		out.Int(int(in.StateMajor))
	}
	if in.StateCritical != 0 {
		const prefix string = ",\"state:3\":"
		out.RawString(prefix)
		out.Int(int(in.StateCritical))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc3(in *jlexer.Lexer, out *PbehaviorResultEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alarm":
			if in.IsNull() {
				in.Skip()
				out.Alarm = nil
			} else {
				if out.Alarm == nil {
					out.Alarm = new(types.Alarm)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(in, out.Alarm)
			}
		case "entity":
			if in.IsNull() {
				in.Skip()
				out.Entity = nil
			} else {
				if out.Entity == nil {
					out.Entity = new(types.Entity)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(in, out.Entity)
			}
		case "event":
			(out.PbhEvent).UnmarshalEasyJSON(in)
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Error).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc3(out *jwriter.Writer, in PbehaviorResultEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alarm\":"
		out.RawString(prefix[1:])
		if in.Alarm == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(out, *in.Alarm)
		}
	}
	{
		const prefix string = ",\"entity\":"
		out.RawString(prefix)
		if in.Entity == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(out, *in.Entity)
		}
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		(in.PbhEvent).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		if in.Error == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Error).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PbehaviorResultEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PbehaviorResultEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc3(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc4(in *jlexer.Lexer, out *PbehaviorRecomputeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Ids = nil
			} else {
				in.Delim('[')
				if out.Ids == nil {
					if !in.IsDelim(']') {
						out.Ids = make([]string, 0, 4)
					} else {
						out.Ids = []string{}
					}
				} else {
					out.Ids = (out.Ids)[:0]
				}
				for !in.IsDelim(']') {
					var v64 string
					v64 = string(in.String())
					out.Ids = append(out.Ids, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc4(out *jwriter.Writer, in PbehaviorRecomputeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.Ids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Ids {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PbehaviorRecomputeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PbehaviorRecomputeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc4(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc5(in *jlexer.Lexer, out *PbehaviorEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alarm":
			if in.IsNull() {
				in.Skip()
				out.Alarm = nil
			} else {
				if out.Alarm == nil {
					out.Alarm = new(types.Alarm)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(in, out.Alarm)
			}
		case "entity":
			if in.IsNull() {
				in.Skip()
				out.Entity = nil
			} else {
				if out.Entity == nil {
					out.Entity = new(types.Entity)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(in, out.Entity)
			}
		case "params":
			easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc6(in, &out.Params)
		case "healthcheck":
			out.Healthcheck = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc5(out *jwriter.Writer, in PbehaviorEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alarm\":"
		out.RawString(prefix[1:])
		if in.Alarm == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(out, *in.Alarm)
		}
	}
	{
		const prefix string = ",\"entity\":"
		out.RawString(prefix)
		if in.Entity == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(out, *in.Entity)
		}
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc6(out, in.Params)
	}
	{
		const prefix string = ",\"healthcheck\":"
		out.RawString(prefix)
		out.Bool(bool(in.Healthcheck))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PbehaviorEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PbehaviorEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc5(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc6(in *jlexer.Lexer, out *PbehaviorParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "author":
			out.Author = string(in.String())
		case "user":
			out.UserID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "rrule":
			out.RRule = string(in.String())
		case "tstart":
			if in.IsNull() {
				in.Skip()
				out.Tstart = nil
			} else {
				if out.Tstart == nil {
					out.Tstart = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Tstart).UnmarshalJSON(data))
				}
			}
		case "tstop":
			if in.IsNull() {
				in.Skip()
				out.Tstop = nil
			} else {
				if out.Tstop == nil {
					out.Tstop = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Tstop).UnmarshalJSON(data))
				}
			}
		case "start_on_trigger":
			if in.IsNull() {
				in.Skip()
				out.StartOnTrigger = nil
			} else {
				if out.StartOnTrigger == nil {
					out.StartOnTrigger = new(bool)
				}
				*out.StartOnTrigger = bool(in.Bool())
			}
		case "duration":
			if in.IsNull() {
				in.Skip()
				out.Duration = nil
			} else {
				if out.Duration == nil {
					out.Duration = new(datetime.DurationWithUnit)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisDatetime(in, out.Duration)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc6(out *jwriter.Writer, in PbehaviorParameters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix[1:])
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"rrule\":"
		out.RawString(prefix)
		out.String(string(in.RRule))
	}
	if in.Tstart != nil {
		const prefix string = ",\"tstart\":"
		out.RawString(prefix)
		out.Raw((*in.Tstart).MarshalJSON())
	}
	if in.Tstop != nil {
		const prefix string = ",\"tstop\":"
		out.RawString(prefix)
		out.Raw((*in.Tstop).MarshalJSON())
	}
	if in.StartOnTrigger != nil {
		const prefix string = ",\"start_on_trigger\":"
		out.RawString(prefix)
		out.Bool(bool(*in.StartOnTrigger))
	}
	if in.Duration != nil {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisDatetime(out, *in.Duration)
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisDatetime(in *jlexer.Lexer, out *datetime.DurationWithUnit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int64(in.Int64())
		case "unit":
			out.Unit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisDatetime(out *jwriter.Writer, in datetime.DurationWithUnit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Value))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc7(in *jlexer.Lexer, out *DynamicInfosResultEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alarm":
			if in.IsNull() {
				in.Skip()
				out.Alarm = nil
			} else {
				if out.Alarm == nil {
					out.Alarm = new(types.Alarm)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(in, out.Alarm)
			}
		case "alarm_change":
			out.AlarmChangeType = types.AlarmChangeType(in.String())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Error).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc7(out *jwriter.Writer, in DynamicInfosResultEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alarm\":"
		out.RawString(prefix[1:])
		if in.Alarm == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(out, *in.Alarm)
		}
	}
	{
		const prefix string = ",\"alarm_change\":"
		out.RawString(prefix)
		out.String(string(in.AlarmChangeType))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		if in.Error == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Error).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DynamicInfosResultEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DynamicInfosResultEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc7(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc8(in *jlexer.Lexer, out *DynamicInfosEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		case "action":
			out.Action = int(in.Int())
		case "alarm":
			if in.IsNull() {
				in.Skip()
				out.Alarm = nil
			} else {
				if out.Alarm == nil {
					out.Alarm = new(types.Alarm)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(in, out.Alarm)
			}
		case "entity":
			if in.IsNull() {
				in.Skip()
				out.Entity = nil
			} else {
				if out.Entity == nil {
					out.Entity = new(types.Entity)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(in, out.Entity)
			}
		case "alarm_change":
			out.AlarmChangeType = types.AlarmChangeType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc8(out *jwriter.Writer, in DynamicInfosEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.Int(int(in.Action))
	}
	{
		const prefix string = ",\"alarm\":"
		out.RawString(prefix)
		if in.Alarm == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(out, *in.Alarm)
		}
	}
	{
		const prefix string = ",\"entity\":"
		out.RawString(prefix)
		if in.Entity == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(out, *in.Entity)
		}
	}
	{
		const prefix string = ",\"alarm_change\":"
		out.RawString(prefix)
		out.String(string(in.AlarmChangeType))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DynamicInfosEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DynamicInfosEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc8(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc9(in *jlexer.Lexer, out *AxeResultEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alarm":
			if in.IsNull() {
				in.Skip()
				out.Alarm = nil
			} else {
				if out.Alarm == nil {
					out.Alarm = new(types.Alarm)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(in, out.Alarm)
			}
		case "alarm_change":
			out.AlarmChangeType = types.AlarmChangeType(in.String())
		case "webhook_header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.WebhookHeader = make(map[string]string)
				} else {
					out.WebhookHeader = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v67 string
					v67 = string(in.String())
					(out.WebhookHeader)[key] = v67
					in.WantComma()
				}
				in.Delim('}')
			}
		case "webhook_response":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.WebhookResponse = make(map[string]interface{})
				} else {
					out.WebhookResponse = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v68 interface{}
					if m, ok := v68.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v68.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v68 = in.Interface()
					}
					(out.WebhookResponse)[key] = v68
					in.WantComma()
				}
				in.Delim('}')
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Error).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc9(out *jwriter.Writer, in AxeResultEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alarm\":"
		out.RawString(prefix[1:])
		if in.Alarm == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(out, *in.Alarm)
		}
	}
	{
		const prefix string = ",\"alarm_change\":"
		out.RawString(prefix)
		out.String(string(in.AlarmChangeType))
	}
	if len(in.WebhookHeader) != 0 {
		const prefix string = ",\"webhook_header\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v69First := true
			for v69Name, v69Value := range in.WebhookHeader {
				if v69First {
					v69First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v69Name))
				out.RawByte(':')
				out.String(string(v69Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.WebhookResponse) != 0 {
		const prefix string = ",\"webhook_response\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v70First := true
			for v70Name, v70Value := range in.WebhookResponse {
				if v70First {
					v70First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v70Name))
				out.RawByte(':')
				if m, ok := v70Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v70Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v70Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		if in.Error == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Error).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AxeResultEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AxeResultEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc9(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc10(in *jlexer.Lexer, out *AxeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_type":
			out.EventType = string(in.String())
		case "parameters":
			easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc11(in, &out.Parameters)
		case "alarm":
			if in.IsNull() {
				in.Skip()
				out.Alarm = nil
			} else {
				if out.Alarm == nil {
					out.Alarm = new(types.Alarm)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(in, out.Alarm)
			}
		case "alarm_id":
			out.AlarmID = string(in.String())
		case "entity":
			if in.IsNull() {
				in.Skip()
				out.Entity = nil
			} else {
				if out.Entity == nil {
					out.Entity = new(types.Entity)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(in, out.Entity)
			}
		case "healthcheck":
			out.Healthcheck = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc10(out *jwriter.Writer, in AxeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event_type\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	if true {
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc11(out, in.Parameters)
	}
	if in.Alarm != nil {
		const prefix string = ",\"alarm\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes(out, *in.Alarm)
	}
	if in.AlarmID != "" {
		const prefix string = ",\"alarm_id\":"
		out.RawString(prefix)
		out.String(string(in.AlarmID))
	}
	if in.Entity != nil {
		const prefix string = ",\"entity\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes1(out, *in.Entity)
	}
	if in.Healthcheck {
		const prefix string = ",\"healthcheck\":"
		out.RawString(prefix)
		out.Bool(bool(in.Healthcheck))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AxeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AxeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc10(l, v)
}
func easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc11(in *jlexer.Lexer, out *AxeParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "output":
			out.Output = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "user":
			out.User = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "initiator":
			out.Initiator = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(types.CpsNumber)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.State).UnmarshalJSON(data))
				}
			}
		case "ticket_resources":
			out.TicketResources = bool(in.Bool())
		case "webhook_request":
			out.WebhookRequest = bool(in.Bool())
		case "webhook_header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.WebhookHeader = make(map[string]string)
				} else {
					out.WebhookHeader = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v71 string
					v71 = string(in.String())
					(out.WebhookHeader)[key] = v71
					in.WantComma()
				}
				in.Delim('}')
			}
		case "webhook_response":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.WebhookResponse = make(map[string]interface{})
				} else {
					out.WebhookResponse = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v72 interface{}
					if m, ok := v72.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v72.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v72 = in.Interface()
					}
					(out.WebhookResponse)[key] = v72
					in.WantComma()
				}
				in.Delim('}')
			}
		case "webhook_fail_reason":
			out.WebhookFailReason = string(in.String())
		case "webhook_error":
			if in.IsNull() {
				in.Skip()
				out.WebhookError = nil
			} else {
				if out.WebhookError == nil {
					out.WebhookError = new(Error)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.WebhookError).UnmarshalJSON(data))
				}
			}
		case "emit_trigger":
			out.EmitTrigger = bool(in.Bool())
		case "duration":
			if in.IsNull() {
				in.Skip()
				out.Duration = nil
			} else {
				if out.Duration == nil {
					out.Duration = new(datetime.DurationWithUnit)
				}
				easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisDatetime(in, out.Duration)
			}
		case "pbehavior_info":
			easyjson692db02bDecodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(in, &out.PbehaviorInfo)
		case "name":
			out.Name = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "rrule":
			out.RRule = string(in.String())
		case "tstart":
			if in.IsNull() {
				in.Skip()
				out.Tstart = nil
			} else {
				if out.Tstart == nil {
					out.Tstart = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Tstart).UnmarshalJSON(data))
				}
			}
		case "tstop":
			if in.IsNull() {
				in.Skip()
				out.Tstop = nil
			} else {
				if out.Tstop == nil {
					out.Tstop = new(datetime.CpsTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Tstop).UnmarshalJSON(data))
				}
			}
		case "start_on_trigger":
			if in.IsNull() {
				in.Skip()
				out.StartOnTrigger = nil
			} else {
				if out.StartOnTrigger == nil {
					out.StartOnTrigger = new(bool)
				}
				*out.StartOnTrigger = bool(in.Bool())
			}
		case "execution":
			out.Execution = string(in.String())
		case "instruction":
			out.Instruction = string(in.String())
		case "trigger":
			out.Trigger = string(in.String())
		case "long_output":
			out.LongOutput = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v73 string
					v73 = string(in.String())
					(out.Tags)[key] = v73
					in.WantComma()
				}
				in.Delim('}')
			}
		case "connector":
			out.Connector = string(in.String())
		case "connector_name":
			out.ConnectorName = string(in.String())
		case "idle_rule_apply":
			out.IdleRuleApply = string(in.String())
		case "meta_alarm_rule_id":
			out.MetaAlarmRuleID = string(in.String())
		case "meta_alarm_value_path":
			out.MetaAlarmValuePath = string(in.String())
		case "display_name":
			out.DisplayName = string(in.String())
		case "meta_alarm_children":
			if in.IsNull() {
				in.Skip()
				out.MetaAlarmChildren = nil
			} else {
				in.Delim('[')
				if out.MetaAlarmChildren == nil {
					if !in.IsDelim(']') {
						out.MetaAlarmChildren = make([]string, 0, 4)
					} else {
						out.MetaAlarmChildren = []string{}
					}
				} else {
					out.MetaAlarmChildren = (out.MetaAlarmChildren)[:0]
				}
				for !in.IsDelim(']') {
					var v74 string
					v74 = string(in.String())
					out.MetaAlarmChildren = append(out.MetaAlarmChildren, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ticket":
			out.Ticket = string(in.String())
		case "ticket_url":
			out.TicketURL = string(in.String())
		case "ticket_comment":
			out.TicketComment = string(in.String())
		case "ticket_system_name":
			out.TicketSystemName = string(in.String())
		case "ticket_meta_alarm_id":
			out.TicketMetaAlarmID = string(in.String())
		case "ticket_rule_id":
			out.TicketRuleID = string(in.String())
		case "ticket_rule_name":
			out.TicketRuleName = string(in.String())
		case "ticket_data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TicketData = make(map[string]string)
				} else {
					out.TicketData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v75 string
					v75 = string(in.String())
					(out.TicketData)[key] = v75
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisRpc11(out *jwriter.Writer, in AxeParameters) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Output != "" {
		const prefix string = ",\"output\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Output))
	}
	if in.Author != "" {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	if in.Initiator != "" {
		const prefix string = ",\"initiator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Initiator))
	}
	if true {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.State).MarshalJSON())
	}
	if in.TicketResources {
		const prefix string = ",\"ticket_resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TicketResources))
	}
	if in.WebhookRequest {
		const prefix string = ",\"webhook_request\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.WebhookRequest))
	}
	if len(in.WebhookHeader) != 0 {
		const prefix string = ",\"webhook_header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v76First := true
			for v76Name, v76Value := range in.WebhookHeader {
				if v76First {
					v76First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v76Name))
				out.RawByte(':')
				out.String(string(v76Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.WebhookResponse) != 0 {
		const prefix string = ",\"webhook_response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v77First := true
			for v77Name, v77Value := range in.WebhookResponse {
				if v77First {
					v77First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v77Name))
				out.RawByte(':')
				if m, ok := v77Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v77Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v77Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.WebhookFailReason != "" {
		const prefix string = ",\"webhook_fail_reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WebhookFailReason))
	}
	if in.WebhookError != nil {
		const prefix string = ",\"webhook_error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.WebhookError).MarshalJSON())
	}
	if in.EmitTrigger {
		const prefix string = ",\"emit_trigger\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EmitTrigger))
	}
	if in.Duration != nil {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisDatetime(out, *in.Duration)
	}
	if true {
		const prefix string = ",\"pbehavior_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncodeGitCanopsisNetCanopsisCanopsisCommunityCommunityGoEnginesCommunityLibCanopsisTypes4(out, in.PbehaviorInfo)
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.RRule != "" {
		const prefix string = ",\"rrule\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RRule))
	}
	if in.Tstart != nil {
		const prefix string = ",\"tstart\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Tstart).MarshalJSON())
	}
	if in.Tstop != nil {
		const prefix string = ",\"tstop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Tstop).MarshalJSON())
	}
	if in.StartOnTrigger != nil {
		const prefix string = ",\"start_on_trigger\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.StartOnTrigger))
	}
	if in.Execution != "" {
		const prefix string = ",\"execution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Execution))
	}
	if in.Instruction != "" {
		const prefix string = ",\"instruction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Instruction))
	}
	if in.Trigger != "" {
		const prefix string = ",\"trigger\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Trigger))
	}
	if in.LongOutput != "" {
		const prefix string = ",\"long_output\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LongOutput))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v78First := true
			for v78Name, v78Value := range in.Tags {
				if v78First {
					v78First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v78Name))
				out.RawByte(':')
				out.String(string(v78Value))
			}
			out.RawByte('}')
		}
	}
	if in.Connector != "" {
		const prefix string = ",\"connector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Connector))
	}
	if in.ConnectorName != "" {
		const prefix string = ",\"connector_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConnectorName))
	}
	if in.IdleRuleApply != "" {
		const prefix string = ",\"idle_rule_apply\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdleRuleApply))
	}
	if in.MetaAlarmRuleID != "" {
		const prefix string = ",\"meta_alarm_rule_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MetaAlarmRuleID))
	}
	if in.MetaAlarmValuePath != "" {
		const prefix string = ",\"meta_alarm_value_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MetaAlarmValuePath))
	}
	if in.DisplayName != "" {
		const prefix string = ",\"display_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	if len(in.MetaAlarmChildren) != 0 {
		const prefix string = ",\"meta_alarm_children\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v79, v80 := range in.MetaAlarmChildren {
				if v79 > 0 {
					out.RawByte(',')
				}
				out.String(string(v80))
			}
			out.RawByte(']')
		}
	}
	if in.Ticket != "" {
		const prefix string = ",\"ticket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ticket))
	}
	if in.TicketURL != "" {
		const prefix string = ",\"ticket_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TicketURL))
	}
	if in.TicketComment != "" {
		const prefix string = ",\"ticket_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TicketComment))
	}
	if in.TicketSystemName != "" {
		const prefix string = ",\"ticket_system_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TicketSystemName))
	}
	if in.TicketMetaAlarmID != "" {
		const prefix string = ",\"ticket_meta_alarm_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TicketMetaAlarmID))
	}
	if in.TicketRuleID != "" {
		const prefix string = ",\"ticket_rule_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TicketRuleID))
	}
	if in.TicketRuleName != "" {
		const prefix string = ",\"ticket_rule_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TicketRuleName))
	}
	if len(in.TicketData) != 0 {
		const prefix string = ",\"ticket_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v81First := true
			for v81Name, v81Value := range in.TicketData {
				if v81First {
					v81First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v81Name))
				out.RawByte(':')
				out.String(string(v81Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
