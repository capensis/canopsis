openapi: 3.0.1
info:
  title: Canopsis Community API
  description: This is a Canopsis Community API.
  version: 4.0.0
  license:
    name: GNU AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.html
servers:
  - url: /api/v4
paths:
  /account/me:
    get:
      tags:
        - account
      summary: Get account
      description: Get account
      operationId: account-get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/account.User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /active-broadcast-message:
    get:
      tags:
        - broadcast-messages
      summary: Get all active broadcast-message
      description: Get all active broadcast-message
      operationId: broadcast-messages-get-active
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'schemas_swagger.yaml#/definitions/broadcastmessage.BroadcastMessage'
      security:
        - { }
  /alarm-counters:
    get:
      tags:
        - alarms
      summary: Count alarms
      description: Get counts of alarms
      operationId: alarms-get-counts
      parameters:
        - name: active_columns[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filters[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: category
          in: query
          schema:
            type: string
        - name: correlation
          in: query
          schema:
            type: boolean
        - name: instructions[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: 'schemas_swagger.yaml#/definitions/alarm.InstructionFilterRequest'
        - name: opened
          in: query
          schema:
            type: boolean
        - name: time_field
          in: query
          schema:
            type: string
        - name: tstart
          in: query
          schema:
            type: integer
        - name: tstop
          in: query
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/alarm.Count'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /alarm-export:
    post:
      tags:
        - alarms
      summary: Start export alarms
      description: Start export alarms
      operationId: alarms-export-start
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/alarm.ExportRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/alarm.ExportResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /alarm-export/{id}:
    get:
      tags:
        - alarms
      summary: Get status of export alarms
      description: Get status of export alarms
      operationId: alarms-export-get
      parameters:
        - name: id
          in: path
          description: export task id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/alarm.ExportResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /alarm-export/{id}/download:
    get:
      tags:
        - alarms
      summary: Get result of export alarms
      description: Get result of export alarms
      operationId: alarms-export-download
      parameters:
        - name: id
          in: path
          description: export task id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /alarm-details:
    post:
      tags:
        - alarms
      summary: Get alarms' details
      description: Get paginated list of alarms' steps and children.
      operationId: alarms-details-get
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/alarm.DetailsRequest'
            examples:
              get:
                summary: Get details
                description: Get details of alarms
                value: [
                  {
                    "_id": "293d7b83-e622-40d9-95ef-86b06eda3746",
                    "with_instructions": true,
                    "opened": true,
                    "steps": {
                      "page": 1,
                      "limit": 10
                    },
                    "children": {
                      "page": 1,
                      "limit": 10,
                      "sort_by": "v.resource",
                      "sort": "asc",
                      "multi_sort": []
                    }
                  },
                  {
                    "_id": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2",
                    "opened": true,
                    "steps": {
                      "page": 2
                    }
                  }
                ]
        required: true
      responses:
        207:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/alarm.DetailsResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /alarms:
    get:
      tags:
        - alarms
      summary: Find all alarms
      description: Get paginated list of alarms.
      operationId: alarms-find-all
      parameters:
        - name: active_columns[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filters[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: category
          in: query
          schema:
            type: string
        - name: correlation
          in: query
          schema:
            type: boolean
        - name: instructions[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: 'schemas_swagger.yaml#/definitions/alarm.InstructionFilterRequest'
        - name: opened
          in: query
          schema:
            type: boolean
        - name: time_field
          in: query
          schema:
            type: string
        - name: tstart
          in: query
          schema:
            type: integer
        - name: tstop
          in: query
          schema:
            type: integer
        - name: with_links
          in: query
          description: Links are retrieved from external service so use carefully with big limit.
          schema:
            type: boolean
        - name: with_instructions
          in: query
          schema:
            type: boolean
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          schema:
            type: string
        - name: multi_sort[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example: t,asc
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/alarm.Alarm'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /alarms/{id}:
    get:
      tags:
        - alarms
      summary: Get alarm by id
      description: Get alarm by id
      operationId: alarms-get-by-id
      parameters:
        - name: id
          in: path
          description: alarm id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/alarm.Alarm'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /app-info:
    get:
      tags:
        - internal
      summary: Get application information
      description: Get application information
      operationId: internal-get-app-info
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/appinfo.AppInfoResponse'
  /associativetable:
    get:
      tags:
        - associativetables
      summary: Get associativetable by name
      description: Get associativetable by name
      operationId: associativetables-get-by-name
      parameters:
        - name: name
          in: query
          description: associativetable name
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/associativetable.AssociativeTable'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    post:
      tags:
        - associativetables
      summary: Create/update associativetable
      description: Create/update associativetable
      operationId: associativetables-update
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/associativetable.AssociativeTable'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/associativetable.AssociativeTable'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - associativetables
      summary: Delete associativetable by name
      description: Delete associativetable by name
      operationId: associativetables-delete-by-name
      parameters:
        - name: name
          in: query
          description: associativetable name
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /broadcast-message:
    get:
      tags:
        - broadcast-messages
      summary: Find all broadcast-message
      description: Get paginated list of broadcast-message
      operationId: broadcast-messages-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/broadcastmessage.BroadcastMessage'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    post:
      tags:
        - broadcast-messages
      summary: Create broadcast-message
      description: Create broadcast-message
      operationId: broadcast-messages-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/broadcastmessage.BroadcastMessage'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/broadcastmessage.BroadcastMessage'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /broadcast-message/{id}:
    get:
      tags:
        - broadcast-messages
      summary: Get broadcast-message by id
      description: Get broadcast-message by id
      operationId: broadcast-messages-get-by-id
      parameters:
        - name: id
          in: path
          description: broadcast-message id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/broadcastmessage.BroadcastMessage'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - broadcast-messages
      summary: Update broadcast-message by id
      description: Update broadcast-message by id
      operationId: broadcast-messages-update-by-id
      parameters:
        - name: id
          in: path
          description: broadcast-message id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/broadcastmessage.Payload'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/broadcastmessage.BroadcastMessage'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - broadcast-messages
      summary: Delete broadcast-message by id
      description: Delete broadcast-message by id
      operationId: broadcast-messages-delete-by-id
      parameters:
        - name: id
          in: path
          description: broadcast-message id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /bulk/entities/disable:
    put:
      tags:
        - entities
      summary: Bulk disable entities
      description: Bulk disable entities
      operationId: entitybasics-bulk-disable
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/entity.BulkToggleRequestItem'
            examples:
              update:
                summary: Disable
                description: Disable entities.
                value: [
                  {
                    "_id": "test-entity-id-1"
                  },
                  {
                    "_id": "test-entity-id-2"
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/entity.BulkToggleRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /bulk/entities/enable:
    put:
      tags:
        - entities
      summary: Bulk enable entities
      description: Bulk enable entities
      operationId: entitybasics-bulk-enable
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/entity.BulkToggleRequestItem'
            examples:
              update:
                summary: Enable
                description: Enable entities.
                value: [
                  {
                    "_id": "test-entity-id-1"
                  },
                  {
                    "_id": "test-entity-id-2"
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/entity.BulkToggleRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /bulk/entityservices:
    put:
      tags:
        - entityservices
      summary: Bulk update entityservices
      description: Bulk update entityservices
      operationId: entityservices-bulk-update
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/entityservice.BulkUpdateRequestItem'
            examples:
              update:
                summary: Update
                description: Update services.
                value: [
                  {
                    "_id": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101",
                    "name": "Group 1",
                    "output_template": "All: {{.All}}
                      Alarms: {{.Alarms}}
                      Acknowledged: {{.Acknowledged}}
                      NotAcknowledged: {{.NotAcknowledged}}
                      StateCritical: {{.State.Critical}}
                      StateMajor: {{.State.Major}}
                      StateMinor: {{.State.Minor}}
                      StateInfo: {{.State.Info}}
                      Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                      Pause: {{index .PbehaviorCounters \"default_pause\"}}
                      Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                    "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                    "impact_level": 2,
                    "enabled": true,
                    "entity_pattern": [
                      [
                        {
                          "field": "type",
                          "cond": {
                            "type": "eq",
                            "value": "resource"
                          }
                        },
                        {
                          "field": "infos.group",
                          "cond": {
                            "type": "eq",
                            "value": "g1"
                          }
                        }
                      ]
                    ],
                    "sli_avail_state": 1,
                    "infos": [
                      {
                        "name": "group",
                        "description": "Group id",
                        "value": "g1"
                      }
                    ]
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/entityservice.BulkUpdateRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - entityservices
      summary: Bulk create entityservices
      description: Bulk create entityservices
      operationId: entityservices-bulk-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/entityservice.CreateRequest'
            examples:
              create:
                summary: Create
                description: Create services.
                value: [
                  {
                    "name": "Group 1",
                    "output_template": "All: {{.All}}
                      Alarms: {{.Alarms}}
                      Acknowledged: {{.Acknowledged}}
                      NotAcknowledged: {{.NotAcknowledged}}
                      StateCritical: {{.State.Critical}}
                      StateMajor: {{.State.Major}}
                      StateMinor: {{.State.Minor}}
                      StateInfo: {{.State.Info}}
                      Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                      Pause: {{index .PbehaviorCounters \"default_pause\"}}
                      Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                    "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                    "impact_level": 2,
                    "enabled": true,
                    "entity_pattern": [
                      [
                        {
                          "field": "type",
                          "cond": {
                            "type": "eq",
                            "value": "resource"
                          }
                        },
                        {
                          "field": "infos.group",
                          "cond": {
                            "type": "eq",
                            "value": "g1"
                          }
                        }
                      ]
                    ],
                    "sli_avail_state": 1,
                    "infos": [
                      {
                        "name": "group",
                        "description": "Group id",
                        "value": "g1"
                      }
                    ]
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/entityservice.CreateRequest'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    delete:
      tags:
        - entityservices
      summary: Bulk delete entityservices
      description: Bulk delete entityservices
      operationId: entityservices-bulk-delete
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/entityservice.BulkDeleteRequestItem'
            examples:
              delete:
                summary: Delete
                description: Delete services.
                value: [
                  {
                    "_id": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101"
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/BulkResponseItem'
                    - type: object
                      properties:
                        item:
                          $ref: 'schemas_swagger.yaml#/definitions/entityservice.BulkDeleteRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /bulk/eventfilters:
    put:
      tags:
        - eventfilters
      summary: Bulk update eventfilters
      description: Bulk update eventfilters
      operationId: eventfilters-bulk-update
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/eventfilter.BulkUpdateRequestItem'
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/eventfilter.BulkUpdateRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - eventfilters
      summary: Bulk create eventfilters
      description: Bulk create eventfilters
      operationId: eventfilters-bulk-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/eventfilter.CreateRequest'
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/eventfilter.CreateRequest'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    delete:
      tags:
        - eventfilters
      summary: Bulk delete eventfilters
      description: Bulk delete eventfilters
      operationId: eventfilters-bulk-delete
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/eventfilter.BulkDeleteRequestItem'
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/eventfilter.BulkDeleteRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /bulk/idle-rules:
    put:
      tags:
        - idlerules
      summary: Bulk update idlerules
      description: Bulk update idlerules
      operationId: idlerules-bulk-update
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/idlerule.BulkUpdateRequestItem'
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/idlerule.BulkUpdateRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - idlerules
      summary: Bulk create idlerules
      description: Bulk create idlerules
      operationId: idlerules-bulk-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/idlerule.CreateRequest'
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/idlerule.CreateRequest'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    delete:
      tags:
        - idlerules
      summary: Bulk delete idlerules
      description: Bulk delete idlerules
      operationId: idlerules-bulk-delete
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/idlerule.BulkDeleteRequestItem'
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/idlerule.BulkDeleteRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /bulk/patterns:
    delete:
      tags:
        - saved-patterns
      summary: Bulk delete patterns
      description: Bulk delete patterns
      operationId: saved-patterns-bulk-delete
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/pattern.BulkDeleteRequestItem'
            examples:
              delete:
                summary: Delete
                description: Delete patterns
                value: [
                  {
                    "_id": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101"
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/pattern.BulkDeleteRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /bulk/pbehaviors:
    put:
      tags:
        - pbehaviors
      summary: Bulk update pbehaviors
      description: Bulk update pbehaviors
      operationId: pbehaviors-bulk-update
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.BulkUpdateRequestItem'
            examples:
              update:
                summary: Update
                description: Update pbehaviors
                value: [
                  {
                    "_id": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101",
                    "name": "Active period",
                    "enabled": true,
                    "tstart": 1650855600,
                    "tstop": 1650891600,
                    "rrule": "FREQ=DAILY",
                    "type": "default_active",
                    "reason": "default_reason",
                    "entity_pattern": [
                      [
                        {
                          "field": "name",
                          "cond": {
                            "type": "eq",
                            "value": "cps_resource"
                          }
                        }
                      ]
                    ],
                    "exdates": [
                      {
                        "begin": 1651460400,
                        "end": 1651496400,
                        "type": "default_maintenance"
                      }
                    ],
                    "exceptions": [ "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101" ]
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/pbehavior.BulkUpdateRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - pbehaviors
      summary: Bulk create pbehaviors
      description: Bulk create pbehaviors
      operationId: pbehaviors-bulk-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.CreateRequest'
            examples:
              create:
                summary: Create
                description: Create pbehaviors
                value: [
                  {
                    "name": "Active period",
                    "enabled": true,
                    "tstart": 1650855600,
                    "tstop": 1650891600,
                    "rrule": "FREQ=DAILY",
                    "type": "default_active",
                    "reason": "default_reason",
                    "entity_pattern": [
                      [
                        {
                          "field": "name",
                          "cond": {
                            "type": "eq",
                            "value": "cps_resource"
                          }
                        }
                      ]
                    ],
                    "exdates": [
                      {
                        "begin": 1651460400,
                        "end": 1651496400,
                        "type": "default_maintenance"
                      }
                    ],
                    "exceptions": [ "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101" ]
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/pbehavior.CreateRequest'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    delete:
      tags:
        - pbehaviors
      summary: Bulk delete pbehaviors
      description: Bulk delete pbehaviors
      operationId: pbehaviors-bulk-delete
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.BulkDeleteRequestItem'
            examples:
              delete:
                summary: Delete
                description: Delete pbehaviors
                value: [
                  {
                    "_id": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101"
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/pbehavior.BulkDeleteRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /bulk/scenarios:
    put:
      tags:
        - scenarios
      summary: Bulk update scenarios
      description: Bulk update scenarios
      operationId: scenarios-bulk-update
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/scenario.BulkUpdateRequestItem'
            examples:
              update:
                summary: Update
                description: Update scenarios.
                value: [
                  {
                    "_id": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101",
                    "name": "Scenario with acknowledge action",
                    "comment": "The scenario acknowledges an alarm on create",
                    "enabled": true,
                    "priority": 10,
                    "triggers": [ "create" ],
                    "actions": [
                      {
                        "type": "ack",
                        "parameters": {
                          "output": "The alarm is acknowledged by scenario"
                        },
                        "alarm_pattern": [
                          [
                            {
                              "field": "v.state.val",
                              "cond": {
                                "type": "eq",
                                "value": 3
                              }
                            }
                          ]
                        ],
                        "entity_pattern": [
                          [
                            {
                              "field": "type",
                              "cond": {
                                "type": "eq",
                                "value": "resource"
                              }
                            },
                            {
                              "field": "infos.group",
                              "cond": {
                                "type": "eq",
                                "value": "g1"
                              }
                            }
                          ]
                        ],
                        "drop_scenario_if_not_matched": false,
                        "emit_trigger": false
                      }
                    ]
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/scenario.BulkUpdateRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - scenarios
      summary: Bulk create scenarios
      description: Bulk create scenarios
      operationId: scenarios-bulk-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/scenario.CreateRequest'
            examples:
              create:
                summary: Create
                description: Create scenarios.
                value: [
                  {
                    "name": "Scenario with acknowledge action",
                    "comment": "The scenario acknowledges an alarm on create",
                    "enabled": true,
                    "priority": 10,
                    "triggers": [ "create" ],
                    "actions": [
                      {
                        "type": "ack",
                        "parameters": {
                          "output": "The alarm is acknowledged by scenario"
                        },
                        "alarm_pattern": [
                          [
                            {
                              "field": "v.state.val",
                              "cond": {
                                "type": "eq",
                                "value": 3
                              }
                            }
                          ]
                        ],
                        "entity_pattern": [
                          [
                            {
                              "field": "type",
                              "cond": {
                                "type": "eq",
                                "value": "resource"
                              }
                            },
                            {
                              "field": "infos.group",
                              "cond": {
                                "type": "eq",
                                "value": "g1"
                              }
                            }
                          ]
                        ],
                        "drop_scenario_if_not_matched": false,
                        "emit_trigger": false
                      }
                    ]
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/scenario.CreateRequest'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    delete:
      tags:
        - scenarios
      summary: Bulk delete scenarios
      description: Bulk delete scenarios
      operationId: scenarios-bulk-delete
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/scenario.BulkDeleteRequestItem'
            examples:
              delete:
                summary: Delete
                description: Delete scenarios.
                value: [
                  {
                    "_id": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101"
                  }
                ]
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/scenario.BulkDeleteRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /bulk/users:
    put:
      tags:
        - users
      summary: Bulk update users
      description: Bulk update users
      operationId: users-bulk-update
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/user.BulkUpdateRequestItem'
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/user.BulkUpdateRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - users
      summary: Bulk create users
      description: Bulk create users
      operationId: users-bulk-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/user.Request'
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/user.Request'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    delete:
      tags:
        - users
      summary: Bulk delete users
      description: Bulk delete users
      operationId: users-bulk-delete
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/user.BulkDeleteRequestItem'
        required: true
      responses:
        207:
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/BulkResponseItem'
                      - type: object
                        properties:
                          item:
                            $ref: 'schemas_swagger.yaml#/definitions/user.BulkDeleteRequestItem'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /component-alarms:
    get:
      tags:
        - alarms
      summary: Find opened alarms of component's resource
      description: Get paginated list of alarms.
      operationId: alarms-find-component-alarms
      parameters:
        - name: _id
          in: query
          description: component id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/alarm.Alarm'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /contextgraph/import:
    put:
      tags:
        - contextgraph-import
      summary: Create import task
      description: Create import task
      operationId: contextgraph-import-create-import
      parameters:
        - name: source
          in: query
          description: source
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/contextgraph.ImportRequest'
            examples:
              basic:
                summary: Basic
                description: Import basic entities
                value: {
                  "json": {
                    "cis": [
                      {
                        "_id": "cps_component",
                        "name": "cps_component",
                        "type": "component",
                        "impact_level": 1,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "set",
                        "enabled": true
                      },
                      {
                        "_id": "cps_resource_1/cps_component",
                        "name": "cps_resource_1",
                        "type": "resource",
                        "impact_level": 1,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "create",
                        "enabled": true
                      },
                      {
                        "_id": "cps_resource_2/cps_component",
                        "name": "cps_resource_2",
                        "type": "resource",
                        "impact_level": 1,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "update",
                        "enabled": true
                      },
                      {
                        "_id": "cps_resource_3/cps_component",
                        "action": "delete"
                      },
                      {
                        "_id": "cps_resource_4/cps_component",
                        "action": "enable"
                      },
                      {
                        "_id": "cps_resource_5/cps_component",
                        "action": "disable"
                      }
                    ],
                    "links": [
                      {
                        "from": [ "cps_resource_1/cps_component", "cps_resource_2/cps_component" ],
                        "to": "cps_component",
                        "action": "create"
                      },
                      {
                        "from": [ "cps_component" ],
                        "to": "cps_connector/cps_connector_name",
                        "action": "create"
                      },
                      {
                        "from": [ "cps_connector/cps_connector_name" ],
                        "to": "cps_resource_1/cps_component",
                        "action": "create"
                      },
                      {
                        "from": [ "cps_connector/cps_connector_name" ],
                        "to": "cps_resource_2/cps_component",
                        "action": "create"
                      },
                      {
                        "from": [ "cps_resource_3/cps_component" ],
                        "to": "cps_component",
                        "action": "delete"
                      },
                      {
                        "from": [ "cps_connector/cps_connector_name" ],
                        "to": "cps_resource_3/cps_component",
                        "action": "delete"
                      }
                    ]
                  }
                }
              service:
                summary: Service
                description: Import services
                value: {
                  "json": {
                    "cis": [
                      {
                        "_id": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101",
                        "name": "Group 1",
                        "output_template": "All: {{.All}}
                          Alarms: {{.Alarms}}
                          Acknowledged: {{.Acknowledged}}
                          NotAcknowledged: {{.NotAcknowledged}}
                          StateCritical: {{.State.Critical}}
                          StateMajor: {{.State.Major}}
                          StateMinor: {{.State.Minor}}
                          StateInfo: {{.State.Info}}
                          Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                          Pause: {{index .PbehaviorCounters \"default_pause\"}}
                          Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                        "entity_pattern": [
                          [
                            {
                              "field": "type",
                              "cond": {
                                "type": "eq",
                                "value": "resource"
                              }
                            },
                            {
                              "field": "infos.group",
                              "cond": {
                                "type": "eq",
                                "value": "g1"
                              }
                            }
                          ]
                        ],
                        "type": "service",
                        "impact_level": 2,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "set",
                        "enabled": true
                      },
                      {
                        "_id": "60836aca-6ba5-487b-8773-66b86ca1b422",
                        "name": "Group 2",
                        "output_template": "All: {{.All}}
                          Alarms: {{.Alarms}}
                          Acknowledged: {{.Acknowledged}}
                          NotAcknowledged: {{.NotAcknowledged}}
                          StateCritical: {{.State.Critical}}
                          StateMajor: {{.State.Major}}
                          StateMinor: {{.State.Minor}}
                          StateInfo: {{.State.Info}}
                          Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                          Pause: {{index .PbehaviorCounters \"default_pause\"}}
                          Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                        "entity_pattern": [
                          [
                            {
                              "field": "type",
                              "cond": {
                                "type": "eq",
                                "value": "resource"
                              }
                            },
                            {
                              "field": "infos.group",
                              "cond": {
                                "type": "eq",
                                "value": "g2"
                              }
                            }
                          ]
                        ],
                        "type": "service",
                        "impact_level": 2,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "create",
                        "enabled": true
                      },
                      {
                        "_id": "4fb64340-dd69-4775-8334-b7cbd1dc1156",
                        "name": "Group 3",
                        "output_template": "All: {{.All}}
                          Alarms: {{.Alarms}}
                          Acknowledged: {{.Acknowledged}}
                          NotAcknowledged: {{.NotAcknowledged}}
                          StateCritical: {{.State.Critical}}
                          StateMajor: {{.State.Major}}
                          StateMinor: {{.State.Minor}}
                          StateInfo: {{.State.Info}}
                          Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                          Pause: {{index .PbehaviorCounters \"default_pause\"}}
                          Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                        "entity_pattern": [
                          [
                            {
                              "field": "type",
                              "cond": {
                                "type": "eq",
                                "value": "resource"
                              }
                            },
                            {
                              "field": "infos.group",
                              "cond": {
                                "type": "eq",
                                "value": "g3"
                              }
                            }
                          ]
                        ],
                        "type": "service",
                        "impact_level": 2,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g3"
                          }
                        },
                        "action": "update",
                        "enabled": true
                      },
                      {
                        "_id": "185bff86-4e9c-4923-a373-69d3116c713b",
                        "action": "delete"
                      },
                      {
                        "_id": "9b49ff9d-f65a-4508-9ddc-298d7dc2e191",
                        "action": "enable"
                      },
                      {
                        "_id": "41b3b72b-2801-4512-ace4-4c0d644189c3",
                        "action": "disable"
                      }
                    ],
                    "links": [ ]
                  }
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/contextgraph.ImportResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /contextgraph/import-partial:
    put:
      tags:
        - contextgraph-import
      summary: Create import task
      description: Create import task
      operationId: contextgraph-import-create-import-partial
      parameters:
        - name: source
          in: query
          description: source
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/contextgraph.ImportRequest'
            examples:
              basic:
                summary: Basic
                description: Import basic entities
                value: {
                  "json": {
                    "cis": [
                      {
                        "_id": "cps_component",
                        "name": "cps_component",
                        "type": "component",
                        "impact_level": 1,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "set",
                        "enabled": true
                      },
                      {
                        "_id": "cps_resource_1/cps_component",
                        "name": "cps_resource_1",
                        "type": "resource",
                        "impact_level": 1,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "create",
                        "enabled": true
                      },
                      {
                        "_id": "cps_resource_2/cps_component",
                        "name": "cps_resource_2",
                        "type": "resource",
                        "impact_level": 1,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "update",
                        "enabled": true
                      },
                      {
                        "_id": "cps_resource_3/cps_component",
                        "action": "delete"
                      },
                      {
                        "_id": "cps_resource_4/cps_component",
                        "action": "enable"
                      },
                      {
                        "_id": "cps_resource_5/cps_component",
                        "action": "disable"
                      }
                    ],
                    "links": [
                      {
                        "from": [ "cps_resource_1/cps_component", "cps_resource_2/cps_component" ],
                        "to": "cps_component",
                        "action": "create"
                      },
                      {
                        "from": [ "cps_component" ],
                        "to": "cps_connector/cps_connector_name",
                        "action": "create"
                      },
                      {
                        "from": [ "cps_connector/cps_connector_name" ],
                        "to": "cps_resource_1/cps_component",
                        "action": "create"
                      },
                      {
                        "from": [ "cps_connector/cps_connector_name" ],
                        "to": "cps_resource_2/cps_component",
                        "action": "create"
                      },
                      {
                        "from": [ "cps_resource_3/cps_component" ],
                        "to": "cps_component",
                        "action": "delete"
                      },
                      {
                        "from": [ "cps_connector/cps_connector_name" ],
                        "to": "cps_resource_3/cps_component",
                        "action": "delete"
                      }
                    ]
                  }
                }
              service:
                summary: Service
                description: Import services
                value: {
                  "json": {
                    "cis": [
                      {
                        "_id": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101",
                        "name": "Group 1",
                        "output_template": "All: {{.All}}
                          Alarms: {{.Alarms}}
                          Acknowledged: {{.Acknowledged}}
                          NotAcknowledged: {{.NotAcknowledged}}
                          StateCritical: {{.State.Critical}}
                          StateMajor: {{.State.Major}}
                          StateMinor: {{.State.Minor}}
                          StateInfo: {{.State.Info}}
                          Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                          Pause: {{index .PbehaviorCounters \"default_pause\"}}
                          Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                        "entity_patterns": [
                          {
                            "type": "resource",
                            "infos": {
                              "group": {
                                "value": "g1"
                              }
                            }
                          }
                        ],
                        "type": "service",
                        "impact_level": 2,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "set",
                        "enabled": true
                      },
                      {
                        "_id": "60836aca-6ba5-487b-8773-66b86ca1b422",
                        "name": "Group 2",
                        "output_template": "All: {{.All}}
                          Alarms: {{.Alarms}}
                          Acknowledged: {{.Acknowledged}}
                          NotAcknowledged: {{.NotAcknowledged}}
                          StateCritical: {{.State.Critical}}
                          StateMajor: {{.State.Major}}
                          StateMinor: {{.State.Minor}}
                          StateInfo: {{.State.Info}}
                          Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                          Pause: {{index .PbehaviorCounters \"default_pause\"}}
                          Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                        "entity_patterns": [
                          {
                            "type": "resource",
                            "infos": {
                              "group": {
                                "value": "g2"
                              }
                            }
                          }
                        ],
                        "type": "service",
                        "impact_level": 2,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g1"
                          }
                        },
                        "action": "create",
                        "enabled": true
                      },
                      {
                        "_id": "4fb64340-dd69-4775-8334-b7cbd1dc1156",
                        "name": "Group 3",
                        "output_template": "All: {{.All}}
                          Alarms: {{.Alarms}}
                          Acknowledged: {{.Acknowledged}}
                          NotAcknowledged: {{.NotAcknowledged}}
                          StateCritical: {{.State.Critical}}
                          StateMajor: {{.State.Major}}
                          StateMinor: {{.State.Minor}}
                          StateInfo: {{.State.Info}}
                          Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                          Pause: {{index .PbehaviorCounters \"default_pause\"}}
                          Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                        "entity_patterns": [
                          {
                            "type": "resource",
                            "infos": {
                              "group": {
                                "value": "g3"
                              }
                            }
                          }
                        ],
                        "type": "service",
                        "impact_level": 2,
                        "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                        "infos": {
                          "group": {
                            "description": "Group id",
                            "value": "g3"
                          }
                        },
                        "action": "update",
                        "enabled": true
                      },
                      {
                        "_id": "185bff86-4e9c-4923-a373-69d3116c713b",
                        "action": "delete"
                      },
                      {
                        "_id": "9b49ff9d-f65a-4508-9ddc-298d7dc2e191",
                        "action": "enable"
                      },
                      {
                        "_id": "41b3b72b-2801-4512-ace4-4c0d644189c3",
                        "action": "disable"
                      }
                    ],
                    "links": [ ]
                  }
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/contextgraph.ImportResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /contextgraph/import/status/{id}:
    get:
      tags:
        - contextgraph-import
      summary: Get import status by id
      description: Get import status by id
      operationId: contextgraph-import-get-status-by-id
      parameters:
        - name: id
          in: path
          description: import id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/contextgraph.ImportJob'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /data-storage:
    get:
      tags:
        - datastorage
      summary: Get conf
      description: Get conf
      operationId: datastorage-get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/datastorage.DataStorage'
    put:
      tags:
        - datastorage
      summary: Update conf
      description: Update conf
      operationId: datastorage-update
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/datastorage.Config'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/datastorage.DataStorage'
  /entities:
    get:
      tags:
        - entities
      summary: Find entities
      description: Get paginated list of entities
      operationId: entities-find-all
      parameters:
        - name: active_columns[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: category
          in: query
          schema:
            type: string
        - name: filters[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: no_events
          in: query
          schema:
            type: boolean
        - name: type[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - name: paginate
          in: query
          schema:
            type: boolean
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          schema:
            type: string
        - name: with_flags
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/entity.Entity'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /entities/clean:
    post:
      tags:
        - entities
      summary: Clean disabled entities
      description: Clean disabled entities
      operationId: entities-clean
      parameters:
        - name: archive
          in: query
          required: true
          schema:
            type: boolean
        - name: archive_dependencies
          in: query
          schema:
            type: boolean
      responses:
        202:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entities/pbehavior-calendar:
    get:
      tags:
        - pbehaviors
      summary: Find pbehaviors by entity id
      description: Get list of pbehaviors' timespans
      operationId: pbehaviors-calendar-by-entity-id
      parameters:
        - name: _id
          in: query
          description: Entity id
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: true
          schema:
            type: integer
        - name: to
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'schemas_swagger.yaml#/definitions/pbehavior.CalendarResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entities/pbehaviors:
    get:
      tags:
        - pbehaviors
      summary: Find pbehaviors by entity id
      description: Get list of pbehaviors
      operationId: pbehaviors-find-by-entity-id
      parameters:
        - name: _id
          in: query
          description: Entity id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entity-categories:
    get:
      tags:
        - entity-categories
      summary: Find entity categories
      description: Get paginated list of entity categories
      operationId: entity-categories-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/entitycategory.Category'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - entity-categories
      summary: Create entity category
      description: Create entity category
      operationId: entity-categories-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/entitycategory.EditRequest'
            examples:
              create:
                summary: Create
                description: Create a category.
                value: {
                  "name": "Backend"
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entitycategory.Category'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /entity-categories/{id}:
    get:
      tags:
        - entity-categories
      summary: Get entity category by id
      description: Get entity category by id
      operationId: entity-categories-get-by-id
      parameters:
        - name: id
          in: path
          description: category id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entitycategory.Category'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - entity-categories
      summary: Update entity category by id
      description: Update entity category by id
      operationId: entity-categories-update-by-id
      parameters:
        - name: id
          in: path
          description: category id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/entitycategory.EditRequest'
            examples:
              update:
                summary: Update
                description: Update a category.
                value: {
                  "name": "Backend"
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entitycategory.Category'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - entity-categories
      summary: Delete entity category by id
      description: Delete entity category by id
      operationId: entity-categories-delete-by-id
      parameters:
        - name: id
          in: path
          description: category id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entity-export:
    post:
      tags:
        - entities
      summary: Start export entities
      description: Start export entities
      operationId: entities-export-start
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/entity.ExportRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entity.ExportResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /entity-export/{id}:
    get:
      tags:
        - entities
      summary: Get status of export entities
      description: Get status of export entities
      operationId: entities-export-get
      parameters:
        - name: id
          in: path
          description: export task id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entity.ExportResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entity-export/{id}/download:
    get:
      tags:
        - entities
      summary: Get result of export entities
      description: Get result of export entities
      operationId: entities-export-download
      parameters:
        - name: id
          in: path
          description: export task id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entity-infos-dictionary/keys:
    get:
      tags:
        - entity-infos-dictionary
      summary: Find entity infos keys
      description: Get paginated list of entity info keys
      operationId: entity-infos-dictionary-list-keys
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/entityinfodictionary.Result'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /entity-infos-dictionary/values:
    get:
      tags:
        - entity-infos-dictionary
      summary: Find entity infos values
      description: Get paginated list of entity info values
      operationId: entity-infos-dictionary-list-values
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - name: key
          in: query
          description: infos key name
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/entityinfodictionary.Result'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /entitybasics:
    get:
      tags:
        - entitybasics
      summary: Get entity by id
      description: Get entity by id
      operationId: entitybasics-get-by-id
      parameters:
        - name: _id
          in: query
          description: Entity id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entitybasic.Entity'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - entitybasics
      summary: Update entity by id
      description: Update entity by id
      operationId: entitybasics-update-by-id
      parameters:
        - name: _id
          in: query
          description: Entity id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/entitybasic.EditRequest'
            examples:
              resource:
                summary: Resource
                description: Update a resource.
                value: {
                  "description": "Important resource",
                  "enabled": true,
                  "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                  "impact_level": 3,
                  "sli_avail_state": 1,
                  "infos": [
                    {
                      "name": "group",
                      "description": "Group id",
                      "value": "g1"
                    }
                  ],
                  "impact": [
                    "cps_component"
                  ],
                  "depends": [
                    "cps_connector/cps_connector_name"
                  ]
                }
              component:
                summary: Component
                description: Update a component.
                value: {
                  "description": "Important component",
                  "enabled": true,
                  "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                  "impact_level": 3,
                  "sli_avail_state": 1,
                  "infos": [
                    {
                      "name": "group",
                      "description": "Group id",
                      "value": "g1"
                    }
                  ],
                  "impact": [
                    "cps_connector/cps_connector_name"
                  ],
                  "depends": [
                    "cps_resource_1/cps_component",
                    "cps_resource_2/cps_component"
                  ]
                }
              connector:
                summary: Connector
                description: Update a connector.
                value: {
                  "description": "Important connector",
                  "enabled": true,
                  "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                  "impact_level": 3,
                  "sli_avail_state": 1,
                  "infos": [
                    {
                      "name": "group",
                      "description": "Group id",
                      "value": "g1"
                    }
                  ],
                  "impact": [
                    "cps_resource_1/cps_component_1",
                    "cps_resource_2/cps_component_2"
                  ],
                  "depends": [
                    "cps_component_1",
                    "cps_component_2"
                  ]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entitybasic.Entity'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - entitybasics
      summary: Delete entity by id
      description: Delete entity by id
      operationId: entitybasics-delete-by-id
      parameters:
        - name: _id
          in: query
          description: Entity id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entityservice-dependencies:
    get:
      tags:
        - entityservices
      summary: Get entity service's dependencies by id
      description: Get entity service's dependencies by id
      operationId: entityservices-get-dependencies-by-id
      parameters:
        - name: id
          in: query
          description: entity service id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/entityservice.AlarmWithEntity'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entityservice-impacts:
    get:
      tags:
        - entityservices
      summary: Get entity's impacted services by id
      description: Get entity's impacted services by id
      operationId: entityservices-get-impacts-by-id
      parameters:
        - name: id
          in: query
          description: entity id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/entityservice.AlarmWithEntity'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entityservice-alarms/{id}:
    get:
      tags:
        - alarms
      summary: Find opened alarms of service's dependencies
      description: Get paginated list of alarms.
      operationId: alarms-find-service-alarms
      parameters:
        - name: id
          in: path
          description: entity service id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/alarm.Alarm'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /entityservices:
    post:
      tags:
        - entityservices
      summary: Create entity service
      description: Create entity service
      operationId: entityservices-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/entityservice.CreateRequest'
            examples:
              create:
                summary: Create
                description: Create a service.
                value: {
                  "name": "Group 1",
                  "output_template": "All: {{.All}}
                    Alarms: {{.Alarms}}
                    Acknowledged: {{.Acknowledged}}
                    NotAcknowledged: {{.NotAcknowledged}}
                    StateCritical: {{.State.Critical}}
                    StateMajor: {{.State.Major}}
                    StateMinor: {{.State.Minor}}
                    StateInfo: {{.State.Info}}
                    Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                    Pause: {{index .PbehaviorCounters \"default_pause\"}}
                    Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                  "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                  "impact_level": 2,
                  "enabled": true,
                  "entity_pattern": [
                    [
                      {
                        "field": "type",
                        "cond": {
                          "type": "eq",
                          "value": "resource"
                        }
                      },
                      {
                        "field": "infos.group",
                        "cond": {
                          "type": "eq",
                          "value": "g1"
                        }
                      }
                    ]
                  ],
                  "sli_avail_state": 1,
                  "infos": [
                    {
                      "name": "group",
                      "description": "Group id",
                      "value": "g1"
                    }
                  ]
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entityservice.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /entityservices/{id}:
    get:
      tags:
        - entityservices
      summary: Get entity service by id
      description: Get entity service by id
      operationId: entityservices-get-by-id
      parameters:
        - name: id
          in: path
          description: entity service id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entityservice.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - entityservices
      summary: Update entity service by id
      description: Update entity service by id
      operationId: entityservices-update-by-id
      parameters:
        - name: id
          in: path
          description: entity service id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/entityservice.UpdateRequest'
            examples:
              update:
                summary: Update
                description: Update a service.
                value: {
                  "name": "Group 1",
                  "output_template": "All: {{.All}}
                    Alarms: {{.Alarms}}
                    Acknowledged: {{.Acknowledged}}
                    NotAcknowledged: {{.NotAcknowledged}}
                    StateCritical: {{.State.Critical}}
                    StateMajor: {{.State.Major}}
                    StateMinor: {{.State.Minor}}
                    StateInfo: {{.State.Info}}
                    Maintenance: {{index .PbehaviorCounters \"default_maintenance\"}}
                    Pause: {{index .PbehaviorCounters \"default_pause\"}}
                    Inactive: {{index .PbehaviorCounters \"default_inactive\"}}",
                  "category": "d73a4b2a-1927-49d5-bdc3-ae1559ebc7e7",
                  "impact_level": 2,
                  "enabled": true,
                  "entity_pattern": [
                    [
                      {
                        "field": "type",
                        "cond": {
                          "type": "eq",
                          "value": "resource"
                        }
                      },
                      {
                        "field": "infos.group",
                        "cond": {
                          "type": "eq",
                          "value": "g1"
                        }
                      }
                    ]
                  ],
                  "sli_avail_state": 1,
                  "infos": [
                    {
                      "name": "group",
                      "description": "Group id",
                      "value": "g1"
                    }
                  ]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/entityservice.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - entityservices
      summary: Delete entity service by id
      description: Delete entity service by id
      operationId: entityservices-delete-by-id
      parameters:
        - name: id
          in: path
          description: entity service id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /event:
    post:
      tags:
        - events
      summary: Send event/events
      description: Send event/events
      operationId: event-send
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event.Event'
            examples:
              check:
                summary: Check
                description: Update a state of an alarm.
                value: {
                  "event_type": "check",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource",
                  "state": 3,
                  "output": "Something bag h",
                  "long_output": ""
                }
              ack:
                summary: Ack
                description: Acknowledge an alarm.
                value: {
                  "event_type": "ack",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource",
                  "author": "root",
                  "user_id": "root",
                  "output": ""
                }
              ackremove:
                summary: Ack remove
                description: Unacknowledge an alarm.
                value: {
                  "event_type": "ackremove",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource",
                  "author": "root",
                  "user_id": "root",
                  "output": ""
                }
              cancel:
                summary: Cancel
                description: Cancel an alarm.
                value: {
                  "event_type": "cancel",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource",
                  "author": "root",
                  "user_id": "root",
                  "output": ""
                }
              uncancel:
                summary: Uncancel
                description: Uncancel an alarm.
                value: {
                  "event_type": "uncancel",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource",
                  "author": "root",
                  "user_id": "root",
                  "output": ""
                }
              comment:
                summary: Comment
                description: Add new comment to an alarm.
                value: {
                  "event_type": "comment",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource",
                  "author": "root",
                  "user_id": "root",
                  "output": ""
                }
              snooze:
                summary: Snooze
                description: Snooze an alarm for duration (in seconds).
                value: {
                  "event_type": "snooze",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource",
                  "author": "root",
                  "user_id": "root",
                  "output": "",
                  "duration": 600
                }
              changestate:
                summary: Change state
                description: Change a state of an alarm. Following check events won't update the state.
                value: {
                  "event_type": "changestate",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource",
                  "author": "root",
                  "user_id": "root",
                  "output": "",
                  "state": 3
                }
              assocticket:
                summary: Associate ticket
                description: Add new ticket to an alarm.
                value: {
                  "event_type": "assocticket",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource",
                  "author": "root",
                  "user_id": "root",
                  "ticket": ""
                }
              declareticket:
                summary: Declare ticket
                description: Emit a trigger. A scenario can be started on the trigger.
                value: {
                  "event_type": "declareticket",
                  "connector": "cps_connector",
                  "connector_name": "cps_connector_name",
                  "component": "cps_component",
                  "resource": "cps_resource",
                  "source_type": "resource"
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /eventfilter/rules:
    get:
      tags:
        - eventfilters
      summary: Find all eventfilter
      description: Get paginated list of eventfilter
      operationId: eventfilters-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/eventfilter.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    post:
      tags:
        - eventfilters
      summary: Create eventfilter
      description: Create eventfilter
      operationId: eventfilters-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/eventfilter.Response'
            examples:
              CreateDropRule:
                summary: Create a drop rule
                description: Create a drop rule.
                value: {
                  "type": "drop",
                  "event_pattern":[[
                    {
                      "field": "event_type",
                      "cond": {
                        "type": "eq",
                        "value": "check"
                      }
                    },
                    {
                      "field": "component",
                      "cond": {
                        "type": "eq",
                        "value": "example-component"
                      }
                    }
                  ]],
                  "description": "drop rule example",
                  "priority": 1,
                  "enabled": true
                }
              CreateBreakRule:
                summary: Create a break rule
                description: Create a break rule.
                value: {
                  "type": "break",
                  "event_pattern":[[
                    {
                      "field": "event_type",
                      "cond": {
                        "type": "eq",
                        "value": "check"
                      }
                    },
                    {
                      "field": "component",
                      "cond": {
                        "type": "eq",
                        "value": "example-component"
                      }
                    }
                  ]],
                  "description": "break rule example",
                  "priority": 1,
                  "enabled": true
                }
              CreateEnrichmentRule:
                summary: Create an enrichment rule
                description: Create an enrichment rule.
                value: {
                  "description": "enrichment rule example",
                  "type": "enrichment",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "pattern"
                        }
                      }
                    ]
                  ],
                  "priority": 0,
                  "enabled": true,
                  "config": {
                    "actions": [
                      {
                        "type": "set_field",
                        "name": "connector",
                        "value": "kafka_connector"
                      }
                    ],
                    "on_success": "pass",
                    "on_failure": "pass"
                  }
                }
              CreateEnrichmentRuleWithTemplate:
                summary: Create an enrichment rule with template
                description: Create an enrichment rule with template.
                value: {
                  "description": "enrichment rule example with template",
                  "type": "enrichment",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "pattern"
                        }
                      }
                    ]
                  ],
                  "priority": 0,
                  "enabled": true,
                  "config": {
                    "actions": [
                      {
                        "type": "set_entity_info_from_template",
                        "name": "customer",
                        "description": "Client",
                        "value": "{{ .Event.ExtraInfos.customer }}"
                      }
                    ],
                    "on_success": "pass",
                    "on_failure": "pass"
                  }
                }
              CreateEnrichmentRuleWithExternalMongoData:
                summary: Create an enrichment rule with external mongo data
                description: Create an enrichment rule with external mongo data.
                value: {
                  "type": "enrichment",
                  "external_data": {
                    "component": {
                      "type": "mongo",
                      "select": {
                        "component_customer": "{{ .Event.Component }}"
                      },
                      "collection": "assets"
                    }
                  },
                  "event_pattern": [
                    [
                      {
                        "field": "component",
                        "cond": {
                          "type": "eq",
                          "value": "example component"
                        }
                      }
                    ]
                  ],
                  "description": "enruchment rule with external mongo data",
                  "priority": 1,
                  "enabled": true,
                  "config": {
                    "actions": [
                      {
                        "type": "set_entity_info_from_template",
                        "name": "status",
                        "value": "{{ .ExternalData.component.component_status }}",
                        "description": "status from assets"
                      }
                    ],
                    "on_success": "pass",
                    "on_failure": "pass"
                  }
                }
              CreateEnrichmentRuleWithExternalApiData:
                summary: Create an enrichment rule with external api data
                description: Create an enrichment rule with external api data.
                value: {
                  "type": "enrichment",
                  "external_data": {
                    "title": {
                      "type": "api",
                      "request": {
                        "url": "http://localhost:3000/api/external_data",
                        "method": "GET"
                      }
                    }
                  },
                  "event_pattern": [
                    [
                      {
                        "field": "component",
                        "cond": {
                          "type": "eq",
                          "value": "component-example"
                        }
                      }
                    ]
                  ],
                  "description": "enrichment rule with external api data",
                  "priority": 1,
                  "enabled": true,
                  "config": {
                    "actions": [
                      {
                        "type": "set_entity_info_from_template",
                        "name": "title",
                        "value": "{{ .ExternalData.title.title }}",
                        "description": "title from external api"
                      }
                    ],
                    "on_success": "pass",
                    "on_failure": "pass"
                  }
                }
              CreateChangeEntityRule:
                summary: Create a change_entity rule
                description: Create a change_entity rule.
                value: {
                  "description": "change_entity rule example",
                  "type": "change_entity",
                  "event_pattern": [
                    [
                      {
                        "field": "connector",
                        "cond": {
                          "type": "eq",
                          "value": "test_connector"
                        }
                      },
                      {
                        "field": "extra.customer_tags",
                        "field_type": "string",
                        "cond": {
                          "type": "regexp",
                          "value": "CMDB:(?P<SI_CMDB>.*?)($|,)"
                        }
                      }
                    ]
                  ],
                  "config": {
                    "component": "{{ .RegexMatch.ExtraInfos.customer_tags.SI_CMDB }}"
                  },
                  "enabled": true
                }
              CreateRuleWithInterval:
                summary: Create a drop rule with interval
                description: Create a drop rule with interval.
                value: {
                  "type": "drop",
                  "start": 1663656515,
                  "stop": 1663657515,
                  "event_pattern":[[
                    {
                      "field": "event_type",
                      "cond": {
                        "type": "eq",
                        "value": "check"
                      }
                    },
                    {
                      "field": "component",
                      "cond": {
                        "type": "eq",
                        "value": "example-component"
                      }
                    }
                  ]],
                  "description": "drop rule example",
                  "priority": 1,
                  "enabled": true
                }
              CreateRuleWithRRule:
                summary: Create a drop rule with rrule
                description: Create a drop rule with rrule.
                value: {
                  "type": "drop",
                  "start": 1663656515,
                  "stop": 1663657515,
                  "rrule": "FREQ=WEEKLY",
                  "event_pattern":[[
                    {
                      "field": "event_type",
                      "cond": {
                        "type": "eq",
                        "value": "check"
                      }
                    },
                    {
                      "field": "component",
                      "cond": {
                        "type": "eq",
                        "value": "example-component"
                      }
                    }
                  ]],
                  "description": "drop rule example",
                  "priority": 1,
                  "enabled": true
                }
              CreateRuleWithExdate:
                summary: Create a drop rule with exdate
                description: Create a drop rule with exdate.
                value: {
                  "type": "drop",
                  "start": 1663656515,
                  "stop": 1663657515,
                  "rrule": "FREQ=WEEKLY",
                  "event_pattern":[[
                    {
                      "field": "event_type",
                      "cond": {
                        "type": "eq",
                        "value": "check"
                      }
                    },
                    {
                      "field": "component",
                      "cond": {
                        "type": "eq",
                        "value": "example-component"
                      }
                    }
                  ]],
                  "description": "drop rule example",
                  "priority": 1,
                  "enabled": true,
                  "exdates": [
                    {
                      "begin": 1663656815,
                      "end": 1663657515
                    }
                  ]
                }
              CreateRuleWithException:
                summary: Create a drop rule with exception
                description: Create a drop rule with exception.
                value: {
                  "type": "drop",
                  "start": 1663656515,
                  "stop": 1663657515,
                  "rrule": "FREQ=WEEKLY",
                  "event_pattern":[[
                    {
                      "field": "event_type",
                      "cond": {
                        "type": "eq",
                        "value": "check"
                      }
                    },
                    {
                      "field": "component",
                      "cond": {
                        "type": "eq",
                        "value": "example-component"
                      }
                    }
                  ]],
                  "description": "drop rule example",
                  "priority": 1,
                  "enabled": true,
                  "exceptions": [
                    "test-exception"
                  ]
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/eventfilter.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /eventfilter/rules/{id}:
    get:
      tags:
        - eventfilters
      summary: Get eventfilter by id
      description: Get eventfilter by id
      operationId: eventfilters-get-by-id
      parameters:
        - name: id
          in: path
          description: eventfilter id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/eventfilter.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - eventfilters
      summary: Update eventfilter by id
      description: Update eventfilter by id
      operationId: eventfilters-update-by-id
      parameters:
        - name: id
          in: path
          description: eventfilter id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/eventfilter.Response'
            examples:
              Update:
                summary: Update
                description: Update an eventfilter.
                value: {
                  "description": "test update",
                  "type": "enrichment",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "updated pattern"
                        }
                      }
                    ]
                  ],
                  "priority": 0,
                  "enabled": true,
                  "config": {
                    "actions": [
                      {
                        "type": "set_field",
                        "name": "connector",
                        "value": "kafka_connector"
                      }
                    ],
                    "on_success": "pass",
                    "on_failure": "pass"
                  },
                  "external_data": {
                    "test": {
                      "type": "mongo"
                    }
                  }
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/eventfilter.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - eventfilters
      summary: Delete eventfilter by id
      description: Delete eventfilter by id
      operationId: eventfilters-delete-by-id
      parameters:
        - name: id
          in: path
          description: eventfilter id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /file:
    get:
      tags:
        - files
      summary: List files by ID
      description: Get list of file objects by ID
      operationId: files-list
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'schemas_swagger.yaml#/definitions/file.File'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    post:
      tags:
        - files
      summary: Upload files
      description: Upload files
      operationId: file-upload
      parameters:
        - name: public
          in: query
          description: file visibility
          schema:
            type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'schemas_swagger.yaml#/definitions/file.File'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /file-access:
    get:
      tags:
        - auth
      summary: Get file access
      description: Get file access
      operationId: auth-get-file-access
      responses:
        204:
          description: OK
      security:
        - BearerAuth: [ ]
  /file/{id}:
    get:
      tags:
        - files
      summary: Get file by ID
      description: Get file content by ID or download with file name
      operationId: files-get
      parameters:
        - name: id
          in: path
          description: file id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - files
      summary: Delete file
      description: Delete file by ID
      operationId: files-delete
      parameters:
        - name: id
          in: path
          description: file id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /flapping-rules:
    get:
      tags:
        - flappingrules
      summary: Find all flapping rule
      description: Get paginated list of flapping rule
      operationId: flappingrules-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/flappingrule.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    post:
      tags:
        - flappingrules
      summary: Create flapping rule
      description: Create flapping rule
      operationId: flappingrules-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/flappingrule.CreateRequest'
            examples:
              create:
                summary: Create flapping rule
                description: Create flapping rule
                value: {
                  "name": "test-flapping-rule-name",
                  "description": "test-flapping-rule-description",
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "test-flapping-rule-pattern"
                        }
                      }
                    ]
                  ],
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "test-flapping-rule-resource"
                        }
                      }
                    ]
                  ],
                  "duration": {
                    "value": 10,
                    "unit": "s"
                  },
                  "freq_limit": 3,
                  "priority": 5
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/flappingrule.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /flapping-rules/{id}:
    get:
      tags:
        - flappingrules
      summary: Get flapping rule by id
      description: Get flapping rule by id
      operationId: flappingrules-get-by-id
      parameters:
        - name: id
          in: path
          description: flapping rule id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/flappingrule.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - flappingrules
      summary: Update flapping rule by id
      description: Update flapping rule by id
      operationId: flappingrules-update-by-id
      parameters:
        - name: id
          in: path
          description: flapping rule id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/flappingrule.UpdateRequest'
            examples:
              update:
                summary: Update flapping rule
                description: Update flapping rule
                value: {
                  "name": "test-flapping-rule-name",
                  "description": "test-flapping-rule-description",
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "test-flapping-rule-pattern"
                        }
                      }
                    ]
                  ],
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "test-flapping-rule-resource"
                        }
                      }
                    ]
                  ],
                  "duration": {
                    "value": 10,
                    "unit": "s"
                  },
                  "freq_limit": 3,
                  "priority": 5
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/flappingrule.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - flappingrules
      summary: Delete flapping rule by id
      description: Delete flapping rule by id
      operationId: flappingrules-delete-by-id
      parameters:
        - name: id
          in: path
          description: flapping rule id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /idle-rules:
    get:
      tags:
        - idlerules
      summary: Find idle rules
      description: Get paginated list of idle rules
      operationId: idlerules-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/idlerule.Rule'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - idlerules
      summary: Create idle rule
      description: Create idle rule
      operationId: idlerules-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/idlerule.EditRequest'
            examples:
              alarm:
                summary: Alarm rule
                description: Create an alarm rule.
                value: {
                  "name": "test-idle-rule-name",
                  "description": "test-idle-rule-description",
                  "type": "alarm",
                  "alarm_condition": "last_event",
                  "enabled": true,
                  "priority": 20,
                  "duration": {
                    "value": 3,
                    "unit": "s"
                  },
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "test-idle-rule-alarm"
                        }
                      }
                    ]
                  ],
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "test-idle-rule-resource"
                        }
                      }
                    ]
                  ],
                  "operation": {
                    "type": "snooze",
                    "parameters": {
                      "output": "test-idle-rule-operation-output",
                      "duration": {
                        "value": 3,
                        "unit": "s"
                      }
                    }
                  },
                  "disable_during_periods": ["pause"]
                }
              entity:
                summary: Entity rule
                description: Create an entity rule.
                value: {
                  "name": "test-idle-rule-name",
                  "description": "test-idle-rule-description",
                  "type": "entity",
                  "enabled": true,
                  "priority": 21,
                  "duration": {
                    "value": 3,
                    "unit": "s"
                  },
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "test-idle-rule-resource"
                        }
                      }
                    ]
                  ],
                  "disable_during_periods": ["pause"]
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/idlerule.Rule'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /idle-rules/{id}:
    get:
      tags:
        - idlerules
      summary: Get idle rule by id
      description: Get idle rule by id
      operationId: idlerules-get-by-id
      parameters:
        - name: id
          in: path
          description: rule id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/idlerule.Rule'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - idlerules
      summary: Update idle rule by id
      description: Update idle rule by id
      operationId: idlerules-update-by-id
      parameters:
        - name: id
          in: path
          description: rule id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/idlerule.EditRequest'
            examples:
              alarm:
                summary: Alarm rule
                description: Update an alarm rule.
                value: {
                  "name": "test-idle-rule-name",
                  "description": "test-idle-rule-description",
                  "type": "alarm",
                  "alarm_condition": "last_event",
                  "enabled": true,
                  "priority": 20,
                  "duration": {
                    "value": 3,
                    "unit": "s"
                  },
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "test-idle-rule-alarm"
                        }
                      }
                    ]
                  ],
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "test-idle-rule-resource"
                        }
                      }
                    ]
                  ],
                  "operation": {
                    "type": "snooze",
                    "parameters": {
                      "output": "test-idle-rule-operation-output",
                      "duration": {
                        "value": 3,
                        "unit": "s"
                      }
                    }
                  },
                  "disable_during_periods": ["pause"]
                }
              entity:
                summary: Entity rule
                description: Update an entity rule.
                value: {
                  "name": "test-idle-rule-name",
                  "description": "test-idle-rule-description",
                  "type": "entity",
                  "enabled": true,
                  "priority": 21,
                  "duration": {
                    "value": 3,
                    "unit": "s"
                  },
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "test-idle-rule-resource"
                        }
                      }
                    ]
                  ],
                  "disable_during_periods": ["pause"]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/idlerule.Rule'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - idlerules
      summary: Delete idle rule by id
      description: Delete idle rule by id
      operationId: idlerules-delete-by-id
      parameters:
        - name: id
          in: path
          description: rule id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /internal/user_interface:
    put:
      tags:
        - internal
      summary: update user interface
      description: update user interface
      operationId: internal-update-user-interface
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/appinfo.UserInterfaceConf'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/appinfo.UserInterfaceConf'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    delete:
      tags:
        - internal
      summary: delete user interface
      description: delete user interface
      operationId: internal-delete-user-interface
      responses:
        204:
          description: OK
  /logged-user-count:
    get:
      tags:
        - auth
      summary: Get logged user count
      description: Get logged user count
      operationId: auth-logged-user-count
      responses:
        204:
          description: OK
  /login:
    post:
      tags:
        - auth
      summary: Log in
      description: Log in
      operationId: auth-login
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/auth.loginRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/auth.loginResponse'
      security:
        - { }
  /logout:
    post:
      tags:
        - auth
      summary: Log out
      description: Log out
      operationId: auth-logout
      responses:
        204:
          description: OK
      security:
        - BearerAuth: [ ]
  /manual-meta-alarms:
    get:
      tags:
        - alarms
      summary: Find manual meta alarms
      description: Get manual meta alarms.
      operationId: alarms-find-meta-alarms
      parameters:
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'schemas_swagger.yaml#/definitions/alarm.ManualResponse'
  /message-rate-stats:
    get:
      tags:
        - message-rate-stats
      summary: Find message rate stats
      description: Get paginated list of stats
      operationId: message-rate-stats-find-all
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: integer
        - name: interval
          in: query
          required: true
          schema:
            type: string
        - name: to
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/messageratestats.StatsListResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /notification:
    get:
      tags:
        - notification
      summary: Get notification settings
      description: Get notification settings
      operationId: notification-get
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/notification.Notification'
    put:
      tags:
        - notification
      summary: Update notification settings
      description: Update notification settings
      operationId: notification-update
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/notification.Notification'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/notification.Notification'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /patterns-count:
    post:
      tags:
        - saved-patterns
      summary: Count matches
      description: Count matches of pattern
      operationId: saved-patterns-count
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pattern.CountRequest'
            examples:
              count:
                summary: Count
                description: Count matches of patterns.
                value: {
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "cps_component"
                        }
                      }
                    ]
                  ],
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource"
                        }
                      }
                    ]
                  ],
                  "pbehavior_pattern": [
                    [
                      {
                        "field": "pbehavior_info.type",
                        "cond": {
                          "type": "eq",
                          "value": "default_maintenance"
                        }
                      }
                    ]
                  ]
                }
        required: true
      responses:
        200:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pattern.CountResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /patterns:
    get:
      tags:
        - saved-patterns
      summary: Find all saved patterns
      description: Get paginated list of saved patterns
      operationId: saved-patterns-find-all
      parameters:
        - name: corporate
          in: query
          schema:
            type: boolean
        - name: type
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/pattern.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - saved-patterns
      summary: Create saved pattern
      description: Create saved pattern
      operationId: saved-patterns-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pattern.EditRequest'
            examples:
              alarm:
                summary: Alarm pattern
                description: Create an alarm pattern.
                value: {
                  "title": "Alarm pattern",
                  "type": "alarm",
                  "is_corporate": false,
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "cps_component"
                        }
                      },
                      {
                        "field": "v.duration",
                        "cond": {
                          "type": "gt",
                          "value": {
                            "value": 3,
                            "unit": "m"
                          }
                        }
                      },
                      {
                        "field": "v.ack",
                        "cond": {
                          "type": "eq",
                          "value": false
                        }
                      }
                    ]
                  ]
                }
              entity:
                summary: Entity pattern
                description: Create a entity pattern.
                value: {
                  "title": "Entity pattern",
                  "type": "entity",
                  "is_corporate": false,
                  "entity_pattern": [
                    [
                      {
                        "field": "_id",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource/cps_component"
                        }
                      },
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource"
                        }
                      },
                      {
                        "field": "category",
                        "cond": {
                          "type": "eq",
                          "value": "293d7b83-e622-40d9-95ef-86b06eda3746"
                        }
                      },
                      {
                        "field": "type",
                        "cond": {
                          "type": "eq",
                          "value": "resource"
                        }
                      },
                      {
                        "field": "infos.custom_name",
                        "field_type": "string",
                        "cond": {
                          "type": "eq",
                          "value": "custom"
                        }
                      }
                    ]
                  ]
                }
              pbehavior:
                summary: Pbehavior pattern
                description: Create a pbehavior pattern.
                value: {
                  "title": "Pbehavior pattern",
                  "type": "pbehavior",
                  "is_corporate": false,
                  "pbehavior_pattern": [
                    [
                      {
                        "field": "pbehavior_info.id",
                        "cond": {
                          "type": "eq",
                          "value": "f7501e0a-a04d-46f1-bf10-4a85c4b37433"
                        }
                      },
                      {
                        "field": "pbehavior_info.type",
                        "cond": {
                          "type": "eq",
                          "value": "default_maintenance"
                        }
                      },
                      {
                        "field": "pbehavior_info.reason",
                        "cond": {
                          "type": "eq",
                          "value": "default_reason"
                        }
                      }
                    ]
                  ]
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pattern.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /patterns/{id}:
    get:
      tags:
        - saved-patterns
      summary: Get saved pattern by id
      description: Get saved pattern by id
      operationId: saved-patterns-get-by-id
      parameters:
        - name: id
          in: path
          description: pattern id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pattern.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - saved-patterns
      summary: Update saved pattern by id
      description: Update saved pattern by id
      operationId: saved-patterns-update-by-id
      parameters:
        - name: id
          in: path
          description: pattern id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pattern.EditRequest'
            examples:
              update:
                summary: Update
                description: Update a pattern.
                value: {
                  "title": "Alarm pattern",
                  "type": "alarm",
                  "is_corporate": false,
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "cps_component"
                        }
                      },
                      {
                        "field": "v.duration",
                        "cond": {
                          "type": "gt",
                          "value": {
                            "value": 3,
                            "unit": "m"
                          }
                        }
                      },
                      {
                        "field": "v.ack",
                        "cond": {
                          "type": "eq",
                          "value": false
                        }
                      }
                    ]
                  ]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pattern.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - saved-patterns
      summary: Delete saved pattern by id
      description: Delete saved pattern by id
      operationId: saved-patterns-delete-by-id
      parameters:
        - name: id
          in: path
          description: pattern id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /pbehavior-comments:
    post:
      tags:
        - pbehavior-comments
      summary: Create pbehavior comment
      description: Create pbehavior comment
      operationId: pbehavior-comments-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehaviorcomment.Request'
            examples:
              create:
                summary: Create
                description: Create a comment
                value: {
                  "pbehavior": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101",
                  "message": "A comment for the pbehavior"
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Comment'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /pbehavior-comments/{id}:
    delete:
      tags:
        - pbehavior-comments
      summary: Delete pbehavior comment by id
      description: Delete pbehavior comment by id
      operationId: pbehavior-comment-delete-by-id
      parameters:
        - name: id
          in: path
          description: pbehavior comment id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /pbehavior-exceptions:
    get:
      tags:
        - pbehavior-exceptions
      summary: Find all pbehavior exceptions
      description: Get paginated list of behavior exceptions
      operationId: pbehavior-exceptions-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
        - name: with_flags
          in: query
          description: with flags
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/pbehaviorexception.Exception'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - pbehavior-exceptions
      summary: Create pbehavior exception
      description: Create pbehavior exception
      operationId: pbehavior-exceptions-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehaviorexception.Request'
            examples:
              create:
                summary: Create
                description: Create an exception
                value: {
                  "name": "Public holidays 2022",
                  "description": "New Year, Easter, Christmas",
                  "exdates": [
                    {
                      "begin": 1640991600,
                      "end": 1641078000,
                      "type": "default_inactive"
                    },
                    {
                      "begin": 1650232800,
                      "end": 1650319200,
                      "type": "default_inactive"
                    },
                    {
                      "begin": 1671922800,
                      "end": 1672009200,
                      "type": "default_inactive"
                    }
                  ]
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehaviorexception.Exception'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /pbehavior-exceptions/{id}:
    get:
      tags:
        - pbehavior-exceptions
      summary: Get pbehavior exception by id
      description: Get pbehavior exception by id
      operationId: pbehavior-exceptions-get-by-id
      parameters:
        - name: id
          in: path
          description: exception id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehaviorexception.Exception'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - pbehavior-exceptions
      summary: Update behavior exception by id
      description: Update behavior exception by id
      operationId: pbehavior-exceptions-update-by-id
      parameters:
        - name: id
          in: path
          description: exception id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehaviorexception.Request'
            examples:
              update:
                summary: Update
                description: Update an exception
                value: {
                  "name": "Public holidays 2022",
                  "description": "New Year, Easter, Christmas",
                  "exdates": [
                    {
                      "begin": 1640991600,
                      "end": 1641078000,
                      "type": "default_inactive"
                    },
                    {
                      "begin": 1650232800,
                      "end": 1650319200,
                      "type": "default_inactive"
                    },
                    {
                      "begin": 1671922800,
                      "end": 1672009200,
                      "type": "default_inactive"
                    }
                  ]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehaviorexception.Exception'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - pbehavior-exceptions
      summary: Delete pbehavior exception by id
      description: Delete pbehavior exception by id
      operationId: pbehavior-exceptions-delete-by-id
      parameters:
        - name: id
          in: path
          description: exception id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /pbehavior-ics/{id}:
    get:
      tags:
        - pbehavior-ics
      summary: Get pbehavior ICS by id
      description: Get pbehavior ICS by id
      operationId: pbehavior-ics-get-by-id
      parameters:
        - name: id
          in: path
          description: pbehavior id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/calendar:
              schema:
                type: string
                format: binary
        404:
          description: Not Found
          content:
            application/octet-stream:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /pbehavior-reasons:
    get:
      tags:
        - pbehavior-reasons
      summary: Find pbehavior reasons
      description: Get paginated list of behavior reasons
      operationId: pbehavior-reasons-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
        - name: with_flags
          in: query
          description: with flags
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/pbehaviorreason.Reason'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - pbehavior-reasons
      summary: Create pbehavior reason
      description: Create pbehavior reason
      operationId: pbehavior-reasons-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehaviorreason.Request'
            examples:
              create:
                summary: Create
                description: Create a reason
                value: {
                  "name": "Deployment",
                  "description": "New version deployment"
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehaviorreason.Reason'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /pbehavior-reasons/{id}:
    get:
      tags:
        - pbehavior-reasons
      summary: Get pbehavior reason by id
      description: Get pbehavior reason by id
      operationId: pbehavior-reasons-get-by-id
      parameters:
        - name: id
          in: path
          description: reason id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehaviorreason.Reason'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - pbehavior-reasons
      summary: Update behavior reason by id
      description: Update behavior reason by id
      operationId: pbehavior-reasons-update-by-id
      parameters:
        - name: id
          in: path
          description: reason id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehaviorreason.Request'
            examples:
              update:
                summary: Update
                description: Update a reason
                value: {
                  "name": "Deployment",
                  "description": "New version deployment"
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehaviorreason.Reason'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - pbehavior-reasons
      summary: Delete pbehavior reason by id
      description: Delete pbehavior reason by id
      operationId: pbehavior-reasons-delete-by-id
      parameters:
        - name: id
          in: path
          description: reason id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /pbehavior-timespans:
    post:
      tags:
        - pbehavior-timespans
      summary: Get all pbehavior timespans
      description: 'Get time spans of calendar event within view span; {by_date: false}
        adds exception spans with types, {by_date: true} merges adjacent spans if
        gap between sequential ones less than 24 hours'
      operationId: pbehavior-timespans-get-all
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehaviortimespan.TimespansRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'schemas_swagger.yaml#/definitions/pbehaviortimespan.ItemResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /pbehavior-types:
    get:
      tags:
        - pbehavior-types
      summary: Find pbehavior types
      description: Get paginated list of behavior types
      operationId: pbehavior-types-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
        - name: with_flags
          in: query
          description: with flags
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Type'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - pbehavior-types
      summary: Create pbehavior type
      description: Create pbehavior type
      operationId: pbehavior-types-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehaviortype.EditRequest'
            examples:
              create:
                summary: Create
                description: Create a type
                value: {
                  "name": "Unplanned maintenance",
                  "description": "Maintenances which are not on the schedule",
                  "type": "maintenance",
                  "priority": 10,
                  "icon_name": "broken_image"
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Type'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /pbehavior-types/{id}:
    get:
      tags:
        - pbehavior-types
      summary: Get pbehavior type by id
      description: Get pbehavior type by id
      operationId: pbehavior-types-get-by-id
      parameters:
        - name: id
          in: path
          description: type id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Type'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - pbehavior-types
      summary: Update behavior type by id
      description: Update behavior type by id
      operationId: pbehavior-types-update-by-id
      parameters:
        - name: id
          in: path
          description: type id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehaviortype.EditRequest'
            examples:
              update:
                summary: Update
                description: Update a type
                value: {
                  "name": "Unplanned maintenance",
                  "description": "Maintenances which are not on the schedule",
                  "type": "maintenance",
                  "priority": 10,
                  "icon_name": "broken_image"
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Type'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - pbehavior-types
      summary: Delete pbehavior type by id
      description: Delete pbehavior type by id
      operationId: pbehavior-types-delete-by-id
      parameters:
        - name: id
          in: path
          description: type id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /pbehaviors:
    delete:
      tags:
        - pbehaviors
      summary: Delete pbehavior by name
      description: Delete pbehavior by name
      operationId: pbehaviors-delete-by-name
      parameters:
        - name: name
          in: query
          description: pbehavior name
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    get:
      tags:
        - pbehaviors
      summary: Find all pbehaviors
      description: Get paginated list of pbehaviors
      operationId: pbehaviors-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - pbehaviors
      summary: Create pbehavior
      description: Create pbehavior
      operationId: pbehaviors-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehavior.CreateRequest'
            examples:
              maintenance:
                summary: Maintenance period
                description: Create a pbehavior with one maintenance period
                value: {
                  "name": "Maintenance period",
                  "enabled": true,
                  "tstart": 1591172881,
                  "tstop": 1591536400,
                  "rrule": "",
                  "type": "default_Maintenance",
                  "reason": "default_reason",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource"
                        }
                      }
                    ]
                  ]
                }
              pause:
                summary: Pause period
                description: Create a pbehavior with endless pause period
                value: {
                  "name": "Pause period",
                  "enabled": true,
                  "tstart": 1591172881,
                  "tstop": null,
                  "rrule": "",
                  "type": "default_pause",
                  "reason": "default_reason",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource"
                        }
                      }
                    ]
                  ]
                }
              inactive:
                summary: Inactive period
                description: Create a pbehavior with weekend inactive periods
                value: {
                  "name": "Inactive period",
                  "enabled": true,
                  "tstart": 1651269600,
                  "tstop": 1651442400,
                  "rrule": "FREQ=WEEKLY",
                  "type": "default_inactive",
                  "reason": "default_reason",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource"
                        }
                      }
                    ]
                  ]
                }
              active:
                summary: Active period
                description: Create a pbehavior with daily active periods except some days
                value: {
                  "name": "Active period",
                  "enabled": true,
                  "tstart": 1650855600,
                  "tstop": 1650891600,
                  "rrule": "FREQ=DAILY",
                  "type": "default_active",
                  "reason": "default_reason",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource"
                        }
                      }
                    ]
                  ],
                  "exdates": [
                    {
                      "begin": 1651460400,
                      "end": 1651496400,
                      "type": "default_maintenance"
                    }
                  ],
                  "exceptions": [ "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101" ]
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /pbehaviors/{id}:
    get:
      tags:
        - pbehaviors
      summary: Get pbehavior by id
      description: Get pbehavior by id
      operationId: pbehaviors-get-by-id
      parameters:
        - name: id
          in: path
          description: pbehavior id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - pbehaviors
      summary: Update behavior by id
      description: Update behavior by id
      operationId: pbehaviors-update-by-id
      parameters:
        - name: id
          in: path
          description: pbehavior id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehavior.UpdateRequest'
            examples:
              update:
                summary: Update
                description: Update a pbehavior
                value: {
                  "name": "Active period",
                  "enabled": true,
                  "tstart": 1650855600,
                  "tstop": 1650891600,
                  "rrule": "FREQ=DAILY",
                  "type": "default_active",
                  "reason": "default_reason",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource"
                        }
                      }
                    ]
                  ],
                  "exdates": [
                    {
                      "begin": 1651460400,
                      "end": 1651496400,
                      "type": "default_maintenance"
                    }
                  ],
                  "exceptions": [ "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101" ]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - pbehaviors
      summary: Delete pbehavior by id
      description: Delete pbehavior by id
      operationId: pbehaviors-delete-by-id
      parameters:
        - name: id
          in: path
          description: pbehavior id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    patch:
      tags:
        - pbehaviors
      summary: Patch partial set of behavior attributes by id
      description: Patch partial set of behavior attributes by id
      operationId: pbehaviors-patch-by-id
      parameters:
        - name: id
          in: path
          description: pbehavior id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/pbehavior.PatchRequest'
            examples:
              update:
                summary: Update interval
                description: Update only a pbehavior interval
                value: {
                  "tstart": 1650855600,
                  "tstop": 1650891600
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/pbehavior.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /pbehaviors/{id}/entities:
    get:
      tags:
        - pbehaviors
      summary: Find entities by pbehavior id
      description: Find entities by pbehavior id
      operationId: pbehaviors-find-entities
      parameters:
        - name: id
          in: path
          description: pbehavior id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/entity.Entity'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /permissions:
    get:
      tags:
        - permissions
      summary: Find permissions
      description: Get paginated list of permissions
      operationId: permissions-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/permission.Permission'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /playlists:
    get:
      tags:
        - playlists
      summary: Find all playlist
      description: Get paginated list of playlist
      operationId: playlists-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/playlist.Playlist'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - playlists
      summary: Create playlist
      description: Create playlist
      operationId: playlists-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/playlist.EditRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/playlist.Playlist'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /playlists/{id}:
    get:
      tags:
        - playlists
      summary: Get playlist by id
      description: Get playlist by id
      operationId: playlists-get-by-id
      parameters:
        - name: id
          in: path
          description: playlist id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/playlist.Playlist'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - playlists
      summary: Update playlist by id
      description: Update playlist by id
      operationId: playlists-update-by-id
      parameters:
        - name: id
          in: path
          description: playlist id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/playlist.Playlist'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/playlist.Playlist'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - playlists
      summary: Delete playlist by id
      description: Delete playlist by id
      operationId: playlists-delete-by-id
      parameters:
        - name: id
          in: path
          description: playlist id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /resolve-rules:
    get:
      tags:
        - resolverules
      summary: Find all resolve rule
      description: Get paginated list of resolve rule
      operationId: resolverules-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/resolverule.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    post:
      tags:
        - resolverules
      summary: Create resolve rule
      description: Create resolve rule
      operationId: resolverules-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/resolverule.CreateRequest'
            examples:
              create:
                summary: Create a resolve rule
                description: Create a resolve rule
                value: {
                  "name": "test-resolve-rule-name",
                  "description": "test-resolve-rule-desc",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "test-resource-name"
                        }
                      }
                    ]
                  ],
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "test-component"
                        }
                      }
                    ]
                  ],
                  "duration": {
                    "value": 2,
                    "unit": "s"
                  },
                  "priority": 10
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/resolverule.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /resolve-rules/{id}:
    get:
      tags:
        - resolverules
      summary: Get resolve rule by id
      description: Get resolve rule by id
      operationId: resolverules-get-by-id
      parameters:
        - name: id
          in: path
          description: resolve rule id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/resolverule.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - resolverules
      summary: Update resolve rule by id
      description: Update resolve rule by id
      operationId: resolverules-update-by-id
      parameters:
        - name: id
          in: path
          description: resolve rule id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/resolverule.UpdateRequest'
            examples:
              update:
                summary: Update a resolve rule
                description: Update a resolve rule
                value: {
                  "name": "test-resolve-rule-name-updated",
                  "description": "test-resolve-rule-desc-updated",
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "test-resource-name-updated"
                        }
                      }
                    ]
                  ],
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "test-component-updated"
                        }
                      }
                    ]
                  ],
                  "duration": {
                    "value": 2,
                    "unit": "s"
                  },
                  "priority": 10
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/resolverule.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - resolverules
      summary: Delete resolve rule by id
      description: Delete resolve rule by id
      operationId: resolverules-delete-by-id
      parameters:
        - name: id
          in: path
          description: resolve rule id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /resolved-alarms:
    get:
      tags:
        - alarms
      summary: Find resolved alarms of entity
      description: Get paginated list of alarms.
      operationId: alarms-find-resolved-alarms
      parameters:
        - name: _id
          in: query
          description: entity id
          required: true
          schema:
            type: string
        - name: tstart
          in: query
          schema:
            type: integer
        - name: tstop
          in: query
          schema:
            type: integer
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/alarm.Alarm'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /roles:
    get:
      tags:
        - roles
      summary: Find roles
      description: Get paginated list of roles
      operationId: roles-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/role.Role'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - roles
      summary: Create role
      description: Create role
      operationId: roles-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/role.CreateRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/role.Role'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /roles/{id}:
    get:
      tags:
        - roles
      summary: Get role by id
      description: Get role by id
      operationId: roles-get-by-id
      parameters:
        - name: id
          in: path
          description: role id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/role.Role'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - roles
      summary: Update role by id
      description: Update role by id
      operationId: roles-update-by-id
      parameters:
        - name: id
          in: path
          description: role id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/role.EditRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/role.Role'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - roles
      summary: Delete role by id
      description: Delete role by id
      operationId: roles-delete-by-id
      parameters:
        - name: id
          in: path
          description: role id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /scenarios:
    get:
      tags:
        - scenarios
      summary: Find scenarios
      description: Get paginated list of scenarios
      operationId: scenarios-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/scenario.Scenario'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - scenarios
      summary: Create scenario
      description: Create scenario
      operationId: scenarios-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/scenario.EditRequest'
            examples:
              ack:
                summary: Acknowledge action
                description: Create a scenario with acknowledge action.
                value: {
                  "name": "Scenario with acknowledge action",
                  "comment": "The scenario acknowledges an alarm on create",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "create" ],
                  "actions": [
                    {
                      "type": "ack",
                      "parameters": {
                        "output": "The alarm is acknowledged by scenario"
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              ackremove:
                summary: Acknowledge remove action
                description: Create a scenario with acknowledge remove action.
                value: {
                  "name": "Scenario with acknowledge remove action",
                  "comment": "The scenario removes an acknowledge of an alarm on state increase",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "stateinc" ],
                  "actions": [
                    {
                      "type": "ackremove",
                      "parameters": {
                        "output": "The alarm is unacknowledged by scenario"
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              assocticket:
                summary: Associate ticket action
                description: Create a scenario with associate ticket action.
                value: {
                  "name": "Scenario with associate ticket action",
                  "comment": "The scenario adds a ticket to an alarm on activate",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "activate" ],
                  "actions": [
                    {
                      "type": "assocticket",
                      "parameters": {
                        "output": "The ticket is added to the alarm by scenario",
                        "ticket": "ENV-116"
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              cancel:
                summary: Cancel action
                description: Create a scenario with cancel action.
                value: {
                  "name": "Scenario with cancel action",
                  "comment": "The scenario cancels an alarm on state decrease",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "statedec" ],
                  "actions": [
                    {
                      "type": "cancel",
                      "parameters": {
                        "output": "The alarm is canceled by scenario"
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 1
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              changestate:
                summary: Change state action
                description: Create a scenario with change state action.
                value: {
                  "name": "Scenario with change state action",
                  "comment": "The scenario changes a state of an alarm on acknowledge",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "ack" ],
                  "actions": [
                    {
                      "type": "changestate",
                      "parameters": {
                        "output": "The state of the alarm is changed by scenario",
                        "state": 3
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 1
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              pbehavior:
                summary: Pbehavior action
                description: Create a scenario with pbehavior action.
                value: {
                  "name": "Scenario with pbehavior action",
                  "comment": "The scenario creates a pbehavior for an alarm on create",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "create" ],
                  "actions": [
                    {
                      "type": "pbehavior",
                      "parameters": {
                        "name": "The pbehavior is created by scenario",
                        "reason": "default_reason",
                        "type": "default_pause",
                        "start_on_trigger": true,
                        "duration": {
                          "value": 10,
                          "unit": "m"
                        }
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              snooze:
                summary: Snooze action
                description: Create a scenario with snooze action.
                value: {
                  "name": "Scenario with snooze action",
                  "comment": "The scenario snoozes an alarm on create",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "create" ],
                  "actions": [
                    {
                      "type": "snooze",
                      "parameters": {
                        "output": "The alarm is snoozed by scenario",
                        "duration": {
                          "value": 10,
                          "unit": "m"
                        }
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              webhook:
                summary: Webhook action
                description: Create a scenario with webhook action.
                value: {
                  "name": "Scenario with webhook action",
                  "comment": "The scenario does webhook request for an alarm on declare ticket",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "declareticket" ],
                  "actions": [
                    {
                      "type": "webhook",
                      "parameters": {
                        "request": {
                          "method": "POST",
                          "url": "https://test-rest-api.com/ticket",
                          "auth": {
                            "username": "admin",
                            "password": "admin"
                          },
                          "headers": { "Content-Type": "application/json" },
                          "payload": "{\"service\":\"{{ .Alarm.Value.Resource }}\",\"host\":\"{{ .Alarm.Value.Component }}\",\"group\":\"{{ .Entity.Infos.group.Value }}\",\"change\":\"{{ .AdditionalData.AlarmChangeType }}\"}"
                        },
                        "declare_ticket": {
                          "empty_response": false,
                          "is_regexp": false,
                          "ticket_id": "id",
                          "external_link": "link"
                        },
                        "retry_count": 3,
                        "retry_delay": {
                          "value": 3,
                          "unit": "s"
                        }
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/scenario.Scenario'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /scenarios/{id}:
    get:
      tags:
        - scenarios
      summary: Get scenario by id
      description: Get scenario by id
      operationId: scenarios-get-by-id
      parameters:
        - name: id
          in: path
          description: scenario id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/scenario.Scenario'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - scenarios
      summary: Update scenario by id
      description: Update scenario by id
      operationId: scenarios-update-by-id
      parameters:
        - name: id
          in: path
          description: scenario id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/scenario.EditRequest'
            examples:
              ack:
                summary: Acknowledge action
                description: Update a scenario with acknowledge action.
                value: {
                  "name": "Scenario with acknowledge action",
                  "comment": "The scenario acknowledges an alarm on create",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "create" ],
                  "actions": [
                    {
                      "type": "ack",
                      "parameters": {
                        "output": "The alarm is acknowledged by scenario"
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              ackremove:
                summary: Acknowledge remove action
                description: Update a scenario with acknowledge remove action.
                value: {
                  "name": "Scenario with acknowledge remove action",
                  "comment": "The scenario removes an acknowledge of an alarm on state increase",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "stateinc" ],
                  "actions": [
                    {
                      "type": "ackremove",
                      "parameters": {
                        "output": "The alarm is unacknowledged by scenario"
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              assocticket:
                summary: Associate ticket action
                description: Update a scenario with associate ticket action.
                value: {
                  "name": "Scenario with associate ticket action",
                  "comment": "The scenario adds a ticket to an alarm on activate",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "activate" ],
                  "actions": [
                    {
                      "type": "assocticket",
                      "parameters": {
                        "output": "The ticket is added to the alarm by scenario",
                        "ticket": "ENV-116"
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              cancel:
                summary: Cancel action
                description: Update a scenario with cancel action.
                value: {
                  "name": "Scenario with cancel action",
                  "comment": "The scenario cancels an alarm on state decrease",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "statedec" ],
                  "actions": [
                    {
                      "type": "cancel",
                      "parameters": {
                        "output": "The alarm is canceled by scenario"
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 1
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              changestate:
                summary: Change state action
                description: Update a scenario with change state action.
                value: {
                  "name": "Scenario with change state action",
                  "comment": "The scenario changes a state of an alarm on acknowledge",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "ack" ],
                  "actions": [
                    {
                      "type": "changestate",
                      "parameters": {
                        "output": "The state of the alarm is changed by scenario",
                        "state": 3
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 1
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              pbehavior:
                summary: Pbehavior action
                description: Update a scenario with pbehavior action.
                value: {
                  "name": "Scenario with pbehavior action",
                  "comment": "The scenario creates a pbehavior for an alarm on create",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "create" ],
                  "actions": [
                    {
                      "type": "pbehavior",
                      "parameters": {
                        "name": "The pbehavior is created by scenario",
                        "reason": "default_reason",
                        "type": "default_pause",
                        "start_on_trigger": true,
                        "duration": {
                          "value": 10,
                          "unit": "m"
                        }
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              snooze:
                summary: Snooze action
                description: Update a scenario with snooze action.
                value: {
                  "name": "Scenario with snooze action",
                  "comment": "The scenario snoozes an alarm on create",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "create" ],
                  "actions": [
                    {
                      "type": "snooze",
                      "parameters": {
                        "output": "The alarm is snoozed by scenario",
                        "duration": {
                          "value": 10,
                          "unit": "m"
                        }
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
              webhook:
                summary: Webhook action
                description: Update a scenario with webhook action.
                value: {
                  "name": "Scenario with webhook action",
                  "comment": "The scenario does webhook request for an alarm on declare ticket",
                  "enabled": true,
                  "priority": 10,
                  "triggers": [ "declareticket" ],
                  "actions": [
                    {
                      "type": "webhook",
                      "parameters": {
                        "request": {
                          "method": "POST",
                          "url": "https://test-rest-api.com/ticket",
                          "auth": {
                            "username": "admin",
                            "password": "admin"
                          },
                          "headers": { "Content-Type": "application/json" },
                          "payload": "{\"service\":\"{{ .Alarm.Value.Resource }}\",\"host\":\"{{ .Alarm.Value.Component }}\",\"group\":\"{{ .Entity.Infos.group.Value }}\",\"change\":\"{{ .AdditionalData.AlarmChangeType }}\"}"
                        },
                        "declare_ticket": {
                          "empty_response": false,
                          "is_regexp": false,
                          "ticket_id": "id",
                          "external_link": "link"
                        },
                        "retry_count": 3,
                        "retry_delay": {
                          "value": 3,
                          "unit": "s"
                        }
                      },
                      "alarm_pattern": [
                        [
                          {
                            "field": "v.state.val",
                            "cond": {
                              "type": "eq",
                              "value": 3
                            }
                          }
                        ]
                      ],
                      "entity_pattern": [
                        [
                          {
                            "field": "type",
                            "cond": {
                              "type": "eq",
                              "value": "resource"
                            }
                          },
                          {
                            "field": "infos.group",
                            "cond": {
                              "type": "eq",
                              "value": "g1"
                            }
                          }
                        ]
                      ],
                      "drop_scenario_if_not_matched": false,
                      "emit_trigger": false
                    }
                  ]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/scenario.Scenario'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - scenarios
      summary: Delete scenario by id
      description: Delete scenario by id
      operationId: scenarios-delete-by-id
      parameters:
        - name: id
          in: path
          description: scenario id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /scenarios/check-priority:
    post:
      tags:
        - scenarios
      summary: Check priority
      description: Check priority
      operationId: scenarios-check-priority
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/scenario.CheckPriorityRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/scenario.CheckPriorityResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /scenarios/minimal-priority:
    get:
      tags:
        - scenarios
      summary: Get minimal priority
      description: Get minimal priority
      operationId: scenarios-get-minimal-priority
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/scenario.GetMinimalPriorityResponse'
  /state-settings:
    get:
      tags:
        - state-settings
      summary: Find all state settings for a widget
      description: Get paginated list of state settings
      operationId: state-settings-list
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/statesettings.StateSetting'
  /state-settings/{id}:
    put:
      tags:
        - state-settings
      summary: Update state setting type by id
      description: Update state setting type by id
      operationId: state-settings-update-by-id
      parameters:
        - name: id
          in: path
          description: type id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/statesettings.StateSettingRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/statesettings.StateSetting'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /user-preferences:
    put:
      tags:
        - userpreference
      summary: Update user preferences by widget id
      description: Update user preferences by widget id
      operationId: userpreference-update-by-widget-id
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/userpreferences.EditRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/userpreferences.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /user-preferences/{id}:
    get:
      tags:
        - userpreference
      summary: Get user preferences by widget id
      description: Get user preferences by widget id
      operationId: userpreference-get-by-id
      parameters:
        - name: id
          in: path
          description: widget id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/userpreferences.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /users:
    get:
      tags:
        - users
      summary: Find users
      description: Get paginated list of users
      operationId: users-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - name: permission
          in: query
          description: role permission
          schema:
            type: string
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/user.User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - users
      summary: Create user
      description: Create user
      operationId: users-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/user.EditRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/user.User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by id
      description: Get user by id
      operationId: users-get-by-id
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/user.User'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - users
      summary: Update user by id
      description: Update user by id
      operationId: users-update-by-id
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/user.EditRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/user.User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - users
      summary: Delete user by id
      description: Delete user by id
      operationId: users-delete-by-id
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /view-copy/{id}:
    post:
      tags:
        - views
      summary: Copy view
      description: Copy view
      operationId: views-copy
      parameters:
        - name: id
          in: path
          description: view id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/view.EditRequest'
            examples:
              copy:
                summary: Copy
                description: Copy a view. View's tabs are also copied.
                value: {
                  "title": "Opened",
                  "description": "Opened alarms",
                  "enabled": true,
                  "group": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101",
                  "periodic_refresh": {
                    "enabled": true,
                    "value": 600,
                    "unit": "m"
                  },
                  "tags": [
                    "alarms"
                  ]
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/view.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /view-export:
    post:
      tags:
        - views
      summary: Export views
      description: Export views
      operationId: views-export
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/view.ExportRequest'
            examples:
              export:
                summary: Export
                description: Export selected groups and views.
                value: {
                  "groups": [
                    {
                      "_id": "15a8df93-fab2-417b-a96c-f624dc6dc204",
                      "views": ["14e237d4-ad08-47a5-87f2-8ffe6741541f", "0be1d3df-816b-4359-a2ba-7bcccb33ed4f"]
                    },
                    {
                      "_id": "98a07c80-a731-4e33-992e-c8aaee3eb529"
                    }
                  ],
                  "views": ["6164d665-7ccb-4ffc-9d46-5350b2fefafe"]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/view.ExportResponse'
  /view-groups:
    get:
      tags:
        - viewgroups
      summary: Find view groups
      description: Get paginated list of view groups
      operationId: viewgroups-find-all
      parameters:
        - name: with_flags
          in: query
          schema:
            type: boolean
        - name: with_views
          in: query
          schema:
            type: boolean
        - name: with_tabs
          in: query
          schema:
            type: boolean
        - name: with_widgets
          in: query
          schema:
            type: boolean
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/viewgroup.ViewGroup'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - viewgroups
      summary: Create view group
      description: Create view group
      operationId: viewgroups-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/viewgroup.EditRequest'
            examples:
              create:
                summary: Create
                description: Create a group.
                value: {
                  "title": "Alarms"
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/viewgroup.ViewGroup'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /view-groups/{id}:
    get:
      tags:
        - viewgroups
      summary: Get view group by id
      description: Get view group by id
      operationId: viewgroups-get-by-id
      parameters:
        - name: id
          in: path
          description: viewgroup id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/viewgroup.ViewGroup'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - viewgroups
      summary: Update view group by id
      description: Update view group by id
      operationId: viewgroups-update-by-id
      parameters:
        - name: id
          in: path
          description: view group id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/viewgroup.EditRequest'
            examples:
              update:
                summary: Update
                description: Update a group.
                value: {
                  "title": "Alarms"
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/viewgroup.ViewGroup'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - viewgroups
      summary: Delete view group by id
      description: Delete view group by id
      operationId: viewgroups-delete-by-id
      parameters:
        - name: id
          in: path
          description: view group id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /view-import:
    post:
      tags:
        - views
      summary: Import views
      description: Import views
      operationId: views-import
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/view.ImportItemRequest'
            examples:
              import:
                summary: Import
                description: Import groups and views.
                value: [
                  {
                    "title": "New group",
                    "views": [
                      {
                        "title": "New view",
                        "description": "New view",
                        "enabled": true,
                        "periodic_refresh": {
                          "enabled": true,
                          "value": 1,
                          "unit": "s"
                        },
                        "tags": [
                          "alarms"
                        ],
                        "tabs": [
                          {
                            "title": "New tab",
                            "widgets": [
                              {
                                "title": "New widget",
                                "type": "AlarmsList",
                                "parameters": {
                                  "mainFilter": "6ccfd7ea-9f04-4c0f-8809-25545cbb579e",
                                  "widgetColumns": [
                                    {
                                      "value": "v.connector",
                                      "label": "Connector"
                                    },
                                    {
                                      "value": "v.connector_name",
                                      "label": "Connector name"
                                    },
                                    {
                                      "value": "v.component",
                                      "label": "Component"
                                    },
                                    {
                                      "value": "v.resource",
                                      "label": "Resource"
                                    },
                                    {
                                      "value": "v.output",
                                      "label": "Output"
                                    },
                                    {
                                      "value": "extra_details",
                                      "label": "Extra details"
                                    },
                                    {
                                      "value": "v.state.val",
                                      "label": "State"
                                    },
                                    {
                                      "value": "v.status.val",
                                      "label": "Status"
                                    }
                                  ],
                                  "sort": {
                                    "order": "DESC"
                                  },
                                  "itemsPerPage": 15,
                                  "alarmsStateFilter": {
                                    "opened": true
                                  }
                                },
                                "grid_parameters": {
                                  "mobile": {
                                    "x": 0,
                                    "y": 0,
                                    "w": 3,
                                    "h": 1,
                                    "autoHeight": true
                                  },
                                  "tablet": {
                                    "x": 0,
                                    "y": 0,
                                    "w": 3,
                                    "h": 1,
                                    "autoHeight": true
                                  },
                                  "desktop": {
                                    "x": 0,
                                    "y": 0,
                                    "w": 12,
                                    "h": 1,
                                    "autoHeight": true
                                  }
                                },
                                "filters": [
                                  {
                                    "_id": "6ccfd7ea-9f04-4c0f-8809-25545cbb579e",
                                    "title": "New filter. ID is used to set main filter parameter.",
                                    "is_private": false,
                                    "alarm_pattern": [
                                      [
                                        {
                                          "field": "v.component",
                                          "cond": {
                                            "type": "eq",
                                            "value": "cps_component"
                                          }
                                        }
                                      ]
                                    ]
                                  },
                                  {
                                    "title": "New filter 2",
                                    "is_private": false,
                                    "entity_pattern": [
                                      [
                                        {
                                          "field": "name",
                                          "cond": {
                                            "type": "eq",
                                            "value": "cps_resource"
                                          }
                                        }
                                      ]
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "title": "New tab 2"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "_id": "0be1d3df-816b-4359-a2ba-7bcccb33ed4f",
                    "views": [
                      {
                        "_id": "15a8df93-fab2-417b-a96c-f624dc6dc204"
                      },
                      {
                        "title": "New view. This view is added to existed group between existed views."
                      },
                      {
                        "_id": "14e237d4-ad08-47a5-87f2-8ffe6741541f"
                      }
                    ]
                  },
                  {
                    "title": "New group. Existed view is moved to this group.",
                    "views": [
                      {
                        "_id": "84511962-6b00-4b3e-8a00-29216b2e1be6"
                      }
                    ]
                  }
                ]
        required: true
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /view-positions:
    put:
      tags:
        - views
      summary: Update views positions
      description: Update views positions
      operationId: views-update-positions
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/view.EditPositionItemRequest'
            examples:
              update:
                summary: Update positions.
                description: Update groups' and views' positions.
                value: [
                  {
                    "_id": "6ccfd7ea-9f04-4c0f-8809-25545cbb579e",
                    "views": [
                      "84511962-6b00-4b3e-8a00-29216b2e1be6",
                      "0be1d3df-816b-4359-a2ba-7bcccb33ed4f",
                      "14e237d4-ad08-47a5-87f2-8ffe6741541f"
                    ]
                  },
                  {
                    "_id": "15a8df93-fab2-417b-a96c-f624dc6dc204",
                    "views": [
                      "6164d665-7ccb-4ffc-9d46-5350b2fefafe",
                      "7c573640-239b-4e8d-84e2-e1baf4bd0ae2"
                    ]
                  }
                ]
        required: true
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /view-tab-copy/{id}:
    post:
      tags:
        - viewtabs
      summary: Copy view tab
      description: Copy view tab
      operationId: viewtabs-copy
      parameters:
        - name: id
          in: path
          description: tab id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/viewtab.EditRequest'
            examples:
              copy:
                summary: Copy
                description: Copy a tab. Tab's widgets are also copied.
                value: {
                  "title": "Alarms",
                  "view": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2"
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/viewtab.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /view-tab-positions:
    put:
      tags:
        - viewtabs
      summary: Update view tabs positions
      description: Update view tabs positions
      operationId: viewtabs-update-positions
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              update:
                summary: Update positions
                description: Update tabs' positions
                value: [
                  "7c573640-239b-4e8d-84e2-e1baf4bd0ae2",
                  "6ccfd7ea-9f04-4c0f-8809-25545cbb579e"
                ]
        required: true
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /view-tabs:
    post:
      tags:
        - viewtabs
      summary: Create view tab
      description: Create view tab
      operationId: viewtabs-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/viewtab.EditRequest'
            examples:
              create:
                summary: Create
                description: Create a tab.
                value: {
                  "title": "Alarms",
                  "view": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2"
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/viewtab.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /view-tabs/{id}:
    get:
      tags:
        - viewtabs
      summary: Get view tab by id
      description: Get view tab by id
      operationId: viewtabs-get-by-id
      parameters:
        - name: id
          in: path
          description: tab id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/viewtab.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - viewtabs
      summary: Update view tab by id
      description: Update view tab by id
      operationId: viewtabs-update-by-id
      parameters:
        - name: id
          in: path
          description: tab id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/viewtab.EditRequest'
            examples:
              update:
                summary: Update
                description: Update a tab.
                value: {
                  "title": "Alarms",
                  "view": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2"
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/viewtab.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - viewtabs
      summary: Delete view tab by id
      description: Delete view tab by id
      operationId: viewtabs-delete-by-id
      parameters:
        - name: id
          in: path
          description: tab id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /views:
    get:
      tags:
        - views
      summary: Find views
      description: Get paginated list of views
      operationId: views-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/view.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - views
      summary: Create view
      description: Create view
      operationId: views-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/view.EditRequest'
            examples:
              create:
                summary: Create
                description: Create a view. Only users with author's role can see new view.
                value: {
                  "title": "Opened",
                  "description": "Opened alarms",
                  "enabled": true,
                  "group": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101",
                  "periodic_refresh": {
                    "enabled": true,
                    "value": 600,
                    "unit": "m"
                  },
                  "tags": [
                    "alarms"
                  ]
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/view.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /views/{id}:
    get:
      tags:
        - views
      summary: Get view by id
      description: Get view by id
      operationId: views-get-by-id
      parameters:
        - name: id
          in: path
          description: view id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/view.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - views
      summary: Update view by id
      description: Update view by id
      operationId: views-update-by-id
      parameters:
        - name: id
          in: path
          description: view id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/view.EditRequest'
            examples:
              update:
                summary: Update
                description: Update a view.
                value: {
                  "title": "Opened",
                  "description": "Opened alarms",
                  "enabled": true,
                  "group": "27e7f6ae-2ba0-4c7d-be4b-3e55e9c6e101",
                  "periodic_refresh": {
                    "enabled": true,
                    "value": 600,
                    "unit": "m"
                  },
                  "tags": [
                    "alarms"
                  ]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/view.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - views
      summary: Delete view by id
      description: Delete view by id
      operationId: views-delete-by-id
      parameters:
        - name: id
          in: path
          description: view id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /weather-services:
    get:
      tags:
        - weather-services
      summary: Find all services
      description: Get paginated list of services
      operationId: weather-services-find-all
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - name: filters[]
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
        - name: category
          in: query
          description: category
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/serviceweather.Service'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /weather-services/{id}:
    get:
      tags:
        - weather-services
      summary: Find all entity by service id
      description: Get paginated list of entities
      operationId: weather-services-find-all-entities
      parameters:
        - name: id
          in: path
          description: service id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - name: sort_by
          in: query
          description: sort query
          schema:
            type: string
        - name: with_instructions
          in: query
          description: show assigned instructions and execution flags
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/serviceweather.Entity'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /widget-copy/{id}:
    post:
      tags:
        - widgets
      summary: Copy widget
      description: Copy widget
      operationId: widgets-copy
      parameters:
        - name: id
          in: path
          description: widget id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/widget.EditRequest'
            examples:
              copy:
                summary: Copy
                description: Copy a widget. Widget's filters are also copied.
                value: {
                  "tab": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2",
                  "title": "Opened",
                  "type": "AlarmsList",
                  "grid_parameters": {
                    "mobile": {
                      "x": 0,
                      "y": 0,
                      "w": 3,
                      "h": 1,
                      "autoHeight": true
                    },
                    "tablet": {
                      "x": 0,
                      "y": 0,
                      "w": 3,
                      "h": 1,
                      "autoHeight": true
                    },
                    "desktop": {
                      "x": 0,
                      "y": 0,
                      "w": 12,
                      "h": 1,
                      "autoHeight": true
                    }
                  },
                  "parameters": {
                    "mainFilter": "6ccfd7ea-9f04-4c0f-8809-25545cbb579e",
                    "widgetColumns": [
                      {
                        "value": "v.connector",
                        "label": "Connector"
                      },
                      {
                        "value": "v.connector_name",
                        "label": "Connector name"
                      },
                      {
                        "value": "v.component",
                        "label": "Component"
                      },
                      {
                        "value": "v.resource",
                        "label": "Resource"
                      },
                      {
                        "value": "v.output",
                        "label": "Output"
                      },
                      {
                        "value": "extra_details",
                        "label": "Extra details"
                      },
                      {
                        "value": "v.state.val",
                        "label": "State"
                      },
                      {
                        "value": "v.status.val",
                        "label": "Status"
                      }
                    ],
                    "sort": {
                      "order": "DESC"
                    },
                    "itemsPerPage": 15,
                    "alarmsStateFilter": {
                      "opened": true
                    }
                  }
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/widget.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /widget-filters:
    get:
      tags:
        - widgetfilters
      summary: Find widget filters
      description: Get paginated list of widget filters
      operationId: widgetfilters-find-all
      parameters:
        - name: private
          in: query
          schema:
            type: boolean
        - name: widget
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'schemas_swagger.yaml#/definitions/common.PaginatedListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: 'schemas_swagger.yaml#/definitions/widgetfilter.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
    post:
      tags:
        - widgetfilters
      summary: Create widget filter
      description: Create widget filter
      operationId: widgetfilters-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/widgetfilter.EditRequest'
            examples:
              embedpatterns:
                summary: Embed patterns
                description: Create a filter with embed patterns.
                value: {
                  "title": "Filter",
                  "widget": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2",
                  "is_private": true,
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "cps_component"
                        }
                      }
                    ]
                  ],
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource"
                        }
                      }
                    ]
                  ],
                  "pbehavior_pattern": [
                    [
                      {
                        "field": "pbehavior_info.type",
                        "cond": {
                          "type": "eq",
                          "value": "default_maintenance"
                        }
                      }
                    ]
                  ]
                }
              corporatepatterns:
                summary: Corporate patterns
                description: Create a filter with corporate patterns.
                value: {
                  "title": "Filter",
                  "widget": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2",
                  "is_private": true,
                  "corporate_alarm_pattern": "6ccfd7ea-9f04-4c0f-8809-25545cbb579e",
                  "corporate_entity_pattern": "84511962-6b00-4b3e-8a00-29216b2e1be6",
                  "corporate_pbehavior_pattern": "0be1d3df-816b-4359-a2ba-7bcccb33ed4f"
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/widgetfilter.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /widget-filters/{id}:
    get:
      tags:
        - widgetfilters
      summary: Get widget filter by id
      description: Get widget filter by id
      operationId: widgetfilters-get-by-id
      parameters:
        - name: id
          in: path
          description: filter id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/widgetfilter.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - widgetfilters
      summary: Update widget filter by id
      description: Update widget filter by id
      operationId: widgetfilters-update-by-id
      parameters:
        - name: id
          in: path
          description: filter id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/widgetfilter.EditRequest'
            examples:
              update:
                summary: Update
                description: Update a filter.
                value: {
                  "title": "Filter",
                  "widget": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2",
                  "is_private": true,
                  "alarm_pattern": [
                    [
                      {
                        "field": "v.component",
                        "cond": {
                          "type": "eq",
                          "value": "cps_component"
                        }
                      }
                    ]
                  ],
                  "entity_pattern": [
                    [
                      {
                        "field": "name",
                        "cond": {
                          "type": "eq",
                          "value": "cps_resource"
                        }
                      }
                    ]
                  ],
                  "pbehavior_pattern": [
                    [
                      {
                        "field": "pbehavior_info.type",
                        "cond": {
                          "type": "eq",
                          "value": "default_maintenance"
                        }
                      }
                    ]
                  ]
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/widgetfilter.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - widgetfilters
      summary: Delete widget filter by id
      description: Delete widget filter by id
      operationId: widgetfilters-delete-by-id
      parameters:
        - name: id
          in: path
          description: filter id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /widget-grid-positions:
    put:
      tags:
        - widgets
      summary: Update widgets grid positions
      description: Update widgets grid positions
      operationId: widgets-update-grid-positions
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'schemas_swagger.yaml#/definitions/widget.EditGridPositionItemRequest'
            examples:
              update:
                summary: Update grid positions
                description: Update widgets' grid positions.
                value: [
                  {
                    "_id": "84511962-6b00-4b3e-8a00-29216b2e1be6",
                    "grid_parameters": {
                      "desktop": {"x": 0, "y": 0, "w": 3, "h": 1, "autoHeight": false}
                    }
                  },
                  {
                    "_id": "6ccfd7ea-9f04-4c0f-8809-25545cbb579e",
                    "grid_parameters": {
                      "desktop": {"x": 0, "y": 1, "w": 3, "h": 1, "autoHeight": false}
                    }
                  },
                  {
                    "_id": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2",
                    "grid_parameters": {
                      "desktop": {"x": 1, "y": 1, "w": 12, "h": 1, "autoHeight": true}
                    }
                  }
                ]
        required: true
      responses:
        204:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
  /widgets:
    post:
      tags:
        - widgets
      summary: Create widget
      description: Create widget
      operationId: widgets-create
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/widget.EditRequest'
            examples:
              create:
                summary: Create
                description: Create a widget.
                value: {
                  "tab": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2",
                  "title": "Opened",
                  "type": "AlarmsList",
                  "grid_parameters": {
                    "mobile": {
                      "x": 0,
                      "y": 0,
                      "w": 3,
                      "h": 1,
                      "autoHeight": true
                    },
                    "tablet": {
                      "x": 0,
                      "y": 0,
                      "w": 3,
                      "h": 1,
                      "autoHeight": true
                    },
                    "desktop": {
                      "x": 0,
                      "y": 0,
                      "w": 12,
                      "h": 1,
                      "autoHeight": true
                    }
                  },
                  "parameters": {
                    "mainFilter": "6ccfd7ea-9f04-4c0f-8809-25545cbb579e",
                    "widgetColumns": [
                      {
                        "value": "v.connector",
                        "label": "Connector"
                      },
                      {
                        "value": "v.connector_name",
                        "label": "Connector name"
                      },
                      {
                        "value": "v.component",
                        "label": "Component"
                      },
                      {
                        "value": "v.resource",
                        "label": "Resource"
                      },
                      {
                        "value": "v.output",
                        "label": "Output"
                      },
                      {
                        "value": "extra_details",
                        "label": "Extra details"
                      },
                      {
                        "value": "v.state.val",
                        "label": "State"
                      },
                      {
                        "value": "v.status.val",
                        "label": "Status"
                      }
                    ],
                    "sort": {
                      "order": "DESC"
                    },
                    "itemsPerPage": 15,
                    "alarmsStateFilter": {
                      "opened": true
                    }
                  }
                }
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/widget.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
  /widgets/{id}:
    get:
      tags:
        - widgets
      summary: Get widget by id
      description: Get widget by id
      operationId: widgets-get-by-id
      parameters:
        - name: id
          in: path
          description: widget id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/widget.Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    put:
      tags:
        - widgets
      summary: Update widget by id
      description: Update widget by id
      operationId: widgets-update-by-id
      parameters:
        - name: id
          in: path
          description: widget id
          required: true
          schema:
            type: string
      requestBody:
        description: body
        content:
          application/json:
            schema:
              $ref: 'schemas_swagger.yaml#/definitions/widget.EditRequest'
            examples:
              update:
                summary: Update
                description: Update a widget.
                value: {
                  "tab": "7c573640-239b-4e8d-84e2-e1baf4bd0ae2",
                  "title": "Opened",
                  "type": "AlarmsList",
                  "grid_parameters": {
                    "mobile": {
                      "x": 0,
                      "y": 0,
                      "w": 3,
                      "h": 1,
                      "autoHeight": true
                    },
                    "tablet": {
                      "x": 0,
                      "y": 0,
                      "w": 3,
                      "h": 1,
                      "autoHeight": true
                    },
                    "desktop": {
                      "x": 0,
                      "y": 0,
                      "w": 12,
                      "h": 1,
                      "autoHeight": true
                    }
                  },
                  "parameters": {
                    "mainFilter": "6ccfd7ea-9f04-4c0f-8809-25545cbb579e",
                    "widgetColumns": [
                      {
                        "value": "v.connector",
                        "label": "Connector"
                      },
                      {
                        "value": "v.connector_name",
                        "label": "Connector name"
                      },
                      {
                        "value": "v.component",
                        "label": "Component"
                      },
                      {
                        "value": "v.resource",
                        "label": "Resource"
                      },
                      {
                        "value": "v.output",
                        "label": "Output"
                      },
                      {
                        "value": "extra_details",
                        "label": "Extra details"
                      },
                      {
                        "value": "v.state.val",
                        "label": "State"
                      },
                      {
                        "value": "v.status.val",
                        "label": "Status"
                      }
                    ],
                    "sort": {
                      "order": "DESC"
                    },
                    "itemsPerPage": 15,
                    "alarmsStateFilter": {
                      "opened": true
                    }
                  }
                }
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/widget.Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ValidationErrorResponse'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
    delete:
      tags:
        - widgets
      summary: Delete widget by id
      description: Delete widget by id
      operationId: widgets-delete-by-id
      parameters:
        - name: id
          in: path
          description: widget id
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: 'schemas_swagger.yaml#/definitions/common.ErrorResponse'
components:
  parameters:
    page:
      name: page
      in: query
      description: current page
      required: false
      schema:
        type: integer
        minimum: 1
    limit:
      name: limit
      in: query
      description: items per page
      required: false
      schema:
        type: integer
        minimum: 1
    search:
      name: search
      in: query
      description: search query
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: sort query
      schema:
        type: string
        enum:
          - asc
          - desc
  
  schemas:
    event.Event:
      type: object
      required:
        - connector
        - connector_name
        - component
        - event_type
        - source_type
      properties:
        component:
          type: string
        connector:
          type: string
        connector_name:
          type: string
        event_type:
          type: string
          enum:
            - check
            - ack
            - ackremove
            - cancel
            - uncancel
            - comment
            - snooze
            - changestate
            - assocticket
            - declareticket
        resource:
          type: string
        source_type:
          type: string
          enum:
            - resource
            - component
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
          description: >
            State:
              * `0` - Info
              * `1` - Minor
              * `2` - Major
              * `3` - Critical
        output:
          type: string
        long_output:
          type: string
        author:
          type: string
        user_id:
          type: string
        duration:
          type: integer
    event.Response:
      type: object
      properties:
        failed_events:
          type: array
          items:
            $ref: '#/components/schemas/event.Event'
        retry_events:
          type: array
          items:
            $ref: '#/components/schemas/event.Event'
        sent_events:
          type: array
          items:
            $ref: '#/components/schemas/event.Event'
    BulkResponseItem:
      type: object
      properties:
        id:
          type: string
        status:
          type: integer
        item:
          type: object
        error:
          type: string
        errors:
          type: object
          additionalProperties:
            type: string

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: [ ]
  - BasicAuth: [ ]
