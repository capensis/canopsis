[RabbitMQ]

# If you need to set extra arguments specific to the server implementation of
# exchange, uncomments args in section [[RabbitMQ.exchanges]] and add the
# required values. For more information see the documentation of the used
# rabbitMQ library and the documentation of our version of RabbitMQ.

# If you need to set extra arguments specific to the server implementation of
# queue, uncomments args in section [[RabbitMQ.queues]] and add the
# required values. For more information see the documentation of the used
# rabbitMQ library and the documentation of our version of RabbitMQ.

# If you need to set extra arguments specific to the server implementation for
# queue binding, uncomments args in section [[RabbitMQ.queues.bind]] and add the
# required values. For more information see the documentation of the
# used rabbitMQ library and the documentation of our version of RabbitMQ.

[[RabbitMQ.exchanges]]
name = "canopsis"
kind = "topic"
durable = true
autoDelete = false
internal = false
noWait = false
# args =

[[RabbitMQ.exchanges]]
name = "canopsis.alerts"
kind = "topic"
durable = true
autoDelete = false
internal = false
noWait = false
# args =

[[RabbitMQ.exchanges]]
name = "canopsis.events"
kind = "topic"
durable = true
autoDelete = false
internal = false
noWait = false
# args =

[[RabbitMQ.exchanges]]
name = "canopsis.incidents"
kind = "topic"
durable = true
autoDelete = false
internal = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_action"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_action_axe_rpc_client"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_action_webhook_rpc_client"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_axe"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =
  [RabbitMQ.queues.bind]
  key = "Engine_axe"
  exchange = "amq.direct"
  noWait = false
  # args =

[[RabbitMQ.queues]]
name = "Engine_axe_rpc_server"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_webhook_rpc_server"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_axe_service_rpc_client"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_axe_pbehavior_rpc_client"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_che"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_fifo"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =
  [RabbitMQ.queues.bind]
  key = "#"
  exchange = "canopsis.events"
  noWait = false
  # args =

[[RabbitMQ.queues]]
name = "FIFO_ack"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_heartbeat"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =
  [RabbitMQ.queues.bind]
  key = "#"
  exchange = "canopsis.events"
  noWait = false
  # args =

[[RabbitMQ.queues]]
name = "Engine_service"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =
  [RabbitMQ.queues.bind]
  key = "Engine_service"
  exchange = "amq.direct"
  noWait = false
  # args =

[[RabbitMQ.queues]]
name = "Engine_service_rpc_server"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

[[RabbitMQ.queues]]
name = "Engine_webhook"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =
  [RabbitMQ.queues.bind]
  key = "Engine_webhook"
  exchange = "amq.direct"
  noWait = false
  # args =

[[RabbitMQ.queues]]
name = "Engine_dynamic_infos"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =
  [RabbitMQ.queues.bind]
  key = "Engine_dynamic_infos"
  exchange = "amq.direct"
  noWait = false
  # args =

[[RabbitMQ.queues]]
name = "Engine_correlation"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =
  [RabbitMQ.queues.bind]
  key = "Engine_correlation"
  exchange = "amq.direct"
  noWait = false
  # args =

[[RabbitMQ.queues]]
name = "Engine_kpi"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =
  [RabbitMQ.queues.bind]
  key = "*.*.initkpi.#"
  exchange = "canopsis.events"
  noWait = false
  # args =

[[RabbitMQ.queues]]
name = "Engine_pbehavior"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =
  [RabbitMQ.queues.bind]
  key = "Engine_pbehavior"
  exchange = "amq.direct"
  noWait = false
  # args =

[[RabbitMQ.queues]]
name = "Engine_pbehavior_rpc_server"
durable = true
autoDelete = false
exclusive = false
noWait = false
# args =

# It's required to restart api and engines after canopsis-reconfigure updates mongodb
# to catch up following parameters.
[Canopsis.global]
PrefetchCount = 10000
PrefetchSize = 0
ReconnectTimeoutMilliseconds = 8
ReconnectRetries = 3

# It's required to restart api and engines after canopsis-reconfigure updates mongodb
# to catch up following parameters.
[Canopsis.file]
Remediation = "/opt/canopsis/var/lib/remediation-files"
# Local storage for Junit artifacts.
Junit = "/opt/canopsis/var/lib/junit-files"
# Temporary local storage for Junit data which are uploaded by API.
JunitApi = "/tmp/canopsis/junit"

# Following parameters are reloaded by api and engines after canopsis-reconfigure updates mongodb.
[Canopsis.alarm]
FlappingFreqLimit = 0
FlappingInterval = 0
StealthyInterval = 0
BaggotTime = "60s"
EnableLastEventDate = false
CancelAutosolveDelay = "1h"
DisplayNameScheme = "{{ rand_string 3 }}-{{ rand_string 3 }}-{{ rand_string 3 }}"
OutputLength = 255
DisableActionSnoozeDelayOnPbh = false

# Following parameters are reloaded by api and engines after canopsis-reconfigure updates mongodb.
[Canopsis.timezone]
Timezone = "Europe/Paris"

# Following parameters are reloaded by api and engines after canopsis-reconfigure updates mongodb.
[Canopsis.remediation]
JobExecutorFetchTimeoutSeconds = 30

# Following parameters are reloaded by api and engines after canopsis-reconfigure updates mongodb.
[Canopsis.data_storage]
# Time to execute data archive and delete. It's used by multiple engines since different engines handle different data.
TimeToExecute = "Sunday,23"

# It's required to restart api and engines after canopsis-reconfigure updates mongodb
# to catch up following parameters.
[Canopsis.import_ctx]
ThdWarnMinPerImport = "30m"
ThdCritMinPerImport = "60m"
FilePattern = "/tmp/import_%s.json"
