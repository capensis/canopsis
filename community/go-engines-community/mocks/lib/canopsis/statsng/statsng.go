// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/statsng (interfaces: Service)

// Package mock_statsng is a generated GoMock package.
package mock_statsng

import (
	context "context"
	types "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ProcessAlarmChange mocks base method
func (m *MockService) ProcessAlarmChange(arg0 context.Context, arg1 types.AlarmChange, arg2 types.CpsTime, arg3 types.Alarm, arg4 types.Entity, arg5, arg6 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessAlarmChange", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessAlarmChange indicates an expected call of ProcessAlarmChange
func (mr *MockServiceMockRecorder) ProcessAlarmChange(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAlarmChange", reflect.TypeOf((*MockService)(nil).ProcessAlarmChange), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ProcessResolvedAlarm mocks base method
func (m *MockService) ProcessResolvedAlarm(arg0 types.Alarm, arg1 types.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessResolvedAlarm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessResolvedAlarm indicates an expected call of ProcessResolvedAlarm
func (mr *MockServiceMockRecorder) ProcessResolvedAlarm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessResolvedAlarm", reflect.TypeOf((*MockService)(nil).ProcessResolvedAlarm), arg0, arg1)
}
