// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/entitycounters (interfaces: EventsSender)

// Package mock_entitycounters is a generated GoMock package.
package mock_entitycounters

import (
	context "context"
	reflect "reflect"

	entitycounters "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/entitycounters"
	gomock "github.com/golang/mock/gomock"
)

// MockEventsSender is a mock of EventsSender interface.
type MockEventsSender struct {
	ctrl     *gomock.Controller
	recorder *MockEventsSenderMockRecorder
}

// MockEventsSenderMockRecorder is the mock recorder for MockEventsSender.
type MockEventsSenderMockRecorder struct {
	mock *MockEventsSender
}

// NewMockEventsSender creates a new mock instance.
func NewMockEventsSender(ctrl *gomock.Controller) *MockEventsSender {
	mock := &MockEventsSender{ctrl: ctrl}
	mock.recorder = &MockEventsSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsSender) EXPECT() *MockEventsSenderMockRecorder {
	return m.recorder
}

// RecomputeComponent mocks base method.
func (m *MockEventsSender) RecomputeComponent(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecomputeComponent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecomputeComponent indicates an expected call of RecomputeComponent.
func (mr *MockEventsSenderMockRecorder) RecomputeComponent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecomputeComponent", reflect.TypeOf((*MockEventsSender)(nil).RecomputeComponent), arg0, arg1)
}

// RecomputeService mocks base method.
func (m *MockEventsSender) RecomputeService(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecomputeService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecomputeService indicates an expected call of RecomputeService.
func (mr *MockEventsSenderMockRecorder) RecomputeService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecomputeService", reflect.TypeOf((*MockEventsSender)(nil).RecomputeService), arg0, arg1)
}

// UpdateComponentState mocks base method.
func (m *MockEventsSender) UpdateComponentState(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponentState", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComponentState indicates an expected call of UpdateComponentState.
func (mr *MockEventsSenderMockRecorder) UpdateComponentState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponentState", reflect.TypeOf((*MockEventsSender)(nil).UpdateComponentState), arg0, arg1, arg2)
}

// UpdateServiceState mocks base method.
func (m *MockEventsSender) UpdateServiceState(arg0 context.Context, arg1 string, arg2 entitycounters.UpdatedServicesInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceState", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceState indicates an expected call of UpdateServiceState.
func (mr *MockEventsSenderMockRecorder) UpdateServiceState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceState", reflect.TypeOf((*MockEventsSender)(nil).UpdateServiceState), arg0, arg1, arg2)
}
