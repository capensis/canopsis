// Code generated by MockGen. DO NOT EDIT.
// Source: lib/canopsis/legacy/pbehavior/interfaces.go

// Package mock_pbehavior is a generated GoMock package.
package mock_pbehavior

import (
	types "git.canopsis.net/canopsis/go-engines/lib/canopsis/types"
	bson "github.com/globalsign/mgo/bson"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAdapter is a mock of Adapter interface
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAdapter) Get(arg0 bson.M) ([]types.PBehaviorLegacy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]types.PBehaviorLegacy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAdapterMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAdapter)(nil).Get), arg0)
}

// Insert mocks base method
func (m *MockAdapter) Insert(arg0 types.PBehaviorLegacy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockAdapterMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAdapter)(nil).Insert), arg0)
}

// Update mocks base method
func (m *MockAdapter) Update(arg0 types.PBehaviorLegacy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAdapterMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAdapter)(nil).Update), arg0)
}

// RemoveId mocks base method
func (m *MockAdapter) RemoveId(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveId", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveId indicates an expected call of RemoveId
func (mr *MockAdapterMockRecorder) RemoveId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveId", reflect.TypeOf((*MockAdapter)(nil).RemoveId), arg0)
}

// GetByEntityIds mocks base method
func (m *MockAdapter) GetByEntityIds(eids []string, enabled bool) ([]types.PBehaviorLegacy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEntityIds", eids, enabled)
	ret0, _ := ret[0].([]types.PBehaviorLegacy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEntityIds indicates an expected call of GetByEntityIds
func (mr *MockAdapterMockRecorder) GetByEntityIds(eids, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEntityIds", reflect.TypeOf((*MockAdapter)(nil).GetByEntityIds), eids, enabled)
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockService) Insert(arg0 types.PBehaviorLegacy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockServiceMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockService)(nil).Insert), arg0)
}

// Get mocks base method
func (m *MockService) Get(arg0 bson.M) ([]types.PBehaviorLegacy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]types.PBehaviorLegacy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), arg0)
}

// Remove mocks base method
func (m *MockService) Remove(arg0 types.PBehaviorLegacy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockServiceMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockService)(nil).Remove), arg0)
}

// AlarmHasPBehavior mocks base method
func (m *MockService) AlarmHasPBehavior(arg0 types.Alarm) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlarmHasPBehavior", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AlarmHasPBehavior indicates an expected call of AlarmHasPBehavior
func (mr *MockServiceMockRecorder) AlarmHasPBehavior(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlarmHasPBehavior", reflect.TypeOf((*MockService)(nil).AlarmHasPBehavior), arg0)
}

// GetByEntityIds mocks base method
func (m *MockService) GetByEntityIds(eids []string, enabled bool) ([]types.PBehaviorLegacy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEntityIds", eids, enabled)
	ret0, _ := ret[0].([]types.PBehaviorLegacy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEntityIds indicates an expected call of GetByEntityIds
func (mr *MockServiceMockRecorder) GetByEntityIds(eids, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEntityIds", reflect.TypeOf((*MockService)(nil).GetByEntityIds), eids, enabled)
}

// HasActivePBehavior mocks base method
func (m *MockService) HasActivePBehavior(entityID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasActivePBehavior", entityID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasActivePBehavior indicates an expected call of HasActivePBehavior
func (mr *MockServiceMockRecorder) HasActivePBehavior(entityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActivePBehavior", reflect.TypeOf((*MockService)(nil).HasActivePBehavior), entityID)
}
