// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/go-engines/lib/canopsis/metaalarm/service (interfaces: MetaAlarmService)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	metaalarm "git.canopsis.net/canopsis/go-engines/lib/canopsis/metaalarm"
	types "git.canopsis.net/canopsis/go-engines/lib/canopsis/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMetaAlarmService is a mock of MetaAlarmService interface
type MockMetaAlarmService struct {
	ctrl     *gomock.Controller
	recorder *MockMetaAlarmServiceMockRecorder
}

// MockMetaAlarmServiceMockRecorder is the mock recorder for MockMetaAlarmService
type MockMetaAlarmServiceMockRecorder struct {
	mock *MockMetaAlarmService
}

// NewMockMetaAlarmService creates a new mock instance
func NewMockMetaAlarmService(ctrl *gomock.Controller) *MockMetaAlarmService {
	mock := &MockMetaAlarmService{ctrl: ctrl}
	mock.recorder = &MockMetaAlarmServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetaAlarmService) EXPECT() *MockMetaAlarmServiceMockRecorder {
	return m.recorder
}

// AddChildToMetaAlarm mocks base method
func (m *MockMetaAlarmService) AddChildToMetaAlarm(arg0 *types.Event, arg1 types.Alarm, arg2 types.AlarmWithEntity, arg3 metaalarm.Rule) (types.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChildToMetaAlarm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChildToMetaAlarm indicates an expected call of AddChildToMetaAlarm
func (mr *MockMetaAlarmServiceMockRecorder) AddChildToMetaAlarm(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildToMetaAlarm", reflect.TypeOf((*MockMetaAlarmService)(nil).AddChildToMetaAlarm), arg0, arg1, arg2, arg3)
}

// AddMultipleChildsToMetaAlarm mocks base method
func (m *MockMetaAlarmService) AddMultipleChildsToMetaAlarm(arg0 *types.Event, arg1 types.Alarm, arg2 []types.AlarmWithEntity, arg3 metaalarm.Rule) (types.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMultipleChildsToMetaAlarm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMultipleChildsToMetaAlarm indicates an expected call of AddMultipleChildsToMetaAlarm
func (mr *MockMetaAlarmServiceMockRecorder) AddMultipleChildsToMetaAlarm(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMultipleChildsToMetaAlarm", reflect.TypeOf((*MockMetaAlarmService)(nil).AddMultipleChildsToMetaAlarm), arg0, arg1, arg2, arg3)
}

// CreateMetaAlarm mocks base method
func (m *MockMetaAlarmService) CreateMetaAlarm(arg0 *types.Event, arg1 []types.AlarmWithEntity, arg2 metaalarm.Rule) (types.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetaAlarm", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetaAlarm indicates an expected call of CreateMetaAlarm
func (mr *MockMetaAlarmServiceMockRecorder) CreateMetaAlarm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetaAlarm", reflect.TypeOf((*MockMetaAlarmService)(nil).CreateMetaAlarm), arg0, arg1, arg2)
}

// RemoveMultipleChildToMetaAlarm mocks base method
func (m *MockMetaAlarmService) RemoveMultipleChildToMetaAlarm(arg0 *types.Event, arg1 types.Alarm, arg2 []types.AlarmWithEntity, arg3 metaalarm.Rule) (types.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipleChildToMetaAlarm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMultipleChildToMetaAlarm indicates an expected call of RemoveMultipleChildToMetaAlarm
func (mr *MockMetaAlarmServiceMockRecorder) RemoveMultipleChildToMetaAlarm(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipleChildToMetaAlarm", reflect.TypeOf((*MockMetaAlarmService)(nil).RemoveMultipleChildToMetaAlarm), arg0, arg1, arg2, arg3)
}
