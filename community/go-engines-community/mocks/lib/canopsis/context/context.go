// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/context (interfaces: EnrichmentCenter)

// Package mock_context is a generated GoMock package.
package mock_context

import (
	context "context"
	reflect "reflect"

	context0 "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/context"
	types "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/types"
	gomock "github.com/golang/mock/gomock"
)

// MockEnrichmentCenter is a mock of EnrichmentCenter interface.
type MockEnrichmentCenter struct {
	ctrl     *gomock.Controller
	recorder *MockEnrichmentCenterMockRecorder
}

// MockEnrichmentCenterMockRecorder is the mock recorder for MockEnrichmentCenter.
type MockEnrichmentCenterMockRecorder struct {
	mock *MockEnrichmentCenter
}

// NewMockEnrichmentCenter creates a new mock instance.
func NewMockEnrichmentCenter(ctrl *gomock.Controller) *MockEnrichmentCenter {
	mock := &MockEnrichmentCenter{ctrl: ctrl}
	mock.recorder = &MockEnrichmentCenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrichmentCenter) EXPECT() *MockEnrichmentCenterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEnrichmentCenter) Get(arg0 context.Context, arg1 types.Event) (*types.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*types.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEnrichmentCenterMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEnrichmentCenter)(nil).Get), arg0, arg1)
}

// Handle mocks base method.
func (m *MockEnrichmentCenter) Handle(arg0 context.Context, arg1 types.Event) (*types.Entity, context0.UpdatedEntityServices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(*types.Entity)
	ret1, _ := ret[1].(context0.UpdatedEntityServices)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Handle indicates an expected call of Handle.
func (mr *MockEnrichmentCenterMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEnrichmentCenter)(nil).Handle), arg0, arg1)
}

// HandleEntityServiceUpdate mocks base method.
func (m *MockEnrichmentCenter) HandleEntityServiceUpdate(arg0 context.Context, arg1 string) (*context0.UpdatedEntityServices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEntityServiceUpdate", arg0, arg1)
	ret0, _ := ret[0].(*context0.UpdatedEntityServices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEntityServiceUpdate indicates an expected call of HandleEntityServiceUpdate.
func (mr *MockEnrichmentCenterMockRecorder) HandleEntityServiceUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEntityServiceUpdate", reflect.TypeOf((*MockEnrichmentCenter)(nil).HandleEntityServiceUpdate), arg0, arg1)
}

// LoadServices mocks base method.
func (m *MockEnrichmentCenter) LoadServices(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadServices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadServices indicates an expected call of LoadServices.
func (mr *MockEnrichmentCenterMockRecorder) LoadServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadServices", reflect.TypeOf((*MockEnrichmentCenter)(nil).LoadServices), arg0)
}

// ReloadService mocks base method.
func (m *MockEnrichmentCenter) ReloadService(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadService indicates an expected call of ReloadService.
func (mr *MockEnrichmentCenterMockRecorder) ReloadService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadService", reflect.TypeOf((*MockEnrichmentCenter)(nil).ReloadService), arg0, arg1)
}

// UpdateEntityInfos mocks base method.
func (m *MockEnrichmentCenter) UpdateEntityInfos(arg0 context.Context, arg1 *types.Entity) (context0.UpdatedEntityServices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityInfos", arg0, arg1)
	ret0, _ := ret[0].(context0.UpdatedEntityServices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityInfos indicates an expected call of UpdateEntityInfos.
func (mr *MockEnrichmentCenterMockRecorder) UpdateEntityInfos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityInfos", reflect.TypeOf((*MockEnrichmentCenter)(nil).UpdateEntityInfos), arg0, arg1)
}

// UpdateImpactedServices mocks base method.
func (m *MockEnrichmentCenter) UpdateImpactedServices(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImpactedServices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImpactedServices indicates an expected call of UpdateImpactedServices.
func (mr *MockEnrichmentCenterMockRecorder) UpdateImpactedServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImpactedServices", reflect.TypeOf((*MockEnrichmentCenter)(nil).UpdateImpactedServices), arg0)
}
