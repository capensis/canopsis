// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/go-engines/lib/canopsis/eventfilter (interfaces: Service,Adapter)

// Package mock_eventfilter is a generated GoMock package.
package mock_eventfilter

import (
	context "context"
	context0 "git.canopsis.net/canopsis/go-engines/lib/canopsis/context"
	eventfilter "git.canopsis.net/canopsis/go-engines/lib/canopsis/eventfilter"
	types "git.canopsis.net/canopsis/go-engines/lib/canopsis/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// LoadDataSourceFactories mocks base method
func (m *MockService) LoadDataSourceFactories(arg0 context0.EnrichmentCenter, arg1 context0.EnrichFields, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDataSourceFactories", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadDataSourceFactories indicates an expected call of LoadDataSourceFactories
func (mr *MockServiceMockRecorder) LoadDataSourceFactories(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDataSourceFactories", reflect.TypeOf((*MockService)(nil).LoadDataSourceFactories), arg0, arg1, arg2)
}

// LoadRules mocks base method
func (m *MockService) LoadRules() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRules")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadRules indicates an expected call of LoadRules
func (mr *MockServiceMockRecorder) LoadRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRules", reflect.TypeOf((*MockService)(nil).LoadRules))
}

// ProcessEvent mocks base method
func (m *MockService) ProcessEvent(arg0 context.Context, arg1 types.Event) (types.Event, eventfilter.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEvent", arg0, arg1)
	ret0, _ := ret[0].(types.Event)
	ret1, _ := ret[1].(eventfilter.Report)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessEvent indicates an expected call of ProcessEvent
func (mr *MockServiceMockRecorder) ProcessEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEvent", reflect.TypeOf((*MockService)(nil).ProcessEvent), arg0, arg1)
}

// MockAdapter is a mock of Adapter interface
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockAdapter) List() ([]eventfilter.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]eventfilter.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAdapterMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAdapter)(nil).List))
}
