// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/eventfilter (interfaces: Service,Adapter,DataSourceFactory,DataSourceGetter)

// Package mock_eventfilter is a generated GoMock package.
package mock_eventfilter

import (
	context "context"
	eventfilter "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/eventfilter"
	types "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// LoadDataSourceFactories mocks base method
func (m *MockService) LoadDataSourceFactories(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDataSourceFactories", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadDataSourceFactories indicates an expected call of LoadDataSourceFactories
func (mr *MockServiceMockRecorder) LoadDataSourceFactories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDataSourceFactories", reflect.TypeOf((*MockService)(nil).LoadDataSourceFactories), arg0)
}

// LoadRules mocks base method
func (m *MockService) LoadRules(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadRules indicates an expected call of LoadRules
func (mr *MockServiceMockRecorder) LoadRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRules", reflect.TypeOf((*MockService)(nil).LoadRules), arg0)
}

// ProcessEvent mocks base method
func (m *MockService) ProcessEvent(arg0 context.Context, arg1 types.Event) (types.Event, eventfilter.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEvent", arg0, arg1)
	ret0, _ := ret[0].(types.Event)
	ret1, _ := ret[1].(eventfilter.Report)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessEvent indicates an expected call of ProcessEvent
func (mr *MockServiceMockRecorder) ProcessEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEvent", reflect.TypeOf((*MockService)(nil).ProcessEvent), arg0, arg1)
}

// MockAdapter is a mock of Adapter interface
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockAdapter) List(arg0 context.Context) ([]eventfilter.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]eventfilter.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAdapterMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAdapter)(nil).List), arg0)
}

// MockDataSourceFactory is a mock of DataSourceFactory interface
type MockDataSourceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceFactoryMockRecorder
}

// MockDataSourceFactoryMockRecorder is the mock recorder for MockDataSourceFactory
type MockDataSourceFactoryMockRecorder struct {
	mock *MockDataSourceFactory
}

// NewMockDataSourceFactory creates a new mock instance
func NewMockDataSourceFactory(ctrl *gomock.Controller) *MockDataSourceFactory {
	mock := &MockDataSourceFactory{ctrl: ctrl}
	mock.recorder = &MockDataSourceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataSourceFactory) EXPECT() *MockDataSourceFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDataSourceFactory) Create(arg0 map[string]interface{}) (eventfilter.DataSourceGetter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(eventfilter.DataSourceGetter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockDataSourceFactoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataSourceFactory)(nil).Create), arg0)
}

// MockDataSourceGetter is a mock of DataSourceGetter interface
type MockDataSourceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceGetterMockRecorder
}

// MockDataSourceGetterMockRecorder is the mock recorder for MockDataSourceGetter
type MockDataSourceGetterMockRecorder struct {
	mock *MockDataSourceGetter
}

// NewMockDataSourceGetter creates a new mock instance
func NewMockDataSourceGetter(ctrl *gomock.Controller) *MockDataSourceGetter {
	mock := &MockDataSourceGetter{ctrl: ctrl}
	mock.recorder = &MockDataSourceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataSourceGetter) EXPECT() *MockDataSourceGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDataSourceGetter) Get(arg0 context.Context, arg1 eventfilter.DataSourceGetterParameters, arg2 *eventfilter.Report) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDataSourceGetterMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataSourceGetter)(nil).Get), arg0, arg1, arg2)
}
