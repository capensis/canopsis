// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/contextgraph (interfaces: Manager,EntityServiceStorage)

// Package mock_contextgraph is a generated GoMock package.
package mock_contextgraph

import (
	context "context"
	reflect "reflect"

	contextgraph "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/contextgraph"
	entityservice "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/entityservice"
	types "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/types"
	mongo "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/mongo"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AssignServices mocks base method.
func (m *MockManager) AssignServices(arg0 *types.Entity, arg1 mongo.CommandsRegister) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AssignServices", arg0, arg1)
}

// AssignServices indicates an expected call of AssignServices.
func (mr *MockManagerMockRecorder) AssignServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignServices", reflect.TypeOf((*MockManager)(nil).AssignServices), arg0, arg1)
}

// AssignStateSetting mocks base method.
func (m *MockManager) AssignStateSetting(arg0 context.Context, arg1 *types.Entity, arg2 mongo.CommandsRegister) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignStateSetting", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignStateSetting indicates an expected call of AssignStateSetting.
func (mr *MockManagerMockRecorder) AssignStateSetting(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignStateSetting", reflect.TypeOf((*MockManager)(nil).AssignStateSetting), arg0, arg1, arg2)
}

// HandleComponent mocks base method.
func (m *MockManager) HandleComponent(arg0 context.Context, arg1 *types.Event, arg2 mongo.CommandsRegister) (contextgraph.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleComponent", arg0, arg1, arg2)
	ret0, _ := ret[0].(contextgraph.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleComponent indicates an expected call of HandleComponent.
func (mr *MockManagerMockRecorder) HandleComponent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleComponent", reflect.TypeOf((*MockManager)(nil).HandleComponent), arg0, arg1, arg2)
}

// HandleConnector mocks base method.
func (m *MockManager) HandleConnector(arg0 context.Context, arg1 *types.Event, arg2 mongo.CommandsRegister) (contextgraph.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleConnector", arg0, arg1, arg2)
	ret0, _ := ret[0].(contextgraph.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleConnector indicates an expected call of HandleConnector.
func (mr *MockManagerMockRecorder) HandleConnector(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConnector", reflect.TypeOf((*MockManager)(nil).HandleConnector), arg0, arg1, arg2)
}

// HandleResource mocks base method.
func (m *MockManager) HandleResource(arg0 context.Context, arg1 *types.Event, arg2 mongo.CommandsRegister) (contextgraph.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(contextgraph.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleResource indicates an expected call of HandleResource.
func (mr *MockManagerMockRecorder) HandleResource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleResource", reflect.TypeOf((*MockManager)(nil).HandleResource), arg0, arg1, arg2)
}

// HandleService mocks base method.
func (m *MockManager) HandleService(arg0 context.Context, arg1 *types.Event, arg2 mongo.CommandsRegister) (contextgraph.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleService", arg0, arg1, arg2)
	ret0, _ := ret[0].(contextgraph.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleService indicates an expected call of HandleService.
func (mr *MockManagerMockRecorder) HandleService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleService", reflect.TypeOf((*MockManager)(nil).HandleService), arg0, arg1, arg2)
}

// InheritComponentFields mocks base method.
func (m *MockManager) InheritComponentFields(arg0, arg1 *types.Entity, arg2 mongo.CommandsRegister) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InheritComponentFields", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InheritComponentFields indicates an expected call of InheritComponentFields.
func (mr *MockManagerMockRecorder) InheritComponentFields(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InheritComponentFields", reflect.TypeOf((*MockManager)(nil).InheritComponentFields), arg0, arg1, arg2)
}

// LoadServices mocks base method.
func (m *MockManager) LoadServices(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadServices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadServices indicates an expected call of LoadServices.
func (mr *MockManagerMockRecorder) LoadServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadServices", reflect.TypeOf((*MockManager)(nil).LoadServices), arg0)
}

// ProcessComponentDependencies mocks base method.
func (m *MockManager) ProcessComponentDependencies(arg0 context.Context, arg1 *types.Entity, arg2 mongo.CommandsRegister) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessComponentDependencies", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessComponentDependencies indicates an expected call of ProcessComponentDependencies.
func (mr *MockManagerMockRecorder) ProcessComponentDependencies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessComponentDependencies", reflect.TypeOf((*MockManager)(nil).ProcessComponentDependencies), arg0, arg1, arg2)
}

// RecomputeService mocks base method.
func (m *MockManager) RecomputeService(arg0 context.Context, arg1 string, arg2 mongo.CommandsRegister) (types.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecomputeService", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecomputeService indicates an expected call of RecomputeService.
func (mr *MockManagerMockRecorder) RecomputeService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecomputeService", reflect.TypeOf((*MockManager)(nil).RecomputeService), arg0, arg1, arg2)
}

// UpdateImpactedServicesFromDependencies mocks base method.
func (m *MockManager) UpdateImpactedServicesFromDependencies(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImpactedServicesFromDependencies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImpactedServicesFromDependencies indicates an expected call of UpdateImpactedServicesFromDependencies.
func (mr *MockManagerMockRecorder) UpdateImpactedServicesFromDependencies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImpactedServicesFromDependencies", reflect.TypeOf((*MockManager)(nil).UpdateImpactedServicesFromDependencies), arg0)
}

// MockEntityServiceStorage is a mock of EntityServiceStorage interface.
type MockEntityServiceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEntityServiceStorageMockRecorder
}

// MockEntityServiceStorageMockRecorder is the mock recorder for MockEntityServiceStorage.
type MockEntityServiceStorageMockRecorder struct {
	mock *MockEntityServiceStorage
}

// NewMockEntityServiceStorage creates a new mock instance.
func NewMockEntityServiceStorage(ctrl *gomock.Controller) *MockEntityServiceStorage {
	mock := &MockEntityServiceStorage{ctrl: ctrl}
	mock.recorder = &MockEntityServiceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityServiceStorage) EXPECT() *MockEntityServiceStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEntityServiceStorage) Get(arg0 context.Context, arg1 string) (entityservice.EntityService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(entityservice.EntityService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEntityServiceStorageMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEntityServiceStorage)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockEntityServiceStorage) GetAll(arg0 context.Context) ([]entityservice.EntityService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entityservice.EntityService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEntityServiceStorageMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEntityServiceStorage)(nil).GetAll), arg0)
}
