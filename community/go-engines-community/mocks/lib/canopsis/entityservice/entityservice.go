// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/entityservice (interfaces: Adapter,CountersCache,Storage)

// Package mock_entityservice is a generated GoMock package.
package mock_entityservice

import (
	context "context"
	reflect "reflect"

	entityservice "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/entityservice"
	mongo "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/mongo"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo0 "go.mongodb.org/mongo-driver/mongo"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// AddToService mocks base method.
func (m *MockAdapter) AddToService(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToService", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToService indicates an expected call of AddToService.
func (mr *MockAdapterMockRecorder) AddToService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToService", reflect.TypeOf((*MockAdapter)(nil).AddToService), arg0, arg1, arg2)
}

// AddToServiceByQuery mocks base method.
func (m *MockAdapter) AddToServiceByQuery(arg0 context.Context, arg1 string, arg2 primitive.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToServiceByQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToServiceByQuery indicates an expected call of AddToServiceByQuery.
func (mr *MockAdapterMockRecorder) AddToServiceByQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToServiceByQuery", reflect.TypeOf((*MockAdapter)(nil).AddToServiceByQuery), arg0, arg1, arg2)
}

// GetAll mocks base method.
func (m *MockAdapter) GetAll(arg0 context.Context) ([]entityservice.EntityService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entityservice.EntityService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAdapterMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAdapter)(nil).GetAll), arg0)
}

// GetByID mocks base method.
func (m *MockAdapter) GetByID(arg0 context.Context, arg1 string) (*entityservice.EntityService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*entityservice.EntityService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAdapterMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAdapter)(nil).GetByID), arg0, arg1)
}

// GetDependenciesCount mocks base method.
func (m *MockAdapter) GetDependenciesCount(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependenciesCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDependenciesCount indicates an expected call of GetDependenciesCount.
func (mr *MockAdapterMockRecorder) GetDependenciesCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependenciesCount", reflect.TypeOf((*MockAdapter)(nil).GetDependenciesCount), arg0, arg1)
}

// GetEnabled mocks base method.
func (m *MockAdapter) GetEnabled(arg0 context.Context) ([]entityservice.EntityService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabled", arg0)
	ret0, _ := ret[0].([]entityservice.EntityService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabled indicates an expected call of GetEnabled.
func (mr *MockAdapterMockRecorder) GetEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabled", reflect.TypeOf((*MockAdapter)(nil).GetEnabled), arg0)
}

// GetServiceDependencies mocks base method.
func (m *MockAdapter) GetServiceDependencies(arg0 context.Context, arg1 string) (mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceDependencies", arg0, arg1)
	ret0, _ := ret[0].(mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceDependencies indicates an expected call of GetServiceDependencies.
func (mr *MockAdapterMockRecorder) GetServiceDependencies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceDependencies", reflect.TypeOf((*MockAdapter)(nil).GetServiceDependencies), arg0, arg1)
}

// RemoveFromService mocks base method.
func (m *MockAdapter) RemoveFromService(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromService", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromService indicates an expected call of RemoveFromService.
func (mr *MockAdapterMockRecorder) RemoveFromService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromService", reflect.TypeOf((*MockAdapter)(nil).RemoveFromService), arg0, arg1, arg2)
}

// RemoveFromServiceByQuery mocks base method.
func (m *MockAdapter) RemoveFromServiceByQuery(arg0 context.Context, arg1 string, arg2 primitive.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromServiceByQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromServiceByQuery indicates an expected call of RemoveFromServiceByQuery.
func (mr *MockAdapterMockRecorder) RemoveFromServiceByQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromServiceByQuery", reflect.TypeOf((*MockAdapter)(nil).RemoveFromServiceByQuery), arg0, arg1, arg2)
}

// UpdateBulk mocks base method.
func (m *MockAdapter) UpdateBulk(arg0 context.Context, arg1 []mongo0.WriteModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBulk", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBulk indicates an expected call of UpdateBulk.
func (mr *MockAdapterMockRecorder) UpdateBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBulk", reflect.TypeOf((*MockAdapter)(nil).UpdateBulk), arg0, arg1)
}

// UpdateCounters mocks base method.
func (m *MockAdapter) UpdateCounters(arg0 context.Context, arg1 string, arg2 entityservice.AlarmCounters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounters", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounters indicates an expected call of UpdateCounters.
func (mr *MockAdapterMockRecorder) UpdateCounters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounters", reflect.TypeOf((*MockAdapter)(nil).UpdateCounters), arg0, arg1, arg2)
}

// MockCountersCache is a mock of CountersCache interface.
type MockCountersCache struct {
	ctrl     *gomock.Controller
	recorder *MockCountersCacheMockRecorder
}

// MockCountersCacheMockRecorder is the mock recorder for MockCountersCache.
type MockCountersCacheMockRecorder struct {
	mock *MockCountersCache
}

// NewMockCountersCache creates a new mock instance.
func NewMockCountersCache(ctrl *gomock.Controller) *MockCountersCache {
	mock := &MockCountersCache{ctrl: ctrl}
	mock.recorder = &MockCountersCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountersCache) EXPECT() *MockCountersCacheMockRecorder {
	return m.recorder
}

// ClearAll mocks base method.
func (m *MockCountersCache) ClearAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearAll indicates an expected call of ClearAll.
func (mr *MockCountersCacheMockRecorder) ClearAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAll", reflect.TypeOf((*MockCountersCache)(nil).ClearAll), arg0)
}

// KeepOnly mocks base method.
func (m *MockCountersCache) KeepOnly(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepOnly", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// KeepOnly indicates an expected call of KeepOnly.
func (mr *MockCountersCacheMockRecorder) KeepOnly(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepOnly", reflect.TypeOf((*MockCountersCache)(nil).KeepOnly), arg0, arg1)
}

// Remove mocks base method.
func (m *MockCountersCache) Remove(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockCountersCacheMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCountersCache)(nil).Remove), arg0, arg1)
}

// RemoveAndGet mocks base method.
func (m *MockCountersCache) RemoveAndGet(arg0 context.Context, arg1 string) (*entityservice.AlarmCounters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAndGet", arg0, arg1)
	ret0, _ := ret[0].(*entityservice.AlarmCounters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAndGet indicates an expected call of RemoveAndGet.
func (mr *MockCountersCacheMockRecorder) RemoveAndGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAndGet", reflect.TypeOf((*MockCountersCache)(nil).RemoveAndGet), arg0, arg1)
}

// Replace mocks base method.
func (m *MockCountersCache) Replace(arg0 context.Context, arg1 string, arg2 entityservice.AlarmCounters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockCountersCacheMockRecorder) Replace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockCountersCache)(nil).Replace), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockCountersCache) Update(arg0 context.Context, arg1 map[string]entityservice.AlarmCounters) (map[string]entityservice.AlarmCounters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(map[string]entityservice.AlarmCounters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCountersCacheMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCountersCache)(nil).Update), arg0, arg1)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorage) Get(arg0 context.Context, arg1 string) (*entityservice.ServiceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*entityservice.ServiceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockStorage) GetAll(arg0 context.Context) ([]entityservice.ServiceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entityservice.ServiceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStorageMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorage)(nil).GetAll), arg0)
}

// Reload mocks base method.
func (m *MockStorage) Reload(arg0 context.Context, arg1 string) (*entityservice.ServiceData, bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", arg0, arg1)
	ret0, _ := ret[0].(*entityservice.ServiceData)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Reload indicates an expected call of Reload.
func (mr *MockStorageMockRecorder) Reload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockStorage)(nil).Reload), arg0, arg1)
}

// ReloadAll mocks base method.
func (m *MockStorage) ReloadAll(arg0 context.Context) ([]entityservice.ServiceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", arg0)
	ret0, _ := ret[0].([]entityservice.ServiceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockStorageMockRecorder) ReloadAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockStorage)(nil).ReloadAll), arg0)
}
