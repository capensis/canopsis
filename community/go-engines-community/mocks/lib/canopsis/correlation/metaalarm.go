// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/correlation (interfaces: RulesAdapter)

// Package mock_correlation is a generated GoMock package.
package mock_correlation

import (
	context "context"
	reflect "reflect"

	correlation "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/correlation"
	gomock "github.com/golang/mock/gomock"
)

// MockRulesAdapter is a mock of RulesAdapter interface.
type MockRulesAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockRulesAdapterMockRecorder
}

// MockRulesAdapterMockRecorder is the mock recorder for MockRulesAdapter.
type MockRulesAdapterMockRecorder struct {
	mock *MockRulesAdapter
}

// NewMockRulesAdapter creates a new mock instance.
func NewMockRulesAdapter(ctrl *gomock.Controller) *MockRulesAdapter {
	mock := &MockRulesAdapter{ctrl: ctrl}
	mock.recorder = &MockRulesAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRulesAdapter) EXPECT() *MockRulesAdapterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRulesAdapter) Get(arg0 context.Context) ([]correlation.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]correlation.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRulesAdapterMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRulesAdapter)(nil).Get), arg0)
}

// GetManualRule mocks base method.
func (m *MockRulesAdapter) GetManualRule(arg0 context.Context) (correlation.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManualRule", arg0)
	ret0, _ := ret[0].(correlation.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManualRule indicates an expected call of GetManualRule.
func (mr *MockRulesAdapterMockRecorder) GetManualRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManualRule", reflect.TypeOf((*MockRulesAdapter)(nil).GetManualRule), arg0)
}

// GetRule mocks base method.
func (m *MockRulesAdapter) GetRule(arg0 context.Context, arg1 string) (correlation.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", arg0, arg1)
	ret0, _ := ret[0].(correlation.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockRulesAdapterMockRecorder) GetRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockRulesAdapter)(nil).GetRule), arg0, arg1)
}

// Save mocks base method.
func (m *MockRulesAdapter) Save(arg0 context.Context, arg1 correlation.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRulesAdapterMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRulesAdapter)(nil).Save), arg0, arg1)
}
