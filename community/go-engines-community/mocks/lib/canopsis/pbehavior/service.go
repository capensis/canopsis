// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/go-engines/lib/canopsis/pbehavior (interfaces: Service)

// Package mock_pbehavior is a generated GoMock package.
package mock_pbehavior

import (
	context "context"
	pbehavior "git.canopsis.net/canopsis/go-engines/lib/canopsis/pbehavior"
	types "git.canopsis.net/canopsis/go-engines/lib/canopsis/types"
	timespan "git.canopsis.net/canopsis/go-engines/lib/timespan"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Compute mocks base method
func (m *MockService) Compute(arg0 context.Context, arg1 timespan.Span) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compute indicates an expected call of Compute
func (mr *MockServiceMockRecorder) Compute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockService)(nil).Compute), arg0, arg1)
}

// GetPbehaviorStatus mocks base method
func (m *MockService) GetPbehaviorStatus(arg0 context.Context, arg1 []string, arg2 time.Time) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPbehaviorStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPbehaviorStatus indicates an expected call of GetPbehaviorStatus
func (mr *MockServiceMockRecorder) GetPbehaviorStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPbehaviorStatus", reflect.TypeOf((*MockService)(nil).GetPbehaviorStatus), arg0, arg1, arg2)
}

// GetSpan mocks base method
func (m *MockService) GetSpan() timespan.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpan")
	ret0, _ := ret[0].(timespan.Span)
	return ret0
}

// GetSpan indicates an expected call of GetSpan
func (mr *MockServiceMockRecorder) GetSpan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpan", reflect.TypeOf((*MockService)(nil).GetSpan))
}

// Recompute mocks base method
func (m *MockService) Recompute(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recompute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recompute indicates an expected call of Recompute
func (mr *MockServiceMockRecorder) Recompute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recompute", reflect.TypeOf((*MockService)(nil).Recompute), arg0, arg1)
}

// Resolve mocks base method
func (m *MockService) Resolve(arg0 context.Context, arg1 *types.Entity, arg2 time.Time) (pbehavior.ResolveResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0, arg1, arg2)
	ret0, _ := ret[0].(pbehavior.ResolveResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockServiceMockRecorder) Resolve(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockService)(nil).Resolve), arg0, arg1, arg2)
}
