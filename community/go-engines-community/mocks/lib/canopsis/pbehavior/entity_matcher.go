// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/canopsis/pbehavior/entity_matcher.go

// Package mock_pbehavior is a generated GoMock package.
package mock_pbehavior

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEntityMatcher is a mock of EntityMatcher interface
type MockEntityMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockEntityMatcherMockRecorder
}

// MockEntityMatcherMockRecorder is the mock recorder for MockEntityMatcher
type MockEntityMatcherMockRecorder struct {
	mock *MockEntityMatcher
}

// NewMockEntityMatcher creates a new mock instance
func NewMockEntityMatcher(ctrl *gomock.Controller) *MockEntityMatcher {
	mock := &MockEntityMatcher{ctrl: ctrl}
	mock.recorder = &MockEntityMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntityMatcher) EXPECT() *MockEntityMatcherMockRecorder {
	return m.recorder
}

// Match mocks base method
func (m *MockEntityMatcher) Match(ctx context.Context, entityID, filter string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", ctx, entityID, filter)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match
func (mr *MockEntityMatcherMockRecorder) Match(ctx, entityID, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockEntityMatcher)(nil).Match), ctx, entityID, filter)
}

// MatchAll mocks base method
func (m *MockEntityMatcher) MatchAll(ctx context.Context, entityID string, filters map[string]string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchAll", ctx, entityID, filters)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchAll indicates an expected call of MatchAll
func (mr *MockEntityMatcherMockRecorder) MatchAll(ctx, entityID, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchAll", reflect.TypeOf((*MockEntityMatcher)(nil).MatchAll), ctx, entityID, filters)
}

// MatchForAll mocks base method
func (m *MockEntityMatcher) MatchForAll(ctx context.Context, entityIDs []string, filters map[string]string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchForAll", ctx, entityIDs, filters)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchForAll indicates an expected call of MatchForAll
func (mr *MockEntityMatcherMockRecorder) MatchForAll(ctx, entityIDs, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchForAll", reflect.TypeOf((*MockEntityMatcher)(nil).MatchForAll), ctx, entityIDs, filters)
}
