// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/pbehavior (interfaces: Service,EntityMatcher,ModelProvider,EventManager)

// Package mock_pbehavior is a generated GoMock package.
package mock_pbehavior

import (
	context "context"
	pbehavior "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/pbehavior"
	types "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/types"
	timespan "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/timespan"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Compute mocks base method
func (m *MockService) Compute(arg0 context.Context, arg1 timespan.Span) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compute indicates an expected call of Compute
func (mr *MockServiceMockRecorder) Compute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockService)(nil).Compute), arg0, arg1)
}

// GetComputedPbehaviorsCount mocks base method
func (m *MockService) GetComputedPbehaviorsCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputedPbehaviorsCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetComputedPbehaviorsCount indicates an expected call of GetComputedPbehaviorsCount
func (mr *MockServiceMockRecorder) GetComputedPbehaviorsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputedPbehaviorsCount", reflect.TypeOf((*MockService)(nil).GetComputedPbehaviorsCount))
}

// GetPbehaviorStatus mocks base method
func (m *MockService) GetPbehaviorStatus(arg0 context.Context, arg1 []string, arg2 time.Time) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPbehaviorStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPbehaviorStatus indicates an expected call of GetPbehaviorStatus
func (mr *MockServiceMockRecorder) GetPbehaviorStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPbehaviorStatus", reflect.TypeOf((*MockService)(nil).GetPbehaviorStatus), arg0, arg1, arg2)
}

// GetSpan mocks base method
func (m *MockService) GetSpan() timespan.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpan")
	ret0, _ := ret[0].(timespan.Span)
	return ret0
}

// GetSpan indicates an expected call of GetSpan
func (mr *MockServiceMockRecorder) GetSpan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpan", reflect.TypeOf((*MockService)(nil).GetSpan))
}

// Recompute mocks base method
func (m *MockService) Recompute(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recompute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recompute indicates an expected call of Recompute
func (mr *MockServiceMockRecorder) Recompute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recompute", reflect.TypeOf((*MockService)(nil).Recompute), arg0, arg1)
}

// Resolve mocks base method
func (m *MockService) Resolve(arg0 context.Context, arg1 *types.Entity, arg2 time.Time) (pbehavior.ResolveResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0, arg1, arg2)
	ret0, _ := ret[0].(pbehavior.ResolveResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockServiceMockRecorder) Resolve(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockService)(nil).Resolve), arg0, arg1, arg2)
}

// MockEntityMatcher is a mock of EntityMatcher interface
type MockEntityMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockEntityMatcherMockRecorder
}

// MockEntityMatcherMockRecorder is the mock recorder for MockEntityMatcher
type MockEntityMatcherMockRecorder struct {
	mock *MockEntityMatcher
}

// NewMockEntityMatcher creates a new mock instance
func NewMockEntityMatcher(ctrl *gomock.Controller) *MockEntityMatcher {
	mock := &MockEntityMatcher{ctrl: ctrl}
	mock.recorder = &MockEntityMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntityMatcher) EXPECT() *MockEntityMatcherMockRecorder {
	return m.recorder
}

// MatchAll mocks base method
func (m *MockEntityMatcher) MatchAll(arg0 context.Context, arg1 string, arg2 map[string]string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchAll indicates an expected call of MatchAll
func (mr *MockEntityMatcherMockRecorder) MatchAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchAll", reflect.TypeOf((*MockEntityMatcher)(nil).MatchAll), arg0, arg1, arg2)
}

// MockModelProvider is a mock of ModelProvider interface
type MockModelProvider struct {
	ctrl     *gomock.Controller
	recorder *MockModelProviderMockRecorder
}

// MockModelProviderMockRecorder is the mock recorder for MockModelProvider
type MockModelProviderMockRecorder struct {
	mock *MockModelProvider
}

// NewMockModelProvider creates a new mock instance
func NewMockModelProvider(ctrl *gomock.Controller) *MockModelProvider {
	mock := &MockModelProvider{ctrl: ctrl}
	mock.recorder = &MockModelProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelProvider) EXPECT() *MockModelProviderMockRecorder {
	return m.recorder
}

// GetEnabledPbehavior mocks base method
func (m *MockModelProvider) GetEnabledPbehavior(arg0 context.Context, arg1 string) (*pbehavior.PBehavior, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledPbehavior", arg0, arg1)
	ret0, _ := ret[0].(*pbehavior.PBehavior)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledPbehavior indicates an expected call of GetEnabledPbehavior
func (mr *MockModelProviderMockRecorder) GetEnabledPbehavior(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledPbehavior", reflect.TypeOf((*MockModelProvider)(nil).GetEnabledPbehavior), arg0, arg1)
}

// GetEnabledPbehaviors mocks base method
func (m *MockModelProvider) GetEnabledPbehaviors(arg0 context.Context) (map[string]*pbehavior.PBehavior, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledPbehaviors", arg0)
	ret0, _ := ret[0].(map[string]*pbehavior.PBehavior)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledPbehaviors indicates an expected call of GetEnabledPbehaviors
func (mr *MockModelProviderMockRecorder) GetEnabledPbehaviors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledPbehaviors", reflect.TypeOf((*MockModelProvider)(nil).GetEnabledPbehaviors), arg0)
}

// GetExceptions mocks base method
func (m *MockModelProvider) GetExceptions(arg0 context.Context) (map[string]*pbehavior.Exception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExceptions", arg0)
	ret0, _ := ret[0].(map[string]*pbehavior.Exception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExceptions indicates an expected call of GetExceptions
func (mr *MockModelProviderMockRecorder) GetExceptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExceptions", reflect.TypeOf((*MockModelProvider)(nil).GetExceptions), arg0)
}

// GetReasons mocks base method
func (m *MockModelProvider) GetReasons(arg0 context.Context) (map[string]*pbehavior.Reason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReasons", arg0)
	ret0, _ := ret[0].(map[string]*pbehavior.Reason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReasons indicates an expected call of GetReasons
func (mr *MockModelProviderMockRecorder) GetReasons(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReasons", reflect.TypeOf((*MockModelProvider)(nil).GetReasons), arg0)
}

// GetTypes mocks base method
func (m *MockModelProvider) GetTypes(arg0 context.Context) (map[string]*pbehavior.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypes", arg0)
	ret0, _ := ret[0].(map[string]*pbehavior.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypes indicates an expected call of GetTypes
func (mr *MockModelProviderMockRecorder) GetTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypes", reflect.TypeOf((*MockModelProvider)(nil).GetTypes), arg0)
}

// MockEventManager is a mock of EventManager interface
type MockEventManager struct {
	ctrl     *gomock.Controller
	recorder *MockEventManagerMockRecorder
}

// MockEventManagerMockRecorder is the mock recorder for MockEventManager
type MockEventManagerMockRecorder struct {
	mock *MockEventManager
}

// NewMockEventManager creates a new mock instance
func NewMockEventManager(ctrl *gomock.Controller) *MockEventManager {
	mock := &MockEventManager{ctrl: ctrl}
	mock.recorder = &MockEventManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventManager) EXPECT() *MockEventManagerMockRecorder {
	return m.recorder
}

// GetEvent mocks base method
func (m *MockEventManager) GetEvent(arg0 pbehavior.ResolveResult, arg1 types.Alarm, arg2 time.Time) types.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Event)
	return ret0
}

// GetEvent indicates an expected call of GetEvent
func (mr *MockEventManagerMockRecorder) GetEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventManager)(nil).GetEvent), arg0, arg1, arg2)
}
