// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/canopsis/pbehavior/model_provider.go

// Package mock_pbehavior is a generated GoMock package.
package mock_pbehavior

import (
	context "context"
	pbehavior "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/pbehavior"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModelProvider is a mock of ModelProvider interface
type MockModelProvider struct {
	ctrl     *gomock.Controller
	recorder *MockModelProviderMockRecorder
}

// MockModelProviderMockRecorder is the mock recorder for MockModelProvider
type MockModelProviderMockRecorder struct {
	mock *MockModelProvider
}

// NewMockModelProvider creates a new mock instance
func NewMockModelProvider(ctrl *gomock.Controller) *MockModelProvider {
	mock := &MockModelProvider{ctrl: ctrl}
	mock.recorder = &MockModelProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelProvider) EXPECT() *MockModelProviderMockRecorder {
	return m.recorder
}

// GetTypes mocks base method
func (m *MockModelProvider) GetTypes(ctx context.Context) (map[string]*pbehavior.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypes", ctx)
	ret0, _ := ret[0].(map[string]*pbehavior.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypes indicates an expected call of GetTypes
func (mr *MockModelProviderMockRecorder) GetTypes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypes", reflect.TypeOf((*MockModelProvider)(nil).GetTypes), ctx)
}

// GetEnabledPbehaviors mocks base method
func (m *MockModelProvider) GetEnabledPbehaviors(ctx context.Context) (map[string]*pbehavior.PBehavior, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledPbehaviors", ctx)
	ret0, _ := ret[0].(map[string]*pbehavior.PBehavior)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledPbehaviors indicates an expected call of GetEnabledPbehaviors
func (mr *MockModelProviderMockRecorder) GetEnabledPbehaviors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledPbehaviors", reflect.TypeOf((*MockModelProvider)(nil).GetEnabledPbehaviors), ctx)
}

// GetEnabledPbehavior mocks base method
func (m *MockModelProvider) GetEnabledPbehavior(ctx context.Context, id string) (*pbehavior.PBehavior, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledPbehavior", ctx, id)
	ret0, _ := ret[0].(*pbehavior.PBehavior)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledPbehavior indicates an expected call of GetEnabledPbehavior
func (mr *MockModelProviderMockRecorder) GetEnabledPbehavior(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledPbehavior", reflect.TypeOf((*MockModelProvider)(nil).GetEnabledPbehavior), ctx, id)
}

// GetExceptions mocks base method
func (m *MockModelProvider) GetExceptions(ctx context.Context) (map[string]*pbehavior.Exception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExceptions", ctx)
	ret0, _ := ret[0].(map[string]*pbehavior.Exception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExceptions indicates an expected call of GetExceptions
func (mr *MockModelProviderMockRecorder) GetExceptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExceptions", reflect.TypeOf((*MockModelProvider)(nil).GetExceptions), ctx)
}

// GetReasons mocks base method
func (m *MockModelProvider) GetReasons(ctx context.Context) (map[string]*pbehavior.Reason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReasons", ctx)
	ret0, _ := ret[0].(map[string]*pbehavior.Reason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReasons indicates an expected call of GetReasons
func (mr *MockModelProviderMockRecorder) GetReasons(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReasons", reflect.TypeOf((*MockModelProvider)(nil).GetReasons), ctx)
}
