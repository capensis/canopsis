// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/techmetrics (interfaces: Sender)

// Package mock_techmetrics is a generated GoMock package.
package mock_techmetrics

import (
	context "context"
	reflect "reflect"
	time "time"

	techmetrics "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/techmetrics"
	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockSender) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockSenderMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSender)(nil).Run), arg0)
}

// SendApiRequest mocks base method.
func (m *MockSender) SendApiRequest(arg0 techmetrics.ApiRequestMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendApiRequest", arg0)
}

// SendApiRequest indicates an expected call of SendApiRequest.
func (mr *MockSenderMockRecorder) SendApiRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendApiRequest", reflect.TypeOf((*MockSender)(nil).SendApiRequest), arg0)
}

// SendAxeEvent mocks base method.
func (m *MockSender) SendAxeEvent(arg0 techmetrics.AxeEventMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAxeEvent", arg0)
}

// SendAxeEvent indicates an expected call of SendAxeEvent.
func (mr *MockSenderMockRecorder) SendAxeEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAxeEvent", reflect.TypeOf((*MockSender)(nil).SendAxeEvent), arg0)
}

// SendAxePeriodical mocks base method.
func (m *MockSender) SendAxePeriodical(arg0 techmetrics.AxePeriodicalMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAxePeriodical", arg0)
}

// SendAxePeriodical indicates an expected call of SendAxePeriodical.
func (mr *MockSenderMockRecorder) SendAxePeriodical(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAxePeriodical", reflect.TypeOf((*MockSender)(nil).SendAxePeriodical), arg0)
}

// SendCheEntityInfo mocks base method.
func (m *MockSender) SendCheEntityInfo(arg0 time.Time, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCheEntityInfo", arg0, arg1)
}

// SendCheEntityInfo indicates an expected call of SendCheEntityInfo.
func (mr *MockSenderMockRecorder) SendCheEntityInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCheEntityInfo", reflect.TypeOf((*MockSender)(nil).SendCheEntityInfo), arg0, arg1)
}

// SendCheEvent mocks base method.
func (m *MockSender) SendCheEvent(arg0 techmetrics.CheEventMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCheEvent", arg0)
}

// SendCheEvent indicates an expected call of SendCheEvent.
func (mr *MockSenderMockRecorder) SendCheEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCheEvent", reflect.TypeOf((*MockSender)(nil).SendCheEvent), arg0)
}

// SendCorrelationRetries mocks base method.
func (m *MockSender) SendCorrelationRetries(arg0 techmetrics.CorrelationRetriesMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCorrelationRetries", arg0)
}

// SendCorrelationRetries indicates an expected call of SendCorrelationRetries.
func (mr *MockSenderMockRecorder) SendCorrelationRetries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCorrelationRetries", reflect.TypeOf((*MockSender)(nil).SendCorrelationRetries), arg0)
}

// SendPBehaviorPeriodical mocks base method.
func (m *MockSender) SendPBehaviorPeriodical(arg0 techmetrics.PbehaviorPeriodicalMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendPBehaviorPeriodical", arg0)
}

// SendPBehaviorPeriodical indicates an expected call of SendPBehaviorPeriodical.
func (mr *MockSenderMockRecorder) SendPBehaviorPeriodical(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPBehaviorPeriodical", reflect.TypeOf((*MockSender)(nil).SendPBehaviorPeriodical), arg0)
}

// SendQueue mocks base method.
func (m *MockSender) SendQueue(arg0 string, arg1 time.Time, arg2 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendQueue", arg0, arg1, arg2)
}

// SendQueue indicates an expected call of SendQueue.
func (mr *MockSenderMockRecorder) SendQueue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendQueue", reflect.TypeOf((*MockSender)(nil).SendQueue), arg0, arg1, arg2)
}

// SendSimpleEvent mocks base method.
func (m *MockSender) SendSimpleEvent(arg0 string, arg1 techmetrics.EventMetric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendSimpleEvent", arg0, arg1)
}

// SendSimpleEvent indicates an expected call of SendSimpleEvent.
func (mr *MockSenderMockRecorder) SendSimpleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSimpleEvent", reflect.TypeOf((*MockSender)(nil).SendSimpleEvent), arg0, arg1)
}
