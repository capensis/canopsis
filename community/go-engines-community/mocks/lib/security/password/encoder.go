// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/security/password/encoder.go

// Package mock_password is a generated GoMock package.
package mock_password

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEncoder is a mock of Encoder interface
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// EncodePassword mocks base method
func (m *MockEncoder) EncodePassword(password []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodePassword", password)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// EncodePassword indicates an expected call of EncodePassword
func (mr *MockEncoderMockRecorder) EncodePassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodePassword", reflect.TypeOf((*MockEncoder)(nil).EncodePassword), password)
}

// IsValidPassword mocks base method
func (m *MockEncoder) IsValidPassword(encodedPassword, password []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidPassword", encodedPassword, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidPassword indicates an expected call of IsValidPassword
func (mr *MockEncoderMockRecorder) IsValidPassword(encodedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidPassword", reflect.TypeOf((*MockEncoder)(nil).IsValidPassword), encodedPassword, password)
}
