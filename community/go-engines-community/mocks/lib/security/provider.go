// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/security/provider.go

// Package mock_security is a generated GoMock package.
package mock_security

import (
	security "git.canopsis.net/canopsis/go-engines/lib/security"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Auth mocks base method
func (m *MockProvider) Auth(username, password string) (*security.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", username, password)
	ret0, _ := ret[0].(*security.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth
func (mr *MockProviderMockRecorder) Auth(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockProvider)(nil).Auth), username, password)
}

// MockHttpProvider is a mock of HttpProvider interface
type MockHttpProvider struct {
	ctrl     *gomock.Controller
	recorder *MockHttpProviderMockRecorder
}

// MockHttpProviderMockRecorder is the mock recorder for MockHttpProvider
type MockHttpProviderMockRecorder struct {
	mock *MockHttpProvider
}

// NewMockHttpProvider creates a new mock instance
func NewMockHttpProvider(ctrl *gomock.Controller) *MockHttpProvider {
	mock := &MockHttpProvider{ctrl: ctrl}
	mock.recorder = &MockHttpProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpProvider) EXPECT() *MockHttpProviderMockRecorder {
	return m.recorder
}

// Auth mocks base method
func (m *MockHttpProvider) Auth(arg0 *http.Request) (*security.User, error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0)
	ret0, _ := ret[0].(*security.User)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Auth indicates an expected call of Auth
func (mr *MockHttpProviderMockRecorder) Auth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockHttpProvider)(nil).Auth), arg0)
}

// MockUserProvider is a mock of UserProvider interface
type MockUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserProviderMockRecorder
}

// MockUserProviderMockRecorder is the mock recorder for MockUserProvider
type MockUserProviderMockRecorder struct {
	mock *MockUserProvider
}

// NewMockUserProvider creates a new mock instance
func NewMockUserProvider(ctrl *gomock.Controller) *MockUserProvider {
	mock := &MockUserProvider{ctrl: ctrl}
	mock.recorder = &MockUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserProvider) EXPECT() *MockUserProviderMockRecorder {
	return m.recorder
}

// FindByUsername mocks base method
func (m *MockUserProvider) FindByUsername(arg0 string) (*security.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", arg0)
	ret0, _ := ret[0].(*security.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername
func (mr *MockUserProviderMockRecorder) FindByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUserProvider)(nil).FindByUsername), arg0)
}

// FindByAuthApiKey mocks base method
func (m *MockUserProvider) FindByAuthApiKey(arg0 string) (*security.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAuthApiKey", arg0)
	ret0, _ := ret[0].(*security.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAuthApiKey indicates an expected call of FindByAuthApiKey
func (mr *MockUserProviderMockRecorder) FindByAuthApiKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAuthApiKey", reflect.TypeOf((*MockUserProvider)(nil).FindByAuthApiKey), arg0)
}

// FindByID mocks base method
func (m *MockUserProvider) FindByID(arg0 string) (*security.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*security.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockUserProviderMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserProvider)(nil).FindByID), arg0)
}

// Save mocks base method
func (m *MockUserProvider) Save(user *security.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockUserProviderMockRecorder) Save(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserProvider)(nil).Save), user)
}

// FindByExternalSource mocks base method
func (m *MockUserProvider) FindByExternalSource(externalID string, source security.Source) (*security.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByExternalSource", externalID, source)
	ret0, _ := ret[0].(*security.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByExternalSource indicates an expected call of FindByExternalSource
func (mr *MockUserProviderMockRecorder) FindByExternalSource(externalID, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByExternalSource", reflect.TypeOf((*MockUserProvider)(nil).FindByExternalSource), externalID, source)
}

// MockConfigProvider is a mock of ConfigProvider interface
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// LoadLdapConfig mocks base method
func (m *MockConfigProvider) LoadLdapConfig() (*security.LdapConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLdapConfig")
	ret0, _ := ret[0].(*security.LdapConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadLdapConfig indicates an expected call of LoadLdapConfig
func (mr *MockConfigProviderMockRecorder) LoadLdapConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLdapConfig", reflect.TypeOf((*MockConfigProvider)(nil).LoadLdapConfig))
}

// LoadCasConfig mocks base method
func (m *MockConfigProvider) LoadCasConfig() (*security.CasConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCasConfig")
	ret0, _ := ret[0].(*security.CasConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCasConfig indicates an expected call of LoadCasConfig
func (mr *MockConfigProviderMockRecorder) LoadCasConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCasConfig", reflect.TypeOf((*MockConfigProvider)(nil).LoadCasConfig))
}
