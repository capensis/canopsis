// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/metrics (interfaces: Sender)

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	context "context"
	reflect "reflect"
	time "time"

	types "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/types"
	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockSender) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockSenderMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSender)(nil).Run), arg0)
}

// SendAck mocks base method.
func (m *MockSender) SendAck(arg0 types.Alarm, arg1 string, arg2 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAck", arg0, arg1, arg2)
}

// SendAck indicates an expected call of SendAck.
func (mr *MockSenderMockRecorder) SendAck(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAck", reflect.TypeOf((*MockSender)(nil).SendAck), arg0, arg1, arg2)
}

// SendAutoInstructionAssignForInstructions mocks base method.
func (m *MockSender) SendAutoInstructionAssignForInstructions(arg0 []string, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAutoInstructionAssignForInstructions", arg0, arg1)
}

// SendAutoInstructionAssignForInstructions indicates an expected call of SendAutoInstructionAssignForInstructions.
func (mr *MockSenderMockRecorder) SendAutoInstructionAssignForInstructions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAutoInstructionAssignForInstructions", reflect.TypeOf((*MockSender)(nil).SendAutoInstructionAssignForInstructions), arg0, arg1)
}

// SendAutoInstructionExecutionForInstruction mocks base method.
func (m *MockSender) SendAutoInstructionExecutionForInstruction(arg0 string, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAutoInstructionExecutionForInstruction", arg0, arg1)
}

// SendAutoInstructionExecutionForInstruction indicates an expected call of SendAutoInstructionExecutionForInstruction.
func (mr *MockSenderMockRecorder) SendAutoInstructionExecutionForInstruction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAutoInstructionExecutionForInstruction", reflect.TypeOf((*MockSender)(nil).SendAutoInstructionExecutionForInstruction), arg0, arg1)
}

// SendAutoInstructionExecutionStart mocks base method.
func (m *MockSender) SendAutoInstructionExecutionStart(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAutoInstructionExecutionStart", arg0, arg1)
}

// SendAutoInstructionExecutionStart indicates an expected call of SendAutoInstructionExecutionStart.
func (mr *MockSenderMockRecorder) SendAutoInstructionExecutionStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAutoInstructionExecutionStart", reflect.TypeOf((*MockSender)(nil).SendAutoInstructionExecutionStart), arg0, arg1)
}

// SendCancelAck mocks base method.
func (m *MockSender) SendCancelAck(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCancelAck", arg0, arg1)
}

// SendCancelAck indicates an expected call of SendCancelAck.
func (mr *MockSenderMockRecorder) SendCancelAck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCancelAck", reflect.TypeOf((*MockSender)(nil).SendCancelAck), arg0, arg1)
}

// SendCorrelation mocks base method.
func (m *MockSender) SendCorrelation(arg0 time.Time, arg1 types.Alarm) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCorrelation", arg0, arg1)
}

// SendCorrelation indicates an expected call of SendCorrelation.
func (mr *MockSenderMockRecorder) SendCorrelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCorrelation", reflect.TypeOf((*MockSender)(nil).SendCorrelation), arg0, arg1)
}

// SendCreate mocks base method.
func (m *MockSender) SendCreate(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCreate", arg0, arg1)
}

// SendCreate indicates an expected call of SendCreate.
func (mr *MockSenderMockRecorder) SendCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCreate", reflect.TypeOf((*MockSender)(nil).SendCreate), arg0, arg1)
}

// SendCreateAndPbhEnter mocks base method.
func (m *MockSender) SendCreateAndPbhEnter(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCreateAndPbhEnter", arg0, arg1)
}

// SendCreateAndPbhEnter indicates an expected call of SendCreateAndPbhEnter.
func (mr *MockSenderMockRecorder) SendCreateAndPbhEnter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCreateAndPbhEnter", reflect.TypeOf((*MockSender)(nil).SendCreateAndPbhEnter), arg0, arg1)
}

// SendEventMetrics mocks base method.
func (m *MockSender) SendEventMetrics(arg0 types.Alarm, arg1 types.Entity, arg2 types.AlarmChange, arg3 time.Time, arg4, arg5, arg6, arg7 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendEventMetrics", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// SendEventMetrics indicates an expected call of SendEventMetrics.
func (mr *MockSenderMockRecorder) SendEventMetrics(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEventMetrics", reflect.TypeOf((*MockSender)(nil).SendEventMetrics), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// SendInstructionAssignForAlarm mocks base method.
func (m *MockSender) SendInstructionAssignForAlarm(arg0 string, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendInstructionAssignForAlarm", arg0, arg1)
}

// SendInstructionAssignForAlarm indicates an expected call of SendInstructionAssignForAlarm.
func (mr *MockSenderMockRecorder) SendInstructionAssignForAlarm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstructionAssignForAlarm", reflect.TypeOf((*MockSender)(nil).SendInstructionAssignForAlarm), arg0, arg1)
}

// SendInstructionAssignForAlarms mocks base method.
func (m *MockSender) SendInstructionAssignForAlarms(arg0 []string, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendInstructionAssignForAlarms", arg0, arg1)
}

// SendInstructionAssignForAlarms indicates an expected call of SendInstructionAssignForAlarms.
func (mr *MockSenderMockRecorder) SendInstructionAssignForAlarms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstructionAssignForAlarms", reflect.TypeOf((*MockSender)(nil).SendInstructionAssignForAlarms), arg0, arg1)
}

// SendInstructionAssignForInstruction mocks base method.
func (m *MockSender) SendInstructionAssignForInstruction(arg0 string, arg1 time.Time, arg2 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendInstructionAssignForInstruction", arg0, arg1, arg2)
}

// SendInstructionAssignForInstruction indicates an expected call of SendInstructionAssignForInstruction.
func (mr *MockSenderMockRecorder) SendInstructionAssignForInstruction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstructionAssignForInstruction", reflect.TypeOf((*MockSender)(nil).SendInstructionAssignForInstruction), arg0, arg1, arg2)
}

// SendInstructionAssignForInstructions mocks base method.
func (m *MockSender) SendInstructionAssignForInstructions(arg0 []string, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendInstructionAssignForInstructions", arg0, arg1)
}

// SendInstructionAssignForInstructions indicates an expected call of SendInstructionAssignForInstructions.
func (mr *MockSenderMockRecorder) SendInstructionAssignForInstructions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstructionAssignForInstructions", reflect.TypeOf((*MockSender)(nil).SendInstructionAssignForInstructions), arg0, arg1)
}

// SendInstructionExecutionForAlarm mocks base method.
func (m *MockSender) SendInstructionExecutionForAlarm(arg0 string, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendInstructionExecutionForAlarm", arg0, arg1)
}

// SendInstructionExecutionForAlarm indicates an expected call of SendInstructionExecutionForAlarm.
func (mr *MockSenderMockRecorder) SendInstructionExecutionForAlarm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstructionExecutionForAlarm", reflect.TypeOf((*MockSender)(nil).SendInstructionExecutionForAlarm), arg0, arg1)
}

// SendInstructionExecutionForInstruction mocks base method.
func (m *MockSender) SendInstructionExecutionForInstruction(arg0 string, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendInstructionExecutionForInstruction", arg0, arg1)
}

// SendInstructionExecutionForInstruction indicates an expected call of SendInstructionExecutionForInstruction.
func (mr *MockSenderMockRecorder) SendInstructionExecutionForInstruction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstructionExecutionForInstruction", reflect.TypeOf((*MockSender)(nil).SendInstructionExecutionForInstruction), arg0, arg1)
}

// SendNotAckedInDayDec mocks base method.
func (m *MockSender) SendNotAckedInDayDec(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotAckedInDayDec", arg0, arg1)
}

// SendNotAckedInDayDec indicates an expected call of SendNotAckedInDayDec.
func (mr *MockSenderMockRecorder) SendNotAckedInDayDec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotAckedInDayDec", reflect.TypeOf((*MockSender)(nil).SendNotAckedInDayDec), arg0, arg1)
}

// SendNotAckedInDayInc mocks base method.
func (m *MockSender) SendNotAckedInDayInc(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotAckedInDayInc", arg0, arg1)
}

// SendNotAckedInDayInc indicates an expected call of SendNotAckedInDayInc.
func (mr *MockSenderMockRecorder) SendNotAckedInDayInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotAckedInDayInc", reflect.TypeOf((*MockSender)(nil).SendNotAckedInDayInc), arg0, arg1)
}

// SendNotAckedInFourHoursDec mocks base method.
func (m *MockSender) SendNotAckedInFourHoursDec(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotAckedInFourHoursDec", arg0, arg1)
}

// SendNotAckedInFourHoursDec indicates an expected call of SendNotAckedInFourHoursDec.
func (mr *MockSenderMockRecorder) SendNotAckedInFourHoursDec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotAckedInFourHoursDec", reflect.TypeOf((*MockSender)(nil).SendNotAckedInFourHoursDec), arg0, arg1)
}

// SendNotAckedInFourHoursInc mocks base method.
func (m *MockSender) SendNotAckedInFourHoursInc(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotAckedInFourHoursInc", arg0, arg1)
}

// SendNotAckedInFourHoursInc indicates an expected call of SendNotAckedInFourHoursInc.
func (mr *MockSenderMockRecorder) SendNotAckedInFourHoursInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotAckedInFourHoursInc", reflect.TypeOf((*MockSender)(nil).SendNotAckedInFourHoursInc), arg0, arg1)
}

// SendNotAckedInHourDec mocks base method.
func (m *MockSender) SendNotAckedInHourDec(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotAckedInHourDec", arg0, arg1)
}

// SendNotAckedInHourDec indicates an expected call of SendNotAckedInHourDec.
func (mr *MockSenderMockRecorder) SendNotAckedInHourDec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotAckedInHourDec", reflect.TypeOf((*MockSender)(nil).SendNotAckedInHourDec), arg0, arg1)
}

// SendNotAckedInHourInc mocks base method.
func (m *MockSender) SendNotAckedInHourInc(arg0 types.Alarm, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotAckedInHourInc", arg0, arg1)
}

// SendNotAckedInHourInc indicates an expected call of SendNotAckedInHourInc.
func (mr *MockSenderMockRecorder) SendNotAckedInHourInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotAckedInHourInc", reflect.TypeOf((*MockSender)(nil).SendNotAckedInHourInc), arg0, arg1)
}

// SendPbhEnter mocks base method.
func (m *MockSender) SendPbhEnter(arg0 types.Alarm, arg1 types.Entity) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendPbhEnter", arg0, arg1)
}

// SendPbhEnter indicates an expected call of SendPbhEnter.
func (mr *MockSenderMockRecorder) SendPbhEnter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPbhEnter", reflect.TypeOf((*MockSender)(nil).SendPbhEnter), arg0, arg1)
}

// SendPbhLeave mocks base method.
func (m *MockSender) SendPbhLeave(arg0 types.Entity, arg1 time.Time, arg2 string, arg3 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendPbhLeave", arg0, arg1, arg2, arg3)
}

// SendPbhLeave indicates an expected call of SendPbhLeave.
func (mr *MockSenderMockRecorder) SendPbhLeave(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPbhLeave", reflect.TypeOf((*MockSender)(nil).SendPbhLeave), arg0, arg1, arg2, arg3)
}

// SendPbhLeaveAndEnter mocks base method.
func (m *MockSender) SendPbhLeaveAndEnter(arg0 types.Alarm, arg1 types.Entity, arg2 string, arg3 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendPbhLeaveAndEnter", arg0, arg1, arg2, arg3)
}

// SendPbhLeaveAndEnter indicates an expected call of SendPbhLeaveAndEnter.
func (mr *MockSenderMockRecorder) SendPbhLeaveAndEnter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPbhLeaveAndEnter", reflect.TypeOf((*MockSender)(nil).SendPbhLeaveAndEnter), arg0, arg1, arg2, arg3)
}

// SendPerfData mocks base method.
func (m *MockSender) SendPerfData(arg0 time.Time, arg1, arg2 string, arg3 float64, arg4 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendPerfData", arg0, arg1, arg2, arg3, arg4)
}

// SendPerfData indicates an expected call of SendPerfData.
func (mr *MockSenderMockRecorder) SendPerfData(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPerfData", reflect.TypeOf((*MockSender)(nil).SendPerfData), arg0, arg1, arg2, arg3, arg4)
}

// SendRemoveNotAckedMetric mocks base method.
func (m *MockSender) SendRemoveNotAckedMetric(arg0 types.Alarm, arg1 time.Time, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendRemoveNotAckedMetric", arg0, arg1, arg2)
}

// SendRemoveNotAckedMetric indicates an expected call of SendRemoveNotAckedMetric.
func (mr *MockSenderMockRecorder) SendRemoveNotAckedMetric(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRemoveNotAckedMetric", reflect.TypeOf((*MockSender)(nil).SendRemoveNotAckedMetric), arg0, arg1, arg2)
}

// SendResolve mocks base method.
func (m *MockSender) SendResolve(arg0 types.Alarm, arg1 types.Entity, arg2 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendResolve", arg0, arg1, arg2)
}

// SendResolve indicates an expected call of SendResolve.
func (mr *MockSenderMockRecorder) SendResolve(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResolve", reflect.TypeOf((*MockSender)(nil).SendResolve), arg0, arg1, arg2)
}

// SendSliMetric mocks base method.
func (m *MockSender) SendSliMetric(arg0 time.Time, arg1 types.Alarm, arg2 types.Entity) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendSliMetric", arg0, arg1, arg2)
}

// SendSliMetric indicates an expected call of SendSliMetric.
func (mr *MockSenderMockRecorder) SendSliMetric(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSliMetric", reflect.TypeOf((*MockSender)(nil).SendSliMetric), arg0, arg1, arg2)
}

// SendTicket mocks base method.
func (m *MockSender) SendTicket(arg0 types.Alarm, arg1 string, arg2 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendTicket", arg0, arg1, arg2)
}

// SendTicket indicates an expected call of SendTicket.
func (mr *MockSenderMockRecorder) SendTicket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTicket", reflect.TypeOf((*MockSender)(nil).SendTicket), arg0, arg1, arg2)
}

// SendUpdateState mocks base method.
func (m *MockSender) SendUpdateState(arg0 types.Alarm, arg1 types.Entity, arg2 types.CpsNumber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendUpdateState", arg0, arg1, arg2)
}

// SendUpdateState indicates an expected call of SendUpdateState.
func (mr *MockSenderMockRecorder) SendUpdateState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUpdateState", reflect.TypeOf((*MockSender)(nil).SendUpdateState), arg0, arg1, arg2)
}

// SendUserActivity mocks base method.
func (m *MockSender) SendUserActivity(arg0 time.Time, arg1 string, arg2 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendUserActivity", arg0, arg1, arg2)
}

// SendUserActivity indicates an expected call of SendUserActivity.
func (mr *MockSenderMockRecorder) SendUserActivity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserActivity", reflect.TypeOf((*MockSender)(nil).SendUserActivity), arg0, arg1, arg2)
}
