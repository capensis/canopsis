// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/statesetting (interfaces: Assigner)

// Package mock_statesetting is a generated GoMock package.
package mock_statesetting

import (
	context "context"
	reflect "reflect"

	types "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/types"
	mongo "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/mongo"
	gomock "github.com/golang/mock/gomock"
)

// MockAssigner is a mock of Assigner interface.
type MockAssigner struct {
	ctrl     *gomock.Controller
	recorder *MockAssignerMockRecorder
}

// MockAssignerMockRecorder is the mock recorder for MockAssigner.
type MockAssignerMockRecorder struct {
	mock *MockAssigner
}

// NewMockAssigner creates a new mock instance.
func NewMockAssigner(ctrl *gomock.Controller) *MockAssigner {
	mock := &MockAssigner{ctrl: ctrl}
	mock.recorder = &MockAssignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssigner) EXPECT() *MockAssignerMockRecorder {
	return m.recorder
}

// AssignStateSetting mocks base method.
func (m *MockAssigner) AssignStateSetting(arg0 context.Context, arg1 *types.Entity, arg2 mongo.CommandsRegister) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignStateSetting", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignStateSetting indicates an expected call of AssignStateSetting.
func (mr *MockAssignerMockRecorder) AssignStateSetting(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignStateSetting", reflect.TypeOf((*MockAssigner)(nil).AssignStateSetting), arg0, arg1, arg2)
}

// LoadRules mocks base method.
func (m *MockAssigner) LoadRules(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadRules indicates an expected call of LoadRules.
func (mr *MockAssignerMockRecorder) LoadRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRules", reflect.TypeOf((*MockAssigner)(nil).LoadRules), arg0)
}
