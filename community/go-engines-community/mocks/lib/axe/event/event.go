// Code generated by MockGen. DO NOT EDIT.
// Source: git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/axe/event (interfaces: MetaAlarmPostProcessor)

// Package mock_event is a generated GoMock package.
package mock_event

import (
	context "context"
	reflect "reflect"

	rpc "git.canopsis.net/canopsis/canopsis-community/community/go-engines-community/lib/canopsis/rpc"
	gomock "github.com/golang/mock/gomock"
)

// MockMetaAlarmPostProcessor is a mock of MetaAlarmPostProcessor interface.
type MockMetaAlarmPostProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockMetaAlarmPostProcessorMockRecorder
}

// MockMetaAlarmPostProcessorMockRecorder is the mock recorder for MockMetaAlarmPostProcessor.
type MockMetaAlarmPostProcessorMockRecorder struct {
	mock *MockMetaAlarmPostProcessor
}

// NewMockMetaAlarmPostProcessor creates a new mock instance.
func NewMockMetaAlarmPostProcessor(ctrl *gomock.Controller) *MockMetaAlarmPostProcessor {
	mock := &MockMetaAlarmPostProcessor{ctrl: ctrl}
	mock.recorder = &MockMetaAlarmPostProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaAlarmPostProcessor) EXPECT() *MockMetaAlarmPostProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockMetaAlarmPostProcessor) Process(arg0 context.Context, arg1 rpc.AxeEvent, arg2 rpc.AxeResultEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockMetaAlarmPostProcessorMockRecorder) Process(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockMetaAlarmPostProcessor)(nil).Process), arg0, arg1, arg2)
}
