basePath: /api/v4
definitions:
  account.User:
    properties:
      _id:
        type: string
      authkey:
        type: string
      defaultview:
        $ref: '#/definitions/user.View'
        type: object
      email:
        type: string
      enable:
        type: boolean
      external_id:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/role.Permission'
        type: array
      role:
        $ref: '#/definitions/user.Role'
        type: object
      source:
        type: string
      ui_groups_navigation_type:
        type: string
      ui_language:
        type: string
      ui_tours:
        additionalProperties:
          type: boolean
        type: object
    type: object
  alarm.Alarm:
    properties:
      _id:
        type: string
      assigned_instructions:
        items:
          $ref: '#/definitions/alarm.InstructionWithAlarms'
        type: array
      causes:
        $ref: '#/definitions/alarm.Causes'
        type: object
      children_instructions:
        type: boolean
      consequences:
        $ref: '#/definitions/alarm.Children'
        type: object
      entity:
        $ref: '#/definitions/entity.Entity'
        type: object
      filtered_children:
        items:
          type: string
        type: array
      impact_state:
        type: integer
      infos:
        additionalProperties:
          additionalProperties: true
          type: object
        type: object
      is_all_auto_instructions_completed:
        type: boolean
      is_auto_instruction_running:
        type: boolean
      is_manual_instruction_waiting_result:
        type: boolean
      links:
        additionalProperties: true
        type: object
      metaalarm:
        type: boolean
      pbehavior:
        $ref: '#/definitions/alarm.Pbehavior'
        type: object
      rule:
        $ref: '#/definitions/alarm.MetaAlarmRule'
        type: object
      t:
        type: integer
      v:
        $ref: '#/definitions/alarm.AlarmValue'
        type: object
    type: object
  alarm.AlarmStep:
    properties:
      _t:
        type: string
      a:
        type: string
      initiator:
        type: string
      m:
        type: string
      statecounter:
        $ref: '#/definitions/types.CropCounter'
        type: object
      t:
        type: integer
      user_id:
        type: string
      val:
        type: integer
    type: object
  alarm.AlarmTicket:
    properties:
      _t:
        type: string
      a:
        type: string
      data:
        additionalProperties:
          type: string
        type: object
      m:
        type: string
      t:
        type: integer
      user_id:
        type: string
      val:
        type: string
    type: object
  alarm.AlarmValue:
    properties:
      ack:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      activation_date:
        type: integer
      active_duration:
        type: integer
      canceled:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      children:
        items:
          type: string
        type: array
      component:
        type: string
      connector:
        type: string
      connector_name:
        type: string
      creation_date:
        type: integer
      current_state_duration:
        type: integer
      display_name:
        type: string
      done:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      duration:
        type: integer
      events_count:
        type: integer
      infos:
        additionalProperties:
          additionalProperties: true
          type: object
        type: object
      infos_rule_version:
        additionalProperties:
          type: string
        type: object
      initial_long_output:
        type: string
      initial_output:
        type: string
      last_event_date:
        type: integer
      last_update_date:
        type: integer
      lastComment:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      long_output:
        type: string
      long_output_history:
        items:
          type: string
        type: array
      meta:
        type: string
      output:
        type: string
      parents:
        items:
          type: string
        type: array
      pbehavior_info:
        $ref: '#/definitions/types.PbehaviorInfo'
        type: object
      pbh_inactive_duration:
        type: integer
      resolved:
        type: integer
      resource:
        type: string
      snooze:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      snooze_duration:
        type: integer
      state:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      state_changes_since_status_update:
        type: integer
      status:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      steps:
        items:
          $ref: '#/definitions/alarm.AlarmStep'
        type: array
      tags:
        items:
          type: string
        type: array
      ticket:
        $ref: '#/definitions/alarm.AlarmTicket'
        type: object
      total_state_changes:
        type: integer
    type: object
  alarm.Causes:
    properties:
      rules:
        items:
          $ref: '#/definitions/alarm.MetaAlarmRule'
        type: array
      total:
        type: integer
    type: object
  alarm.Children:
    properties:
      data:
        items:
          $ref: '#/definitions/alarm.Alarm'
        type: array
      total:
        type: integer
    type: object
  alarm.Count:
    properties:
      ack:
        type: integer
      pbehavior_active:
        type: integer
      snooze:
        type: integer
      ticket:
        type: integer
      total:
        type: integer
      total_active:
        type: integer
    type: object
  alarm.Execution:
    properties:
      _id:
        type: string
      status:
        type: integer
    type: object
  alarm.ExportRequest:
    properties:
      category:
        type: string
      correlation:
        type: boolean
      exclude_instruction_types:
        items:
          type: integer
        type: array
      exclude_instructions:
        items:
          type: string
        type: array
      fields:
        $ref: '#/definitions/export.Fields'
        type: object
      filter:
        type: string
      include_instruction_types:
        items:
          type: integer
        type: array
      include_instructions:
        items:
          type: string
        type: array
      manual:
        type: boolean
      opened:
        type: boolean
      search:
        type: string
      separator:
        type: string
      time_field:
        type: string
      time_format:
        type: string
      tstart:
        type: integer
      tstop:
        type: integer
      with_consequences:
        type: boolean
      with_steps:
        type: boolean
    type: object
  alarm.ExportResponse:
    properties:
      _id:
        type: string
      status:
        type: integer
    type: object
  alarm.FilterRequest:
    properties:
      active_columns[]:
        items:
          type: string
        type: array
      category:
        type: string
      correlation:
        type: boolean
      exclude_instruction_types:
        items:
          type: integer
        type: array
      exclude_instructions:
        items:
          type: string
        type: array
      filter:
        type: string
      include_instruction_types:
        items:
          type: integer
        type: array
      include_instructions:
        items:
          type: string
        type: array
      manual:
        type: boolean
      opened:
        type: boolean
      search:
        type: string
      time_field:
        type: string
      tstart:
        type: integer
      tstop:
        type: integer
    type: object
  alarm.InstructionWithAlarms:
    properties:
      _id:
        type: string
      active_on_pbh:
        items:
          type: string
        type: array
      disabled_on_pbh:
        items:
          type: string
        type: array
      execution:
        $ref: '#/definitions/alarm.Execution'
        type: object
      name:
        type: string
    type: object
  alarm.ListRequestWithPagination:
    properties:
      active_columns[]:
        items:
          type: string
        type: array
      category:
        type: string
      correlation:
        type: boolean
      exclude_instruction_types:
        items:
          type: integer
        type: array
      exclude_instructions:
        items:
          type: string
        type: array
      filter:
        type: string
      include_instruction_types:
        items:
          type: integer
        type: array
      include_instructions:
        items:
          type: string
        type: array
      limit:
        type: integer
      manual:
        type: boolean
      multi_sort[]:
        items:
          type: string
        type: array
      opened:
        type: boolean
      page:
        type: integer
      paginate:
        type: boolean
      search:
        type: string
      sort_dir:
        type: string
      sort_key:
        type: string
      time_field:
        type: string
      tstart:
        type: integer
      tstop:
        type: integer
      with_consequences:
        type: boolean
      with_instructions:
        type: boolean
      with_steps:
        type: boolean
    type: object
  alarm.MetaAlarmRule:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  alarm.Pbehavior:
    properties:
      _id:
        type: string
      author:
        type: string
      name:
        type: string
      rrule:
        type: string
      tstart:
        type: integer
      tstop:
        type: integer
      type:
        $ref: '#/definitions/pbehavior.Type'
        type: object
    type: object
  appinfo.AppInfoResponse:
    properties:
      allow_change_severity_to_info:
        type: boolean
      app_title:
        type: string
      check_count_request_timeout:
        type: integer
      edition:
        type: string
      file_upload_max_size:
        type: integer
      footer:
        type: string
      language:
        type: string
      login:
        $ref: '#/definitions/appinfo.LoginConf'
        type: object
      login_page_description:
        type: string
      logo:
        type: string
      max_matched_items:
        type: integer
      popup_timeout:
        $ref: '#/definitions/appinfo.PopupTimeout'
        type: object
      remediation:
        $ref: '#/definitions/appinfo.RemediationConf'
        type: object
      stack:
        type: string
      timezone:
        type: string
      version:
        type: string
    type: object
  appinfo.JobConfigType:
    properties:
      auth_type:
        type: string
      name:
        type: string
    type: object
  appinfo.LoginConf:
    properties:
      casconfig:
        $ref: '#/definitions/appinfo.LoginConfigMethod'
        type: object
      ldapconfig:
        $ref: '#/definitions/appinfo.LoginConfigMethod'
        type: object
      saml2config:
        $ref: '#/definitions/appinfo.LoginConfigMethod'
        type: object
    type: object
  appinfo.LoginConfigMethod:
    properties:
      enable:
        type: boolean
      title:
        type: string
    type: object
  appinfo.PopupTimeout:
    properties:
      error:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      info:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
    type: object
  appinfo.RemediationConf:
    properties:
      job_config_types:
        items:
          $ref: '#/definitions/appinfo.JobConfigType'
        type: array
    type: object
  appinfo.UserInterfaceConf:
    properties:
      allow_change_severity_to_info:
        type: boolean
      app_title:
        type: string
      check_count_request_timeout:
        type: integer
      footer:
        type: string
      language:
        type: string
      login_page_description:
        type: string
      logo:
        type: string
      max_matched_items:
        type: integer
      popup_timeout:
        $ref: '#/definitions/appinfo.PopupTimeout'
        type: object
    type: object
  associativetable.AssociativeTable:
    properties:
      content:
        $ref: '#/definitions/associativetable.Content'
        type: object
      name:
        type: string
    required:
    - content
    - name
    type: object
  associativetable.Content:
    type: object
  auth.loginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  auth.loginResponse:
    properties:
      access_token:
        type: string
    type: object
  broadcastmessage.BroadcastMessage:
    properties:
      _id:
        type: string
      color:
        type: string
      created:
        type: integer
      end:
        type: integer
      message:
        type: string
      start:
        type: integer
      updated:
        type: integer
    required:
    - color
    - end
    - message
    - start
    type: object
  broadcastmessage.Payload:
    properties:
      color:
        type: string
      created:
        type: integer
      end:
        type: integer
      message:
        type: string
      start:
        type: integer
      updated:
        type: integer
    required:
    - color
    - end
    - message
    - start
    type: object
  common.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  common.PaginatedListResponse:
    properties:
      data:
        type: object
      meta:
        $ref: '#/definitions/common.PaginatedMeta'
        type: object
    type: object
  common.PaginatedMeta:
    properties:
      page:
        type: integer
      page_count:
        type: integer
      per_page:
        type: integer
      total_count:
        type: integer
    type: object
  common.User:
    properties:
      _id:
        type: string
      name:
        type: string
    type: object
  common.ValidationErrorResponse:
    properties:
      errors:
        additionalProperties:
          type: string
        type: object
    type: object
  config.TimezoneConfig:
    properties:
      location:
        type: string
    type: object
  contextgraph.ImportJob:
    properties:
      _id:
        type: string
      creation:
        type: string
      exec_time:
        type: string
      info:
        type: string
      source:
        type: string
      stats:
        $ref: '#/definitions/importcontextgraph.Stats'
        type: object
      status:
        type: string
    type: object
  contextgraph.ImportRequest:
    properties:
      json:
        properties:
          cis:
            items:
              $ref: '#/definitions/importcontextgraph.ConfigurationItem'
            type: array
          links:
            items:
              $ref: '#/definitions/importcontextgraph.Link'
            type: array
        type: object
    type: object
  contextgraph.ImportResponse:
    properties:
      _id:
        type: string
    type: object
  datastorage.Config:
    properties:
      alarm:
        properties:
          archive_after:
            $ref: '#/definitions/types.DurationWithEnabled'
            type: object
          delete_after:
            $ref: '#/definitions/types.DurationWithEnabled'
            type: object
        type: object
      health_check:
        properties:
          delete_after:
            $ref: '#/definitions/types.DurationWithEnabled'
            type: object
        type: object
      junit:
        properties:
          delete_after:
            $ref: '#/definitions/types.DurationWithEnabled'
            type: object
        type: object
      pbehavior:
        properties:
          delete_after:
            $ref: '#/definitions/types.DurationWithEnabled'
            type: object
        type: object
      remediation:
        properties:
          accumulate_after:
            $ref: '#/definitions/types.DurationWithEnabled'
            type: object
          delete_after:
            $ref: '#/definitions/types.DurationWithEnabled'
            type: object
        type: object
    type: object
  datastorage.DataStorage:
    properties:
      config:
        $ref: '#/definitions/datastorage.Config'
        type: object
      history:
        $ref: '#/definitions/datastorage.History'
        type: object
    type: object
  datastorage.History:
    properties:
      alarm:
        $ref: '#/definitions/datastorage.HistoryWithCount'
        type: object
      entity:
        $ref: '#/definitions/datastorage.HistoryWithCount'
        type: object
      health_check:
        type: integer
      junit:
        type: integer
      pbehavior:
        type: integer
      remediation:
        type: integer
    type: object
  datastorage.HistoryWithCount:
    properties:
      archived:
        type: integer
      deleted:
        type: integer
      time:
        type: integer
    type: object
  entity.CleanRequest:
    properties:
      archive:
        type: boolean
      archive_dependencies:
        type: boolean
    required:
    - archive
    type: object
  entity.Entity:
    properties:
      _id:
        type: string
      category:
        $ref: '#/definitions/entitycategory.Category'
        type: object
      component:
        type: string
      component_infos:
        $ref: '#/definitions/entity.Infos'
        type: object
      deletable:
        type: boolean
      depends:
        items:
          type: string
        type: array
      enable_history:
        items:
          type: integer
        type: array
      enabled:
        type: boolean
      idle_since:
        type: integer
      impact:
        items:
          type: string
        type: array
      impact_level:
        type: integer
      infos:
        $ref: '#/definitions/entity.Infos'
        type: object
      measurements:
        type: object
      name:
        type: string
      type:
        type: string
    type: object
  entity.ExportRequest:
    properties:
      category:
        type: string
      fields:
        $ref: '#/definitions/export.Fields'
        type: object
      filter:
        type: string
      search:
        type: string
      separator:
        type: string
    type: object
  entity.ExportResponse:
    properties:
      _id:
        type: string
      status:
        type: integer
    type: object
  entity.Info:
    properties:
      description:
        type: string
      name:
        type: string
      value:
        type: object
    type: object
  entity.Infos:
    additionalProperties:
      $ref: '#/definitions/entity.Info'
    type: object
  entity.ListRequestWithPagination:
    properties:
      active_columns[]:
        items:
          type: string
        type: array
      category:
        type: string
      filter:
        type: string
      limit:
        type: integer
      no_events:
        type: boolean
      page:
        type: integer
      paginate:
        type: boolean
      search:
        type: string
      sort:
        type: string
      sort_by:
        type: string
      with_flags:
        type: boolean
    type: object
  entitybasic.EditRequest:
    properties:
      category:
        type: string
      depends:
        items:
          type: string
        type: array
      description:
        type: string
      enabled:
        type: boolean
      impact:
        items:
          type: string
        type: array
      impact_level:
        type: integer
      infos:
        items:
          $ref: '#/definitions/entitybasic.InfoRequest'
        type: array
      sli_avail_state:
        type: integer
    required:
    - enabled
    - impact_level
    - sli_avail_state
    type: object
  entitybasic.Entity:
    properties:
      _id:
        type: string
      category:
        $ref: '#/definitions/entitycategory.Category'
        type: object
      changeable_depends:
        items:
          type: string
        type: array
      changeable_impact:
        items:
          type: string
        type: array
      component:
        type: string
      component_infos:
        $ref: '#/definitions/entity.Infos'
        type: object
      deletable:
        type: boolean
      depends:
        items:
          type: string
        type: array
      description:
        type: string
      enable_history:
        items:
          type: integer
        type: array
      enabled:
        type: boolean
      idle_since:
        type: integer
      impact:
        items:
          type: string
        type: array
      impact_level:
        type: integer
      infos:
        $ref: '#/definitions/entity.Infos'
        type: object
      measurements:
        type: object
      name:
        type: string
      sli_avail_state:
        type: integer
      type:
        type: string
    type: object
  entitybasic.InfoRequest:
    properties:
      description:
        type: string
      name:
        type: string
      value:
        type: object
    required:
    - name
    type: object
  entitycategory.Category:
    properties:
      _id:
        type: string
      author:
        type: string
      created:
        type: integer
      name:
        type: string
      updated:
        type: integer
    type: object
  entitycategory.EditRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  entityservice.AlarmWithEntity:
    properties:
      alarm:
        $ref: '#/definitions/types.Alarm'
        type: object
      entity:
        $ref: '#/definitions/entity.Entity'
        type: object
      has_dependencies:
        type: boolean
      has_impacts:
        type: boolean
      impact_state:
        type: integer
    type: object
  entityservice.BulkCreateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/entityservice.CreateRequest'
        type: object
      status:
        type: integer
    type: object
  entityservice.BulkDeleteRequestItem:
    properties:
      _id:
        type: string
    required:
    - _id
    type: object
  entityservice.BulkDeleteResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/entityservice.BulkDeleteRequestItem'
        type: object
      status:
        type: integer
    type: object
  entityservice.BulkUpdateRequestItem:
    properties:
      _id:
        type: string
      category:
        type: string
      enabled:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      impact_level:
        type: integer
      infos:
        items:
          $ref: '#/definitions/entitybasic.InfoRequest'
        type: array
      name:
        type: string
      output_template:
        type: string
      sli_avail_state:
        type: integer
    required:
    - _id
    - enabled
    - impact_level
    - name
    - output_template
    - sli_avail_state
    type: object
  entityservice.BulkUpdateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/entityservice.BulkUpdateRequestItem'
        type: object
      status:
        type: integer
    type: object
  entityservice.CreateRequest:
    properties:
      _id:
        type: string
      category:
        type: string
      enabled:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      impact_level:
        type: integer
      infos:
        items:
          $ref: '#/definitions/entitybasic.InfoRequest'
        type: array
      name:
        type: string
      output_template:
        type: string
      sli_avail_state:
        type: integer
    required:
    - enabled
    - impact_level
    - name
    - output_template
    - sli_avail_state
    type: object
  entityservice.EditRequest:
    properties:
      category:
        type: string
      enabled:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      impact_level:
        type: integer
      infos:
        items:
          $ref: '#/definitions/entitybasic.InfoRequest'
        type: array
      name:
        type: string
      output_template:
        type: string
      sli_avail_state:
        type: integer
    required:
    - enabled
    - impact_level
    - name
    - output_template
    - sli_avail_state
    type: object
  entityservice.Response:
    properties:
      _id:
        type: string
      category:
        $ref: '#/definitions/entitycategory.Category'
        type: object
      component:
        type: string
      component_infos:
        $ref: '#/definitions/entity.Infos'
        type: object
      deletable:
        type: boolean
      depends:
        items:
          type: string
        type: array
      enable_history:
        items:
          type: integer
        type: array
      enabled:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      idle_since:
        type: integer
      impact:
        items:
          type: string
        type: array
      impact_level:
        type: integer
      infos:
        $ref: '#/definitions/entity.Infos'
        type: object
      measurements:
        type: object
      name:
        type: string
      output_template:
        type: string
      sli_avail_state:
        type: integer
      type:
        type: string
    type: object
  event.Event:
    properties:
      component:
        example: test_component
        type: string
      connector:
        example: test_connector
        type: string
      connector_name:
        example: test_connectorname
        type: string
      event_type:
        example: check
        type: string
      resource:
        example: test_resource
        type: string
      source_type:
        example: resource
        type: string
      state:
        example: "1"
        type: string
    type: object
  event.Response:
    properties:
      failed_events:
        description: FailedEvents is an empty array left for compatibility with old
          handler
        items:
          type: object
        type: array
      retry_events:
        description: RetryEvents is an empty array left for compatibility with old
          handler
        items:
          type: object
        type: array
      sent_events:
        items:
          $ref: '#/definitions/event.Event'
        type: array
    type: object
  eventfilter.Action:
    properties:
      type:
        type: string
    type: object
  eventfilter.BulkCreateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/eventfilter.EventFilter'
        type: object
      status:
        type: integer
    type: object
  eventfilter.BulkDeleteRequestItem:
    properties:
      _id:
        type: string
    required:
    - _id
    type: object
  eventfilter.BulkDeleteResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/eventfilter.BulkDeleteRequestItem'
        type: object
      status:
        type: integer
    type: object
  eventfilter.BulkUpdateRequestItem:
    properties:
      _id:
        type: string
      actions:
        items:
          $ref: '#/definitions/eventfilter.Action'
        type: array
      created:
        type: integer
      description:
        type: string
      enabled:
        type: boolean
      external_data:
        additionalProperties: true
        type: object
      on_failure:
        type: string
      on_success:
        type: string
      patterns:
        $ref: '#/definitions/pattern.EventPatternList'
        type: object
      priority:
        type: integer
      type:
        type: string
      updated:
        type: integer
    required:
    - _id
    - description
    - enabled
    - type
    type: object
  eventfilter.BulkUpdateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/eventfilter.BulkUpdateRequestItem'
        type: object
      status:
        type: integer
    type: object
  eventfilter.EventFilter:
    properties:
      _id:
        type: string
      actions:
        items:
          $ref: '#/definitions/eventfilter.Action'
        type: array
      created:
        type: integer
      description:
        type: string
      enabled:
        type: boolean
      external_data:
        additionalProperties: true
        type: object
      on_failure:
        type: string
      on_success:
        type: string
      patterns:
        $ref: '#/definitions/pattern.EventPatternList'
        type: object
      priority:
        type: integer
      type:
        type: string
      updated:
        type: integer
    required:
    - description
    - enabled
    - type
    type: object
  export.Field:
    properties:
      label:
        type: string
      name:
        type: string
    type: object
  export.Fields:
    items:
      $ref: '#/definitions/export.Field'
    type: array
  file.File:
    properties:
      _id:
        type: string
      created:
        type: integer
      filename:
        type: string
      mediatype:
        type: string
    type: object
  flappingrule.CreateRequest:
    properties:
      _id:
        type: string
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      description:
        type: string
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      freq_limit:
        type: integer
      name:
        type: string
      priority:
        type: integer
    required:
    - duration
    - freq_limit
    - name
    - priority
    type: object
  flappingrule.Response:
    properties:
      _id:
        type: string
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      author:
        $ref: '#/definitions/common.User'
        type: object
      created:
        type: integer
      description:
        type: string
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      freq_limit:
        type: integer
      name:
        type: string
      priority:
        type: integer
      updated:
        type: integer
    type: object
  flappingrule.UpdateRequest:
    properties:
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      description:
        type: string
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      freq_limit:
        type: integer
      name:
        type: string
      priority:
        type: integer
    required:
    - duration
    - freq_limit
    - name
    - priority
    type: object
  http.Response:
    properties:
      body:
        type: string
      close:
        type: boolean
      contentLength:
        type: integer
      header:
        type: Header
      proto:
        type: string
      protoMajor:
        type: integer
      protoMinor:
        type: integer
      request:
        type: Request
      status:
        type: string
      statusCode:
        type: integer
      tls:
        type: string
      trailer:
        type: Header
      transferEncoding:
        items:
          type: string
        type: array
      uncompressed:
        type: boolean
    type: object
  idlerule.BulkCreateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/idlerule.CreateRequest'
        type: object
      status:
        type: integer
    type: object
  idlerule.BulkDeleteRequestItem:
    properties:
      _id:
        type: string
    required:
    - _id
    type: object
  idlerule.BulkDeleteResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/idlerule.BulkDeleteRequestItem'
        type: object
      status:
        type: integer
    type: object
  idlerule.BulkUpdateRequestItem:
    properties:
      _id:
        type: string
      alarm_condition:
        type: string
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      description:
        type: string
      disable_during_periods:
        items:
          type: string
        type: array
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      enabled:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      name:
        type: string
      operation:
        $ref: '#/definitions/idlerule.OperationRequest'
        type: object
      priority:
        type: integer
      type:
        type: string
    required:
    - _id
    - duration
    - enabled
    - name
    - priority
    - type
    type: object
  idlerule.BulkUpdateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/idlerule.BulkUpdateRequestItem'
        type: object
      status:
        type: integer
    type: object
  idlerule.CountByPatternRequest:
    properties:
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
    type: object
  idlerule.CountByPatternResult:
    properties:
      over_limit:
        type: boolean
      total_count_alarms:
        type: integer
      total_count_entities:
        type: integer
    type: object
  idlerule.CreateRequest:
    properties:
      _id:
        type: string
      alarm_condition:
        type: string
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      description:
        type: string
      disable_during_periods:
        items:
          type: string
        type: array
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      enabled:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      name:
        type: string
      operation:
        $ref: '#/definitions/idlerule.OperationRequest'
        type: object
      priority:
        type: integer
      type:
        type: string
    required:
    - duration
    - enabled
    - name
    - priority
    - type
    type: object
  idlerule.EditRequest:
    properties:
      alarm_condition:
        type: string
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      description:
        type: string
      disable_during_periods:
        items:
          type: string
        type: array
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      enabled:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      name:
        type: string
      operation:
        $ref: '#/definitions/idlerule.OperationRequest'
        type: object
      priority:
        type: integer
      type:
        type: string
    required:
    - duration
    - enabled
    - name
    - priority
    - type
    type: object
  idlerule.Operation:
    properties:
      parameters:
        type: object
      type:
        type: string
    type: object
  idlerule.OperationRequest:
    properties:
      parameters:
        type: object
      type:
        type: string
    required:
    - type
    type: object
  idlerule.Rule:
    properties:
      _id:
        type: string
      alarm_condition:
        type: string
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        description: Only for Alarm rules
        type: object
      author:
        type: string
      created:
        $ref: '#/definitions/types.CpsTime'
        type: object
      description:
        type: string
      disable_during_periods:
        description: |-
          DisableDuringPeriods is an option that allows to disable the rule
          when entity is in listed periods due pbehavior schedule.
        items:
          type: string
        type: array
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      enabled:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      name:
        type: string
      operation:
        $ref: '#/definitions/idlerule.Operation'
        type: object
      priority:
        type: integer
      type:
        type: string
      updated:
        $ref: '#/definitions/types.CpsTime'
        type: object
    type: object
  importcontextgraph.ConfigurationItem:
    properties:
      _id:
        type: string
      action:
        type: string
      action_properties:
        type: object
      category:
        type: string
      enabled:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      impact_level:
        type: integer
      infos:
        additionalProperties: true
        type: object
      measurements:
        items:
          type: object
        type: array
      name:
        type: string
      output_template:
        type: string
      type:
        type: string
    type: object
  importcontextgraph.Link:
    properties:
      _id:
        type: string
      action:
        type: string
      action_properties:
        type: object
      from:
        items:
          type: string
        type: array
      infos:
        additionalProperties: true
        type: object
      to:
        type: string
    type: object
  importcontextgraph.Stats:
    properties:
      deleted:
        type: integer
      updated:
        type: integer
    type: object
  messageratestats.ListRequest:
    properties:
      from:
        type: integer
      interval:
        type: string
      to:
        type: integer
    required:
    - from
    - interval
    - to
    type: object
  messageratestats.StatsListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/messageratestats.StatsResponse'
        type: array
      meta:
        properties:
          deleted_before:
            type: integer
        type: object
    type: object
  messageratestats.StatsResponse:
    properties:
      rate:
        type: integer
      time:
        type: integer
    type: object
  notification.InstructionNotification:
    properties:
      rate:
        type: boolean
      rate_frequency:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
    required:
    - rate
    - rate_frequency
    type: object
  notification.Notification:
    properties:
      instruction:
        $ref: '#/definitions/notification.InstructionNotification'
        type: object
    type: object
  pattern.AlarmPatternList:
    type: object
  pattern.EntityPatternList:
    type: object
  pattern.EventPatternList:
    type: object
  pbehavior.BulkCreateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/pbehavior.CreateRequest'
        type: object
      status:
        type: integer
    type: object
  pbehavior.BulkDeleteRequestItem:
    properties:
      _id:
        type: string
    required:
    - _id
    type: object
  pbehavior.BulkDeleteResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/pbehavior.BulkDeleteRequestItem'
        type: object
      status:
        type: integer
    type: object
  pbehavior.BulkUpdateRequestItem:
    properties:
      _id:
        type: string
      enabled:
        type: boolean
      exceptions:
        items:
          type: string
        type: array
      exdates:
        items:
          $ref: '#/definitions/pbehaviorexception.ExdateRequest'
        type: array
      filter:
        type: object
      name:
        type: string
      reason:
        type: string
      rrule:
        type: string
      tstart:
        type: integer
      tstop:
        type: integer
      type:
        type: string
    required:
    - _id
    - enabled
    - filter
    - name
    - reason
    - tstart
    - type
    type: object
  pbehavior.BulkUpdateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/pbehavior.BulkUpdateRequestItem'
        type: object
      status:
        type: integer
    type: object
  pbehavior.Comment:
    properties:
      _id:
        type: string
      author:
        type: string
      message:
        type: string
      ts:
        $ref: '#/definitions/types.CpsTime'
        type: object
    type: object
  pbehavior.Comments:
    items:
      $ref: '#/definitions/pbehavior.Comment'
    type: array
  pbehavior.CountFilterResult:
    properties:
      over_limit:
        type: boolean
      total_count:
        type: integer
    type: object
  pbehavior.CreateRequest:
    properties:
      _id:
        type: string
      enabled:
        type: boolean
      exceptions:
        items:
          type: string
        type: array
      exdates:
        items:
          $ref: '#/definitions/pbehaviorexception.ExdateRequest'
        type: array
      filter:
        type: object
      name:
        type: string
      reason:
        type: string
      rrule:
        type: string
      tstart:
        type: integer
      tstop:
        type: integer
      type:
        type: string
    required:
    - enabled
    - filter
    - name
    - reason
    - tstart
    - type
    type: object
  pbehavior.Filter:
    type: object
  pbehavior.FilterRequest:
    properties:
      filter:
        type: object
    required:
    - filter
    type: object
  pbehavior.PatchRequest:
    properties:
      enabled:
        type: boolean
      exceptions:
        items:
          type: string
        type: array
      exdates:
        items:
          $ref: '#/definitions/pbehaviorexception.ExdateRequest'
        type: array
      filter:
        type: object
      name:
        type: string
      reason:
        type: string
      rrule:
        type: string
      tstart:
        type: integer
      tstop:
        type: integer
      type:
        type: string
    type: object
  pbehavior.Response:
    properties:
      _id:
        type: string
      author:
        type: string
      comments:
        $ref: '#/definitions/pbehavior.Comments'
        type: object
      created:
        type: integer
      enabled:
        type: boolean
      exceptions:
        items:
          $ref: '#/definitions/pbehaviorexception.Exception'
        type: array
      exdates:
        items:
          $ref: '#/definitions/pbehaviorexception.Exdate'
        type: array
      filter:
        $ref: '#/definitions/pbehavior.Filter'
        type: object
      is_active_status:
        description: IsActiveStatus represents if pbehavior is in action for current
          time.
        type: boolean
      last_alarm_date:
        type: integer
      name:
        type: string
      reason:
        $ref: '#/definitions/pbehaviorreason.Reason'
        type: object
      rrule:
        type: string
      tstart:
        type: integer
      tstop:
        type: integer
      type:
        $ref: '#/definitions/pbehavior.Type'
        type: object
      updated:
        type: integer
    type: object
  pbehavior.Type:
    properties:
      _id:
        type: string
      color:
        type: string
      description:
        type: string
      icon_name:
        type: string
      name:
        type: string
      priority:
        type: integer
      type:
        type: string
    type: object
  pbehavior.UpdateRequest:
    properties:
      enabled:
        type: boolean
      exceptions:
        items:
          type: string
        type: array
      exdates:
        items:
          $ref: '#/definitions/pbehaviorexception.ExdateRequest'
        type: array
      filter:
        type: object
      name:
        type: string
      reason:
        type: string
      rrule:
        type: string
      tstart:
        type: integer
      tstop:
        type: integer
      type:
        type: string
    required:
    - enabled
    - filter
    - name
    - reason
    - tstart
    - type
    type: object
  pbehaviorcomment.Request:
    properties:
      message:
        type: string
      pbehavior:
        type: string
    required:
    - message
    - pbehavior
    type: object
  pbehaviorexception.Exception:
    properties:
      _id:
        type: string
      created:
        type: integer
      deletable:
        type: boolean
      description:
        type: string
      exdates:
        items:
          $ref: '#/definitions/pbehaviorexception.Exdate'
        type: array
      name:
        type: string
    type: object
  pbehaviorexception.Exdate:
    properties:
      begin:
        type: integer
      end:
        type: integer
      type:
        $ref: '#/definitions/pbehavior.Type'
        type: object
    type: object
  pbehaviorexception.ExdateRequest:
    properties:
      begin:
        type: integer
      end:
        type: integer
      type:
        type: string
    required:
    - begin
    - end
    - type
    type: object
  pbehaviorexception.Request:
    properties:
      description:
        type: string
      exdates:
        items:
          $ref: '#/definitions/pbehaviorexception.ExdateRequest'
        type: array
      name:
        type: string
    required:
    - description
    - exdates
    - name
    type: object
  pbehaviorreason.Reason:
    properties:
      _id:
        type: string
      deletable:
        type: boolean
      description:
        type: string
      name:
        type: string
    type: object
  pbehaviorreason.Request:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  pbehaviortimespan.ExdateRequest:
    properties:
      begin:
        type: integer
      end:
        type: integer
      type:
        type: string
    required:
    - begin
    - end
    type: object
  pbehaviortimespan.TimespansRequest:
    properties:
      by_date:
        type: boolean
      end_at:
        type: integer
      exceptions:
        items:
          type: string
        type: array
      exdates:
        items:
          $ref: '#/definitions/pbehaviortimespan.ExdateRequest'
        type: array
      rrule:
        type: string
      start_at:
        type: integer
      view_from:
        type: integer
      view_to:
        type: integer
    required:
    - start_at
    - view_from
    - view_to
    type: object
  pbehaviortimespan.timespansItemResponse:
    properties:
      from:
        type: integer
      to:
        type: integer
      type:
        $ref: '#/definitions/pbehavior.Type'
        type: object
    type: object
  pbehaviortype.EditRequest:
    properties:
      color:
        type: string
      description:
        type: string
      icon_name:
        type: string
      name:
        type: string
      priority:
        type: integer
      type:
        type: string
    required:
    - description
    - icon_name
    - name
    - priority
    - type
    type: object
  pbehaviortype.Type:
    properties:
      _id:
        type: string
      color:
        type: string
      deletable:
        type: boolean
      description:
        type: string
      editable:
        type: boolean
      icon_name:
        type: string
      name:
        type: string
      priority:
        type: integer
      type:
        type: string
    type: object
  permission.Permission:
    properties:
      _id:
        type: string
      description:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  playlist.EditRequest:
    properties:
      enabled:
        type: boolean
      fullscreen:
        type: boolean
      interval:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      name:
        type: string
      tabs_list:
        items:
          type: string
        type: array
    required:
    - enabled
    - fullscreen
    - interval
    - name
    - tabs_list
    type: object
  playlist.Playlist:
    properties:
      _id:
        type: string
      author:
        type: string
      created:
        type: integer
      enabled:
        type: boolean
      fullscreen:
        type: boolean
      interval:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      name:
        type: string
      tabs_list:
        items:
          type: string
        type: array
      updated:
        type: integer
    type: object
  resolverule.CreateRequest:
    properties:
      _id:
        type: string
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      description:
        type: string
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      name:
        type: string
      priority:
        type: integer
    required:
    - duration
    - name
    - priority
    type: object
  resolverule.Response:
    properties:
      _id:
        type: string
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      author:
        $ref: '#/definitions/common.User'
        type: object
      created:
        type: integer
      description:
        type: string
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      name:
        type: string
      priority:
        type: integer
      updated:
        type: integer
    type: object
  resolverule.UpdateRequest:
    properties:
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      description:
        type: string
      duration:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      name:
        type: string
      priority:
        type: integer
    required:
    - duration
    - name
    - priority
    type: object
  role.CreateRequest:
    properties:
      defaultview:
        type: string
      description:
        type: string
      name:
        type: string
      permissions:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    required:
    - name
    type: object
  role.EditRequest:
    properties:
      defaultview:
        type: string
      description:
        type: string
      permissions:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  role.Permission:
    properties:
      _id:
        type: string
      actions:
        items:
          type: string
        type: array
      description:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  role.Role:
    properties:
      _id:
        type: string
      defaultview:
        properties:
          _id:
            type: string
          title:
            type: string
        type: object
      description:
        type: string
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/role.Permission'
        type: array
    type: object
  scenario.Action:
    properties:
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      comment:
        type: string
      drop_scenario_if_not_matched:
        type: boolean
      emit_trigger:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      parameters:
        additionalProperties: true
        type: object
      type:
        type: string
    type: object
  scenario.ActionRequest:
    properties:
      alarm_patterns:
        $ref: '#/definitions/pattern.AlarmPatternList'
        type: object
      comment:
        type: string
      drop_scenario_if_not_matched:
        type: boolean
      emit_trigger:
        type: boolean
      entity_patterns:
        $ref: '#/definitions/pattern.EntityPatternList'
        type: object
      parameters:
        type: object
      type:
        type: string
    required:
    - drop_scenario_if_not_matched
    - emit_trigger
    - type
    type: object
  scenario.BulkCreateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/scenario.CreateRequest'
        type: object
      status:
        type: integer
    type: object
  scenario.BulkDeleteRequestItem:
    properties:
      _id:
        type: string
    required:
    - _id
    type: object
  scenario.BulkDeleteResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/scenario.BulkDeleteRequestItem'
        type: object
      status:
        type: integer
    type: object
  scenario.BulkUpdateRequestItem:
    properties:
      _id:
        type: string
      actions:
        items:
          $ref: '#/definitions/scenario.ActionRequest'
        type: array
      author:
        type: string
      delay:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      disable_during_periods:
        items:
          type: string
        type: array
      enabled:
        type: boolean
      name:
        type: string
      priority:
        type: integer
      triggers:
        items:
          type: string
        type: array
    required:
    - _id
    - actions
    - author
    - enabled
    - name
    - priority
    - triggers
    type: object
  scenario.BulkUpdateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/scenario.BulkUpdateRequestItem'
        type: object
      status:
        type: integer
    type: object
  scenario.CheckPriorityRequest:
    properties:
      priority:
        type: integer
    required:
    - priority
    type: object
  scenario.CheckPriorityResponse:
    properties:
      recommended_priority:
        type: integer
      valid:
        type: boolean
    type: object
  scenario.CreateRequest:
    properties:
      _id:
        type: string
      actions:
        items:
          $ref: '#/definitions/scenario.ActionRequest'
        type: array
      author:
        type: string
      delay:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      disable_during_periods:
        items:
          type: string
        type: array
      enabled:
        type: boolean
      name:
        type: string
      priority:
        type: integer
      triggers:
        items:
          type: string
        type: array
    required:
    - actions
    - author
    - enabled
    - name
    - priority
    - triggers
    type: object
  scenario.EditRequest:
    properties:
      actions:
        items:
          $ref: '#/definitions/scenario.ActionRequest'
        type: array
      author:
        type: string
      delay:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      disable_during_periods:
        items:
          type: string
        type: array
      enabled:
        type: boolean
      name:
        type: string
      priority:
        type: integer
      triggers:
        items:
          type: string
        type: array
    required:
    - actions
    - author
    - enabled
    - name
    - priority
    - triggers
    type: object
  scenario.GetMinimalPriorityResponse:
    properties:
      priority:
        type: integer
    type: object
  scenario.Scenario:
    properties:
      _id:
        type: string
      actions:
        items:
          $ref: '#/definitions/scenario.Action'
        type: array
      author:
        type: string
      created:
        type: integer
      delay:
        $ref: '#/definitions/types.DurationWithUnit'
        type: object
      disable_during_periods:
        items:
          type: string
        type: array
      enabled:
        type: boolean
      name:
        type: string
      priority:
        type: integer
      triggers:
        items:
          type: string
        type: array
      updated:
        type: integer
    type: object
  serviceweather.AlarmCounter:
    properties:
      count:
        type: integer
      type:
        $ref: '#/definitions/pbehaviortype.Type'
        type: object
    type: object
  serviceweather.Entity:
    properties:
      _id:
        type: string
      ack:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      alarm_creation_date:
        type: integer
      alarm_display_name:
        type: string
      alarm_id:
        type: string
      assigned_instructions:
        items:
          $ref: '#/definitions/alarm.InstructionWithAlarms'
        type: array
      category:
        $ref: '#/definitions/entitycategory.Category'
        type: object
      component:
        type: string
      connector:
        type: string
      connector_name:
        type: string
      icon:
        type: string
      idle_since:
        type: integer
      impact_level:
        type: integer
      impact_state:
        type: integer
      infos:
        additionalProperties:
          $ref: '#/definitions/serviceweather.Info'
        type: object
      is_all_auto_instructions_completed:
        type: boolean
      is_auto_instruction_running:
        type: boolean
      is_grey:
        type: boolean
      is_manual_instruction_waiting_result:
        type: boolean
      last_update_date:
        type: integer
      linklist:
        items:
          $ref: '#/definitions/serviceweather.WeatherLink'
        type: array
      name:
        type: string
      pbehaviors:
        items:
          $ref: '#/definitions/pbehavior.Response'
        type: array
      resource:
        type: string
      snooze:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      source_type:
        type: string
      state:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      stats:
        $ref: '#/definitions/serviceweather.Stats'
        type: object
      status:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      ticket:
        $ref: '#/definitions/alarm.AlarmTicket'
        type: object
    type: object
  serviceweather.Info:
    properties:
      description:
        type: string
      value:
        type: object
    type: object
  serviceweather.Service:
    properties:
      _id:
        type: string
      ack:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      alarm_counters:
        items:
          $ref: '#/definitions/serviceweather.AlarmCounter'
        type: array
      category:
        $ref: '#/definitions/entitycategory.Category'
        type: object
      component:
        type: string
      connector:
        type: string
      connector_name:
        type: string
      icon:
        type: string
      idle_since:
        type: integer
      impact_level:
        type: integer
      impact_state:
        type: integer
      infos:
        additionalProperties:
          $ref: '#/definitions/serviceweather.Info'
        type: object
      is_action_required:
        type: boolean
      is_grey:
        type: boolean
      last_update_date:
        type: integer
      linklist:
        items:
          properties:
            cat_name:
              type: string
            links:
              type: object
          type: object
        type: array
      name:
        type: string
      output:
        type: string
      pbehaviors:
        items:
          $ref: '#/definitions/pbehavior.Response'
        type: array
      resource:
        type: string
      secondary_icon:
        type: string
      snooze:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      state:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
      status:
        $ref: '#/definitions/alarm.AlarmStep'
        type: object
    type: object
  serviceweather.Stats:
    properties:
      ko:
        type: integer
      last_event:
        type: integer
      last_ko:
        type: integer
      ok:
        type: integer
    type: object
  serviceweather.WeatherLink:
    properties:
      cat_name:
        type: string
      links:
        type: object
    type: object
  statesettings.JUnitThresholds:
    properties:
      errors:
        $ref: '#/definitions/statesettings.StateThresholds'
        type: object
      failures:
        $ref: '#/definitions/statesettings.StateThresholds'
        type: object
      skipped:
        $ref: '#/definitions/statesettings.StateThresholds'
        type: object
    required:
    - errors
    - failures
    - skipped
    type: object
  statesettings.StateSetting:
    properties:
      _id:
        type: string
      junit_thresholds:
        $ref: '#/definitions/statesettings.JUnitThresholds'
        type: object
      method:
        type: string
      type:
        type: string
    type: object
  statesettings.StateSettingRequest:
    properties:
      junit_thresholds:
        $ref: '#/definitions/statesettings.JUnitThresholds'
        type: object
      method:
        type: string
      type:
        type: string
    required:
    - method
    - type
    type: object
  statesettings.StateThresholds:
    properties:
      critical:
        type: number
      major:
        type: number
      minor:
        type: number
      type:
        type: integer
    required:
    - critical
    - major
    - minor
    - type
    type: object
  types.Alarm:
    properties:
      _id:
        type: string
      d:
        type: string
      t:
        $ref: '#/definitions/types.CpsTime'
        type: object
      v:
        $ref: '#/definitions/types.AlarmValue'
        type: object
    type: object
  types.AlarmStep:
    properties:
      _t:
        type: string
      a:
        type: string
      exec:
        description: Execution contains id if instruction execution for instruction
          steps only.
        type: string
      initiator:
        type: string
      m:
        type: string
      pbehavior_canonical_type:
        type: string
      role:
        type: string
      statecounter:
        $ref: '#/definitions/types.CropCounter'
        type: object
      t:
        $ref: '#/definitions/types.CpsTime'
        type: object
      user_id:
        type: string
      val:
        type: integer
    type: object
  types.AlarmSteps:
    items:
      $ref: '#/definitions/types.AlarmStep'
    type: array
  types.AlarmTicket:
    properties:
      _t:
        type: string
      a:
        type: string
      data:
        additionalProperties:
          type: string
        type: object
      m:
        type: string
      role:
        type: string
      t:
        $ref: '#/definitions/types.CpsTime'
        type: object
      user_id:
        type: string
      val:
        type: string
    type: object
  types.AlarmValue:
    properties:
      ack:
        $ref: '#/definitions/types.AlarmStep'
        type: object
      activation_date:
        $ref: '#/definitions/types.CpsTime'
        type: object
      canceled:
        $ref: '#/definitions/types.AlarmStep'
        type: object
      children:
        items:
          type: string
        type: array
      component:
        type: string
      connector:
        type: string
      connector_name:
        type: string
      creation_date:
        $ref: '#/definitions/types.CpsTime'
        type: object
      display_name:
        type: string
      done:
        $ref: '#/definitions/types.AlarmStep'
        type: object
      events_count:
        description: EventsCount accumulates count of check events.
        type: integer
      hard_limit:
        type: integer
      infos:
        additionalProperties:
          additionalProperties: true
          type: object
        type: object
      initial_long_output:
        type: string
      initial_output:
        type: string
      last_event_date:
        $ref: '#/definitions/types.CpsTime'
        type: object
      last_update_date:
        $ref: '#/definitions/types.CpsTime'
        type: object
      long_output:
        type: string
      long_output_history:
        items:
          type: string
        type: array
      meta:
        type: string
      meta_value_path:
        type: string
      output:
        type: string
      parents:
        items:
          type: string
        type: array
      pbehavior_info:
        $ref: '#/definitions/types.PbehaviorInfo'
        type: object
      pbh_inactive_duration:
        type: integer
      resolved:
        $ref: '#/definitions/types.CpsTime'
        type: object
      resource:
        type: string
      ruleVersion:
        additionalProperties:
          type: string
        description: store version of dynamic-infos rule
        type: object
      snooze:
        $ref: '#/definitions/types.AlarmStep'
        type: object
      snooze_duration:
        type: integer
      state:
        $ref: '#/definitions/types.AlarmStep'
        type: object
      state_changes_since_status_update:
        type: integer
      status:
        $ref: '#/definitions/types.AlarmStep'
        type: object
      steps:
        $ref: '#/definitions/types.AlarmSteps'
        type: object
      tags:
        items:
          type: string
        type: array
      ticket:
        $ref: '#/definitions/types.AlarmTicket'
        type: object
      total_state_changes:
        type: integer
    type: object
  types.CpsTime:
    type: object
  types.CropCounter:
    properties:
      state:0:
        type: integer
      state:1:
        type: integer
      state:2:
        type: integer
      state:3:
        type: integer
      statechanges:
        type: integer
      statedec:
        type: integer
      stateinc:
        type: integer
    type: object
  types.DurationWithEnabled:
    properties:
      enabled:
        type: boolean
      unit:
        type: string
      value:
        type: integer
    required:
    - enabled
    - unit
    - value
    type: object
  types.DurationWithUnit:
    properties:
      unit:
        type: string
      value:
        type: integer
    required:
    - unit
    - value
    type: object
  types.PbehaviorInfo:
    properties:
      canonical_type:
        description: CanonicalType is Type of pbehavior.Type.
        type: string
      id:
        description: ID is ID of pbehavior.PBehavior.
        type: string
      name:
        description: Name is Name of pbehavior.PBehavior.
        type: string
      reason:
        description: Reason is Name of pbehavior.Reason.
        type: string
      timestamp:
        $ref: '#/definitions/types.CpsTime'
        description: |-
          Timestamp is time when entity enters pbehavior.
          Use pointer of CpsTime to unmarshal null and undefined to nil pointer instead of zero CpsTime.
        type: object
      type:
        description: TypeID is ID of pbehavior.Type.
        type: string
      type_name:
        description: TypeName is Name of pbehavior.Type.
        type: string
    type: object
  user.BulkCreateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/user.Request'
        type: object
      status:
        type: integer
    type: object
  user.BulkDeleteRequestItem:
    properties:
      _id:
        type: string
    required:
    - _id
    type: object
  user.BulkDeleteResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/user.BulkDeleteRequestItem'
        type: object
      status:
        type: integer
    type: object
  user.BulkUpdateRequestItem:
    properties:
      _id:
        type: string
      defaultview:
        type: string
      email:
        type: string
      enable:
        type: boolean
      firstname:
        type: string
      lastname:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      ui_groups_navigation_type:
        type: string
      ui_language:
        type: string
      ui_tours:
        additionalProperties:
          type: boolean
        type: object
    required:
    - _id
    - email
    - enable
    - name
    - role
    type: object
  user.BulkUpdateResponseItem:
    properties:
      error:
        type: string
      errors:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      item:
        $ref: '#/definitions/user.BulkUpdateRequestItem'
        type: object
      status:
        type: integer
    type: object
  user.EditRequest:
    properties:
      defaultview:
        type: string
      email:
        type: string
      enable:
        type: boolean
      firstname:
        type: string
      lastname:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      ui_groups_navigation_type:
        type: string
      ui_language:
        type: string
      ui_tours:
        additionalProperties:
          type: boolean
        type: object
    required:
    - email
    - enable
    - name
    - role
    type: object
  user.Request:
    properties:
      defaultview:
        type: string
      email:
        type: string
      enable:
        type: boolean
      firstname:
        type: string
      lastname:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      ui_groups_navigation_type:
        type: string
      ui_language:
        type: string
      ui_tours:
        additionalProperties:
          type: boolean
        type: object
    required:
    - email
    - enable
    - name
    - role
    type: object
  user.Role:
    properties:
      _id:
        type: string
      defaultview:
        $ref: '#/definitions/user.View'
        type: object
      name:
        type: string
    type: object
  user.User:
    properties:
      _id:
        type: string
      authkey:
        type: string
      defaultview:
        $ref: '#/definitions/user.View'
        type: object
      email:
        type: string
      enable:
        type: boolean
      external_id:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      name:
        type: string
      role:
        $ref: '#/definitions/user.Role'
        type: object
      source:
        type: string
      ui_groups_navigation_type:
        type: string
      ui_language:
        type: string
      ui_tours:
        additionalProperties:
          type: boolean
        type: object
    type: object
  user.View:
    properties:
      _id:
        type: string
      title:
        type: string
    type: object
  userpreferences.EditRequest:
    properties:
      content:
        additionalProperties: true
        type: object
      widget:
        type: string
    required:
    - content
    - widget
    type: object
  userpreferences.Response:
    properties:
      content:
        additionalProperties: true
        type: object
      widget:
        type: string
    type: object
  view.BulkDeleteRequest:
    properties:
      ids:
        items:
          type: string
        type: array
    required:
    - ids
    type: object
  view.BulkUpdateRequestItem:
    properties:
      _id:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      group:
        type: string
      periodic_refresh:
        $ref: '#/definitions/types.DurationWithEnabled'
        type: object
      tabs:
        items:
          $ref: '#/definitions/view.TabRequest'
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - _id
    - enabled
    - group
    - title
    type: object
  view.EditPositionItemRequest:
    properties:
      _id:
        type: string
      views:
        items:
          type: string
        type: array
    required:
    - _id
    - views
    type: object
  view.EditRequest:
    properties:
      description:
        type: string
      enabled:
        type: boolean
      group:
        type: string
      periodic_refresh:
        $ref: '#/definitions/types.DurationWithEnabled'
        type: object
      tabs:
        items:
          $ref: '#/definitions/view.TabRequest'
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - enabled
    - group
    - title
    type: object
  view.Tab:
    properties:
      _id:
        type: string
      title:
        type: string
      widgets:
        items:
          $ref: '#/definitions/view.Widget'
        type: array
    type: object
  view.TabRequest:
    properties:
      _id:
        type: string
      title:
        type: string
      widgets:
        items:
          $ref: '#/definitions/view.WidgetRequest'
        type: array
    required:
    - _id
    - title
    type: object
  view.Widget:
    properties:
      _id:
        type: string
      grid_parameters:
        additionalProperties: true
        type: object
      parameters:
        additionalProperties: true
        type: object
      title:
        type: string
      type:
        type: string
    type: object
  view.WidgetRequest:
    properties:
      _id:
        type: string
      grid_parameters:
        additionalProperties: true
        type: object
      parameters:
        type: object
      title:
        type: string
      type:
        type: string
    required:
    - _id
    - type
    type: object
  viewgroup.BulkDeleteRequest:
    properties:
      ids:
        items:
          type: string
        type: array
    required:
    - ids
    type: object
  viewgroup.BulkUpdateRequestItem:
    properties:
      _id:
        type: string
      title:
        type: string
    required:
    - _id
    - title
    type: object
  viewgroup.EditRequest:
    properties:
      title:
        type: string
    required:
    - title
    type: object
  viewgroup.View:
    properties:
      _id:
        type: string
      author:
        type: string
      created:
        type: integer
      description:
        type: string
      enabled:
        type: boolean
      group:
        $ref: '#/definitions/viewgroup.ViewGroup'
        type: object
      periodic_refresh:
        $ref: '#/definitions/types.DurationWithEnabled'
        type: object
      tabs:
        items:
          $ref: '#/definitions/view.Tab'
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated:
        type: integer
    type: object
  viewgroup.ViewGroup:
    properties:
      _id:
        type: string
      author:
        type: string
      created:
        type: integer
      deletable:
        type: boolean
      title:
        type: string
      updated:
        type: integer
      views:
        items:
          $ref: '#/definitions/viewgroup.View'
        type: array
    type: object
info:
  contact: {}
  description: This is a Canopsis server.
  license: {}
  title: Canopsis API
  version: "4.0"
paths:
  /account/me:
    get:
      description: Get account
      operationId: account-get
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get account
      tags:
      - account
  /active-broadcast-message:
    get:
      description: Get all active broadcast-message
      operationId: broadcast-messages-get-active
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/broadcastmessage.BroadcastMessage'
            type: array
      summary: Get all active broadcast-message
      tags:
      - broadcast-messages
  /alarm-counters:
    get:
      consumes:
      - application/json
      description: Get counts of alarms
      operationId: alarms-get-counts
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: active_columns[]
        type: array
      - in: query
        name: category
        type: string
      - in: query
        name: correlation
        type: boolean
      - collectionFormat: multi
        in: query
        items:
          type: integer
        name: exclude_instruction_types
        type: array
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: exclude_instructions
        type: array
      - in: query
        name: filter
        type: string
      - collectionFormat: multi
        in: query
        items:
          type: integer
        name: include_instruction_types
        type: array
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: include_instructions
        type: array
      - in: query
        name: manual
        type: boolean
      - in: query
        name: opened
        type: boolean
      - in: query
        name: search
        type: string
      - in: query
        name: time_field
        type: string
      - in: query
        name: tstart
        type: integer
      - in: query
        name: tstop
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alarm.Count'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Count alarms
      tags:
      - alarms
  /alarm-export:
    post:
      description: Start export alarms
      operationId: alarms-export-start
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/alarm.ExportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alarm.ExportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Start export alarms
      tags:
      - alarms
  /alarm-export/{id}:
    get:
      description: Get status of export alarms
      operationId: alarms-export-get
      parameters:
      - description: export task id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alarm.ExportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get status of export alarms
      tags:
      - alarms
  /alarm-export/{id}/download:
    get:
      description: Get result of export alarms
      operationId: alarms-export-download
      parameters:
      - description: export task id
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/csv
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get result of export alarms
      tags:
      - alarms
  /alarms:
    get:
      consumes:
      - application/json
      description: Get paginated list of alarms. Use parameters "multi_sort[]=field_1,asc&multi_sort[]=field_2,desc&multi_sort[]=field_3,asc"
        to sort list by multiple fields. "sort_key", "sort_dir" are left for compatibility
        with older ways of sorting
      operationId: alarms-find-all
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: active_columns[]
        type: array
      - in: query
        name: category
        type: string
      - in: query
        name: correlation
        type: boolean
      - collectionFormat: multi
        in: query
        items:
          type: integer
        name: exclude_instruction_types
        type: array
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: exclude_instructions
        type: array
      - in: query
        name: filter
        type: string
      - collectionFormat: multi
        in: query
        items:
          type: integer
        name: include_instruction_types
        type: array
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: include_instructions
        type: array
      - in: query
        name: limit
        type: integer
      - in: query
        name: manual
        type: boolean
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: multi_sort[]
        type: array
      - in: query
        name: opened
        type: boolean
      - in: query
        name: page
        type: integer
      - in: query
        name: paginate
        type: boolean
      - in: query
        name: search
        type: string
      - in: query
        name: sort_dir
        type: string
      - in: query
        name: sort_key
        type: string
      - in: query
        name: time_field
        type: string
      - in: query
        name: tstart
        type: integer
      - in: query
        name: tstop
        type: integer
      - in: query
        name: with_consequences
        type: boolean
      - in: query
        name: with_instructions
        type: boolean
      - in: query
        name: with_steps
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/alarm.Alarm'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find all alarms
      tags:
      - alarms
  /app-info:
    get:
      description: Get application information
      operationId: internal-get-app-info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/appinfo.AppInfoResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get application information
      tags:
      - internal
  /associativetable:
    delete:
      description: Delete associativetable by name
      operationId: associativetables-delete-by-name
      parameters:
      - description: associativetable name
        in: query
        name: name
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete associativetable by name
      tags:
      - associativetables
    get:
      description: Get associativetable by name
      operationId: associativetables-get-by-name
      parameters:
      - description: associativetable name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/associativetable.AssociativeTable'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get associativetable by name
      tags:
      - associativetables
    post:
      consumes:
      - application/json
      description: Create/update associativetable
      operationId: associativetables-update
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/associativetable.AssociativeTable'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/associativetable.AssociativeTable'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create/update associativetable
      tags:
      - associativetables
  /broadcast-message:
    get:
      consumes:
      - application/json
      description: Get paginated list of broadcast-message
      operationId: broadcast-messages-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/broadcastmessage.BroadcastMessage'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find all broadcast-message
      tags:
      - broadcast-messages
    post:
      consumes:
      - application/json
      description: Create broadcast-message
      operationId: broadcast-messages-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/broadcastmessage.BroadcastMessage'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/broadcastmessage.BroadcastMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create broadcast-message
      tags:
      - broadcast-messages
  /broadcast-message/{id}:
    delete:
      description: Delete broadcast-message by id
      operationId: broadcast-messages-delete-by-id
      parameters:
      - description: broadcast-message id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete broadcast-message by id
      tags:
      - broadcast-messages
    get:
      description: Get broadcast-message by id
      operationId: broadcast-messages-get-by-id
      parameters:
      - description: broadcast-message id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/broadcastmessage.BroadcastMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get broadcast-message by id
      tags:
      - broadcast-messages
    put:
      consumes:
      - application/json
      description: Update broadcast-message by id
      operationId: broadcast-messages-update-by-id
      parameters:
      - description: broadcast-message id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/broadcastmessage.Payload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/broadcastmessage.BroadcastMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update broadcast-message by id
      tags:
      - broadcast-messages
  /bulk/entityservices:
    delete:
      consumes:
      - application/json
      description: Bulk delete entityservices
      operationId: entityservices-bulk-delete
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/entityservice.BulkDeleteRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/entityservice.BulkDeleteResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk delete entityservices
      tags:
      - entityservices
    post:
      consumes:
      - application/json
      description: Bulk create entityservices
      operationId: entityservices-bulk-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/entityservice.CreateRequest'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/entityservice.BulkCreateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk create entityservices
      tags:
      - entityservices
    put:
      consumes:
      - application/json
      description: Bulk update entityservices
      operationId: entityservices-bulk-update
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/entityservice.BulkUpdateRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/entityservice.BulkUpdateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk update entityservices
      tags:
      - entityservices
  /bulk/eventfilters:
    delete:
      consumes:
      - application/json
      description: Bulk delete eventfilters
      operationId: eventfilters-bulk-delete
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/eventfilter.BulkDeleteRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/eventfilter.BulkDeleteResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk delete eventfilters
      tags:
      - eventfilters
    post:
      consumes:
      - application/json
      description: Bulk create eventfilters
      operationId: eventfilters-bulk-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/eventfilter.EventFilter'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/eventfilter.BulkCreateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk create eventfilters
      tags:
      - eventfilters
    put:
      consumes:
      - application/json
      description: Bulk update eventfilters
      operationId: eventfilters-bulk-update
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/eventfilter.BulkUpdateRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/eventfilter.BulkUpdateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk update eventfilters
      tags:
      - eventfilters
  /bulk/idle-rules:
    delete:
      consumes:
      - application/json
      description: Bulk delete idlerules
      operationId: idlerules-bulk-delete
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/idlerule.BulkDeleteRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/idlerule.BulkDeleteResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk delete idlerules
      tags:
      - idlerules
    post:
      consumes:
      - application/json
      description: Bulk create idlerules
      operationId: idlerules-bulk-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/idlerule.CreateRequest'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/idlerule.BulkCreateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk create idlerules
      tags:
      - idlerules
    put:
      consumes:
      - application/json
      description: Bulk update idlerules
      operationId: idlerules-bulk-update
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/idlerule.BulkUpdateRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/idlerule.BulkUpdateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk update idlerules
      tags:
      - idlerules
  /bulk/pbehaviors:
    delete:
      consumes:
      - application/json
      description: Bulk delete pbehaviors
      operationId: pbehaviors-bulk-delete
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/pbehavior.BulkDeleteRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/pbehavior.BulkDeleteResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk delete pbehaviors
      tags:
      - pbehaviors
    post:
      consumes:
      - application/json
      description: Bulk create pbehaviors
      operationId: pbehaviors-bulk-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/pbehavior.CreateRequest'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/pbehavior.BulkCreateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk create pbehaviors
      tags:
      - pbehaviors
    put:
      consumes:
      - application/json
      description: Bulk update pbehaviors
      operationId: pbehaviors-bulk-update
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/pbehavior.BulkUpdateRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/pbehavior.BulkUpdateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk update pbehaviors
      tags:
      - pbehaviors
  /bulk/scenarios:
    delete:
      consumes:
      - application/json
      description: Bulk delete scenarios
      operationId: scenarios-bulk-delete
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/scenario.BulkDeleteRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/scenario.BulkDeleteResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk delete scenarios
      tags:
      - scenarios
    post:
      consumes:
      - application/json
      description: Bulk create scenarios
      operationId: scenarios-bulk-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/scenario.CreateRequest'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/scenario.BulkCreateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk create scenarios
      tags:
      - scenarios
    put:
      consumes:
      - application/json
      description: Bulk update scenarios
      operationId: scenarios-bulk-update
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/scenario.BulkUpdateRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/scenario.BulkUpdateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk update scenarios
      tags:
      - scenarios
  /bulk/users:
    delete:
      consumes:
      - application/json
      description: Bulk delete users
      operationId: users-bulk-delete
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/user.BulkDeleteRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/user.BulkDeleteResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk delete users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Bulk create users
      operationId: users-bulk-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/user.Request'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/user.BulkCreateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk create users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Bulk update users
      operationId: users-bulk-update
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/user.BulkUpdateRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "207":
          description: Multi-Status
          schema:
            items:
              items:
                $ref: '#/definitions/user.BulkUpdateResponseItem'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Bulk update users
      tags:
      - users
  /bulk/view-groups:
    delete:
      description: Bulk delete view groups by id
      operationId: viewgroups-bulk-delete-by-id
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: ids
        required: true
        type: array
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Bulk delete view groups by id
      tags:
      - viewgroups
    post:
      consumes:
      - application/json
      description: Bulk create view groups
      operationId: viewgroups-bulk-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/viewgroup.EditRequest'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/viewgroup.EditRequest'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Bulk create view groups
      tags:
      - viewgroups
    put:
      consumes:
      - application/json
      description: Bulk update view groups by id
      operationId: viewgroups-bulk-update-by-id
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/viewgroup.BulkUpdateRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/viewgroup.ViewGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Bulk update view groups by id
      tags:
      - viewgroups
  /bulk/views:
    delete:
      description: Bulk delete views by id
      operationId: views-bulk-delete-by-id
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: ids
        required: true
        type: array
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Bulk delete views by id
      tags:
      - views
    post:
      consumes:
      - application/json
      description: Bulk create views
      operationId: views-bulk-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/view.EditRequest'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/viewgroup.View'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Bulk create views
      tags:
      - views
    put:
      consumes:
      - application/json
      description: Bulk update views by id
      operationId: views-bulk-update-by-id
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/view.BulkUpdateRequestItem'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/viewgroup.View'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Bulk update views by id
      tags:
      - views
  /contextgraph/import:
    put:
      consumes:
      - application/json
      description: Create import task
      operationId: contextgraph-import-create-import
      parameters:
      - description: source
        in: query
        name: source
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/contextgraph.ImportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contextgraph.ImportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create import task
      tags:
      - contextgraph-import
  /contextgraph/import/status/{id}:
    get:
      description: Get import status by id
      operationId: contextgraph-import-get-status-by-id
      parameters:
      - description: import id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contextgraph.ImportJob'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get import status by id
      tags:
      - contextgraph-import
  /data-storage:
    get:
      description: Get conf
      operationId: datastorage-get
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/datastorage.DataStorage'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get conf
      tags:
      - datastorage
    put:
      description: Update conf
      operationId: datastorage-update
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/datastorage.Config'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/datastorage.DataStorage'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update conf
      tags:
      - datastorage
  /entities:
    get:
      consumes:
      - application/json
      description: Get paginated list of entities
      operationId: entities-find-all
      parameters:
      - collectionFormat: multi
        in: query
        items:
          type: string
        name: active_columns[]
        type: array
      - in: query
        name: category
        type: string
      - in: query
        name: filter
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: no_events
        type: boolean
      - in: query
        name: page
        type: integer
      - in: query
        name: paginate
        type: boolean
      - in: query
        name: search
        type: string
      - in: query
        name: sort
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: with_flags
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Entity'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find entities
      tags:
      - entities
  /entities/clean:
    post:
      consumes:
      - application/json
      description: Clean disabled entities
      operationId: entities-clean
      parameters:
      - in: query
        name: archive
        required: true
        type: boolean
      - in: query
        name: archive_dependencies
        type: boolean
      produces:
      - application/json
      responses:
        "202":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Clean disabled entities
      tags:
      - entities
  /entities/pbehaviors:
    get:
      consumes:
      - application/json
      description: Get list of pbehaviors
      operationId: pbehaviors-find-by-entity-id
      parameters:
      - description: Entity id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pbehavior.Response'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Find pbehaviors by entity id
      tags:
      - pbehaviors
  /entity-categories:
    get:
      consumes:
      - application/json
      description: Get paginated list of entity categories
      operationId: entity-categories-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entitycategory.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find entity categories
      tags:
      - entity-categories
    post:
      consumes:
      - application/json
      description: Create entity category
      operationId: entity-categories-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entitycategory.EditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entitycategory.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create entity category
      tags:
      - entity-categories
  /entity-categories/{id}:
    delete:
      description: Delete entity category by id
      operationId: entity-categories-delete-by-id
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete entity category by id
      tags:
      - entity-categories
    get:
      description: Get entity category by id
      operationId: entity-categories-get-by-id
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entitycategory.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get entity category by id
      tags:
      - entity-categories
    put:
      consumes:
      - application/json
      description: Update entity category by id
      operationId: entity-categories-update-by-id
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entitycategory.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entitycategory.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update entity category by id
      tags:
      - entity-categories
  /entity-export:
    post:
      description: Start export entities
      operationId: entities-export-start
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.ExportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ExportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Start export entities
      tags:
      - entities
  /entity-export/{id}:
    get:
      description: Get status of export entities
      operationId: entities-export-get
      parameters:
      - description: export task id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ExportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get status of export entities
      tags:
      - entities
  /entity-export/{id}/download:
    get:
      description: Get result of export entities
      operationId: entities-export-download
      parameters:
      - description: export task id
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/csv
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get result of export entities
      tags:
      - entities
  /entitybasics:
    delete:
      description: Delete entity by id
      operationId: entitybasics-delete-by-id
      parameters:
      - description: Entity id
        in: query
        name: _id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete entity by id
      tags:
      - entitybasics
    get:
      description: Get entity by id
      operationId: entitybasics-get-by-id
      parameters:
      - description: Entity id
        in: query
        name: _id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entitybasic.Entity'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get entity by id
      tags:
      - entitybasics
    put:
      consumes:
      - application/json
      description: Update entity by id
      operationId: entitybasics-update-by-id
      parameters:
      - description: Entity id
        in: query
        name: _id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entitybasic.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entitybasic.Entity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update entity by id
      tags:
      - entitybasics
  /entityservice-dependencies:
    get:
      description: Get entity service's dependencies by id
      operationId: entityservices-get-dependencies-by-id
      parameters:
      - description: entity service id
        in: query
        name: id
        required: true
        type: string
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entityservice.AlarmWithEntity'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get entity service's dependencies by id
      tags:
      - entityservices
  /entityservice-impacts:
    get:
      description: Get entity's impacted services by id
      operationId: entityservices-get-impacts-by-id
      parameters:
      - description: entity id
        in: query
        name: id
        required: true
        type: string
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entityservice.AlarmWithEntity'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get entity's impacted services by id
      tags:
      - entityservices
  /entityservices:
    post:
      consumes:
      - application/json
      description: Create entity service
      operationId: entityservices-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entityservice.EditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entityservice.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create entity service
      tags:
      - entityservices
  /entityservices/{id}:
    delete:
      description: Delete entity service by id
      operationId: entityservices-delete-by-id
      parameters:
      - description: entity service id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete entity service by id
      tags:
      - entityservices
    get:
      description: Get entity service by id
      operationId: entityservices-get-by-id
      parameters:
      - description: entity service id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entityservice.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get entity service by id
      tags:
      - entityservices
    put:
      consumes:
      - application/json
      description: Update entity service by id
      operationId: entityservices-update-by-id
      parameters:
      - description: entity service id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entityservice.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entityservice.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update entity service by id
      tags:
      - entityservices
  /event:
    post:
      consumes:
      - application/json
      description: Send event/events
      operationId: event-send
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/event.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/event.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Send event/events
      tags:
      - events
  /eventfilter/rules:
    get:
      consumes:
      - application/json
      description: Get paginated list of eventfilter
      operationId: eventfilters-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/eventfilter.EventFilter'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find all eventfilter
      tags:
      - eventfilters
    post:
      consumes:
      - application/json
      description: Create eventfilter
      operationId: eventfilters-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/eventfilter.EventFilter'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/eventfilter.EventFilter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create eventfilter
      tags:
      - eventfilters
  /eventfilter/rules/{id}:
    delete:
      description: Delete eventfilter by id
      operationId: eventfilters-delete-by-id
      parameters:
      - description: eventfilter id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete eventfilter by id
      tags:
      - eventfilters
    get:
      description: Get eventfilter by id
      operationId: eventfilters-get-by-id
      parameters:
      - description: eventfilter id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/eventfilter.EventFilter'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get eventfilter by id
      tags:
      - eventfilters
    put:
      consumes:
      - application/json
      description: Update eventfilter by id
      operationId: eventfilters-update-by-id
      parameters:
      - description: eventfilter id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/eventfilter.EventFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/eventfilter.EventFilter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update eventfilter by id
      tags:
      - eventfilters
  /file:
    get:
      consumes:
      - application/json
      description: Get list of file objects by ID
      operationId: files-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/file.File'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                content:
                  type: string
              type: object
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: List files by ID
      tags:
      - files
    post:
      consumes:
      - multipart/form-data
      description: Upload files
      operationId: file-upload
      parameters:
      - description: request
        in: formData
        name: files
        required: true
        type: string
      - description: file visibility
        in: query
        name: public
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/file.File'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Upload files
      tags:
      - files
  /file-access:
    get:
      consumes:
      - application/json
      description: Get file access
      operationId: auth-get-file-access
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - JWTAuth: []
      summary: Get file access
      tags:
      - auth
  /file/{id}:
    delete:
      consumes:
      - application/json
      description: Delete file by ID
      operationId: files-delete
      parameters:
      - description: file id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Delete file
      tags:
      - files
    get:
      consumes:
      - application/json
      description: Get file content by ID or download with file name
      operationId: files-get
      parameters:
      - description: file id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Get file by ID
      tags:
      - files
  /flapping-rules:
    get:
      consumes:
      - application/json
      description: Get paginated list of flapping rule
      operationId: flappingrules-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/flappingrule.Response'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Find all flapping rule
      tags:
      - flappingrules
    post:
      consumes:
      - application/json
      description: Create flapping rule
      operationId: flappingrules-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/flappingrule.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/flappingrule.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Create flapping rule
      tags:
      - flappingrules
  /flapping-rules/{id}:
    delete:
      description: Delete flapping rule by id
      operationId: flappingrules-delete-by-id
      parameters:
      - description: flapping rule id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth`: []
      summary: Delete flapping rule by id
      tags:
      - flappingrules
    get:
      description: Get flapping rule by id
      operationId: flappingrules-get-by-id
      parameters:
      - description: flapping rule id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/flappingrule.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Get flapping rule by id
      tags:
      - flappingrules
    put:
      consumes:
      - application/json
      description: Update flapping rule by id
      operationId: flappingrules-update-by-id
      parameters:
      - description: flapping rule id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/flappingrule.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/flappingrule.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Update flapping rule by id
      tags:
      - flappingrules
  /idle-rules:
    get:
      consumes:
      - application/json
      description: Get paginated list of idle rules
      operationId: idlerules-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/idlerule.Rule'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find idle rules
      tags:
      - idle rules
    post:
      consumes:
      - application/json
      description: Create idle rule
      operationId: idlerules-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/idlerule.EditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/idlerule.Rule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create idle rule
      tags:
      - idlerules
  /idle-rules/{id}:
    delete:
      description: Delete idle rule by id
      operationId: idlerules-delete-by-id
      parameters:
      - description: rule id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete idle rule by id
      tags:
      - idlerules
    get:
      description: Get idle rule by id
      operationId: idlerules-get-by-id
      parameters:
      - description: rule id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/idlerule.Rule'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get idle rule by id
      tags:
      - idlerules
    put:
      consumes:
      - application/json
      description: Update idle rule by id
      operationId: idlerules-update-by-id
      parameters:
      - description: rule id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/idlerule.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/idlerule.Rule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update idle rule by id
      tags:
      - idlerules
  /idle-rules/count:
    post:
      consumes:
      - application/json
      description: Count entities and alarm matching patterns
      operationId: idlerules-countpatterns
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/idlerule.CountByPatternRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/idlerule.CountByPatternResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "408":
          description: Request Timeout
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Count entities and alarm matching patterns
      tags:
      - idlerules
  /internal/user_interface:
    delete:
      description: delete user interface
      operationId: internal-delete-user-interface
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: delete user interface
      tags:
      - internal
    put:
      consumes:
      - application/json
      description: update user interface
      operationId: internal-update-user-interface
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/appinfo.UserInterfaceConf'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/appinfo.UserInterfaceConf'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: update user interface
      tags:
      - internal
  /logged-user-count:
    get:
      consumes:
      - application/json
      description: Get logged user count
      operationId: auth-logged-user-count
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get logged user count
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: Log in
      operationId: auth-login
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.loginResponse'
      summary: Log in
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Log out
      operationId: auth-logout
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - JWTAuth: []
      summary: Log out
      tags:
      - auth
  /message-rate-stats:
    get:
      consumes:
      - application/json
      description: Get paginated list of stats
      operationId: message-rate-stats-find-all
      parameters:
      - in: query
        name: from
        required: true
        type: integer
      - in: query
        name: interval
        required: true
        type: string
      - in: query
        name: to
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/messageratestats.StatsListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find message rate stats
      tags:
      - message-rate-stats
  /notification:
    get:
      consumes:
      - application/json
      description: Get notification settings
      operationId: notification-get
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/notification.Notification'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get notification settings
      tags:
      - notification
    put:
      consumes:
      - application/json
      description: Update notification settings
      operationId: notification-update
      parameters:
      - description: type id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/notification.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/notification.Notification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update notification settings
      tags:
      - notification
  /pbehavior-comments:
    post:
      consumes:
      - application/json
      description: Create pbehavior comment
      operationId: pbehavior-comments-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehaviorcomment.Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pbehavior.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create pbehavior comment
      tags:
      - pbehavior-comments
  /pbehavior-comments/:id:
    delete:
      description: Delete pbehavior comment by id
      operationId: pbehavior-comment-delete-by-id
      parameters:
      - description: pbehavior comment id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete pbehavior comment by id
      tags:
      - pbehavior-comments
  /pbehavior-exceptions:
    get:
      consumes:
      - application/json
      description: Get paginated list of behavior exceptions
      operationId: pbehavior-exceptions-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      - description: with flags
        in: query
        name: with_flags
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/pbehaviorexception.Exception'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find all pbehavior exceptions
      tags:
      - pbehavior-exceptions
    post:
      consumes:
      - application/json
      description: Create pbehavior exception
      operationId: pbehavior-exceptions-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehaviorexception.Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pbehaviorexception.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create pbehavior exception
      tags:
      - pbehavior-exceptions
  /pbehavior-exceptions/{id}:
    delete:
      description: Delete pbehavior exception by id
      operationId: pbehavior-exceptions-delete-by-id
      parameters:
      - description: exception id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete pbehavior exception by id
      tags:
      - pbehavior-exceptions
    get:
      description: Get pbehavior exception by id
      operationId: pbehavior-exceptions-get-by-id
      parameters:
      - description: exception id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehaviorexception.Exception'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get pbehavior exception by id
      tags:
      - pbehavior-exceptions
    put:
      consumes:
      - application/json
      description: Update behavior exception by id
      operationId: pbehavior-exceptions-update-by-id
      parameters:
      - description: exception id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehaviorexception.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehaviorexception.Exception'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update behavior exception by id
      tags:
      - pbehavior-exceptions
  /pbehavior-ics/{id}:
    get:
      description: Get pbehavior ICS by id
      operationId: pbehavior-ics-get-by-id
      parameters:
      - description: pbehavior id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get pbehavior ICS by id
      tags:
      - pbehavior-ics
  /pbehavior-reasons:
    get:
      consumes:
      - application/json
      description: Get paginated list of behavior reasons
      operationId: pbehavior-reasons-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      - description: with flags
        in: query
        name: with_flags
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/pbehaviorreason.Reason'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find pbehavior reasons
      tags:
      - pbehavior-reasons
    post:
      consumes:
      - application/json
      description: Create pbehavior reason
      operationId: pbehavior-reasons-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehaviorreason.Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pbehaviorreason.Reason'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create pbehavior reason
      tags:
      - pbehavior-reasons
  /pbehavior-reasons/{id}:
    delete:
      description: Delete pbehavior reason by id
      operationId: pbehavior-reasons-delete-by-id
      parameters:
      - description: reason id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete pbehavior reason by id
      tags:
      - pbehavior-reasons
    get:
      description: Get pbehavior reason by id
      operationId: pbehavior-reasons-get-by-id
      parameters:
      - description: reason id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehaviorreason.Reason'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get pbehavior reason by id
      tags:
      - pbehavior-reasons
    put:
      consumes:
      - application/json
      description: Update behavior reason by id
      operationId: pbehavior-reasons-update-by-id
      parameters:
      - description: reason id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehaviorreason.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehaviorreason.Reason'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update behavior reason by id
      tags:
      - pbehavior-reasons
  /pbehavior-timespans:
    post:
      consumes:
      - application/json
      description: 'Get time spans of calendar event within view span; {by_date: false}
        adds exception spans with types, {by_date: true} merges adjacent spans if
        gap between sequential ones less than 24 hours'
      operationId: pbehavior-timespans-get-all
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehaviortimespan.TimespansRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pbehaviortimespan.timespansItemResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      summary: Get all pbehavior timespans
      tags:
      - pbehavior-timespans
  /pbehavior-types:
    get:
      consumes:
      - application/json
      description: Get paginated list of behavior types
      operationId: pbehavior-types-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      - description: with flags
        in: query
        name: with_flags
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/pbehavior.Type'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find pbehavior types
      tags:
      - pbehavior-types
    post:
      consumes:
      - application/json
      description: Create pbehavior type
      operationId: pbehavior-types-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehaviortype.EditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pbehavior.Type'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create pbehavior type
      tags:
      - pbehavior-types
  /pbehavior-types/{id}:
    delete:
      description: Delete pbehavior type by id
      operationId: pbehavior-types-delete-by-id
      parameters:
      - description: type id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete pbehavior type by id
      tags:
      - pbehavior-types
    get:
      description: Get pbehavior type by id
      operationId: pbehavior-types-get-by-id
      parameters:
      - description: type id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehavior.Type'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get pbehavior type by id
      tags:
      - pbehavior-types
    put:
      consumes:
      - application/json
      description: Update behavior type by id
      operationId: pbehavior-types-update-by-id
      parameters:
      - description: type id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehaviortype.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehavior.Type'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update behavior type by id
      tags:
      - pbehavior-types
  /pbehaviors:
    get:
      consumes:
      - application/json
      description: Get paginated list of pbehaviors
      operationId: pbehaviors-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/pbehavior.Response'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Find all pbehaviors
      tags:
      - pbehaviors
    post:
      consumes:
      - application/json
      description: Create pbehavior
      operationId: pbehaviors-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehavior.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pbehavior.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Create pbehavior
      tags:
      - pbehaviors
  /pbehaviors/{id}:
    delete:
      description: Delete pbehavior by id
      operationId: pbehaviors-delete-by-id
      parameters:
      - description: pbehavior id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Delete pbehavior by id
      tags:
      - pbehaviors
    get:
      description: Get pbehavior by id
      operationId: pbehaviors-get-by-id
      parameters:
      - description: pbehavior id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehavior.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Get pbehavior by id
      tags:
      - pbehaviors
    patch:
      consumes:
      - application/json
      description: Patch partial set of behavior attributes by id
      operationId: pbehaviors-patch-by-id
      parameters:
      - description: pbehavior id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehavior.PatchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehavior.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Patch partial set of behavior attributes by id
      tags:
      - pbehaviors
    put:
      consumes:
      - application/json
      description: Update behavior by id
      operationId: pbehaviors-update-by-id
      parameters:
      - description: pbehavior id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehavior.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehavior.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Update behavior by id
      tags:
      - pbehaviors
  /pbehaviors/{id}/entities:
    get:
      description: Find entities by pbehavior id
      operationId: pbehaviors-find-entities
      parameters:
      - description: pbehavior id
        in: path
        name: id
        required: true
        type: string
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Entity'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Find entities by pbehavior id
      tags:
      - pbehaviors
  /pbehaviors/count:
    post:
      consumes:
      - application/json
      description: Count entities matching filter
      operationId: pbehaviors-countfilter
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pbehavior.FilterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pbehavior.CountFilterResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "408":
          description: Request Timeout
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Count entities matching filter
      tags:
      - pbehaviors
  /permissions:
    get:
      consumes:
      - application/json
      description: Get paginated list of permissions
      operationId: permissions-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/permission.Permission'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find permissions
      tags:
      - permissions
  /playlists:
    get:
      consumes:
      - application/json
      description: Get paginated list of playlist
      operationId: playlists-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/playlist.Playlist'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find all playlist
      tags:
      - playlists
    post:
      consumes:
      - application/json
      description: Create playlist
      operationId: playlists-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/playlist.EditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/playlist.Playlist'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create playlist
      tags:
      - playlists
  /playlists/{id}:
    delete:
      description: Delete playlist by id
      operationId: playlists-delete-by-id
      parameters:
      - description: playlist id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete playlist by id
      tags:
      - playlists
    get:
      description: Get playlist by id
      operationId: playlists-get-by-id
      parameters:
      - description: playlist id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/playlist.Playlist'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get playlist by id
      tags:
      - playlists
    put:
      consumes:
      - application/json
      description: Update playlist by id
      operationId: playlists-update-by-id
      parameters:
      - description: playlist id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/playlist.Playlist'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/playlist.Playlist'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update playlist by id
      tags:
      - playlists
  /resolve-rules:
    get:
      consumes:
      - application/json
      description: Get paginated list of resolve rule
      operationId: resolverules-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/resolverule.Response'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Find all resolve rule
      tags:
      - resolverules
    post:
      consumes:
      - application/json
      description: Create resolve rule
      operationId: resolverules-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/resolverule.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/resolverule.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Create resolve rule
      tags:
      - resolverules
  /resolve-rules/{id}:
    delete:
      description: Delete resolve rule by id
      operationId: resolverules-delete-by-id
      parameters:
      - description: resolve rule id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth`: []
      summary: Delete resolve rule by id
      tags:
      - resolverules
    get:
      description: Get resolve rule by id
      operationId: resolverules-get-by-id
      parameters:
      - description: resolve rule id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resolverule.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Get resolve rule by id
      tags:
      - resolverules
    put:
      consumes:
      - application/json
      description: Update resolve rule by id
      operationId: resolverules-update-by-id
      parameters:
      - description: resolve rule id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/resolverule.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resolverule.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Update resolve rule by id
      tags:
      - resolverules
  /roles:
    get:
      consumes:
      - application/json
      description: Get paginated list of roles
      operationId: roles-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/role.Role'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create role
      operationId: roles-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/role.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/role.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create role
      tags:
      - roles
  /roles/{id}:
    delete:
      description: Delete role by id
      operationId: roles-delete-by-id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete role by id
      tags:
      - roles
    get:
      description: Get role by id
      operationId: roles-get-by-id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/role.Role'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get role by id
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update role by id
      operationId: roles-update-by-id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/role.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/role.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update role by id
      tags:
      - roles
  /scenarios:
    get:
      consumes:
      - application/json
      description: Get paginated list of scenarios
      operationId: scenarios-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/scenario.Scenario'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find scenarios
      tags:
      - scenarios
    post:
      consumes:
      - application/json
      description: Create scenario
      operationId: scenarios-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/scenario.EditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/scenario.Scenario'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create scenario
      tags:
      - scenarios
  /scenarios/{id}:
    delete:
      description: Delete scenario by id
      operationId: scenarios-delete-by-id
      parameters:
      - description: scenario id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete scenario by id
      tags:
      - scenarios
    get:
      description: Get scenario by id
      operationId: scenarios-get-by-id
      parameters:
      - description: scenario id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/scenario.Scenario'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get scenario by id
      tags:
      - scenarios
    put:
      consumes:
      - application/json
      description: Update scenario by id
      operationId: scenarios-update-by-id
      parameters:
      - description: scenario id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/scenario.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/scenario.Scenario'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update scenario by id
      tags:
      - scenarios
  /scenarios/check-priority:
    post:
      consumes:
      - application/json
      description: Check priority
      operationId: scenarios-check-priority
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/scenario.CheckPriorityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/scenario.CheckPriorityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Check priority
      tags:
      - scenarios
  /scenarios/minimal-priority:
    get:
      description: Get minimal priority
      operationId: scenarios-get-minimal-priority
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/scenario.GetMinimalPriorityResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get minimal priority
      tags:
      - scenarios
  /state-settings:
    get:
      consumes:
      - application/json
      description: Get paginated list of state settings
      operationId: state-settings-list
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/statesettings.StateSetting'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find all state settings for a widget
      tags:
      - state-settings
  /state-settings/{id}:
    put:
      consumes:
      - application/json
      description: Update state setting type by id
      operationId: state-settings-update-by-id
      parameters:
      - description: type id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/statesettings.StateSettingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/statesettings.StateSetting'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update state setting type by id
      tags:
      - state-settings
  /user-preferences:
    put:
      consumes:
      - application/json
      description: Update user preferences by widget id
      operationId: userpreference-update-by-widget-id
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/userpreferences.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userpreferences.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Update user preferences by widget id
      tags:
      - userpreference
  /user-preferences/{id}:
    get:
      description: Get user preferences by widget id
      operationId: userpreference-get-by-id
      parameters:
      - description: widget id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userpreferences.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - JWTAuth: []
      - BasicAuth: []
      summary: Get user preferences by widget id
      tags:
      - userpreference
  /users:
    get:
      consumes:
      - application/json
      description: Get paginated list of users
      operationId: users-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: role permission
        in: query
        name: permission
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/user.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create user
      operationId: users-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.EditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete user by id
      operationId: users-delete-by-id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete user by id
      tags:
      - users
    get:
      description: Get user by id
      operationId: users-get-by-id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get user by id
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user by id
      operationId: users-update-by-id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update user by id
      tags:
      - users
  /view-groups:
    get:
      consumes:
      - application/json
      description: Get paginated list of view groups
      operationId: viewgroups-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/viewgroup.ViewGroup'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find view groups
      tags:
      - viewgroups
    post:
      consumes:
      - application/json
      description: Create view group
      operationId: viewgroups-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/viewgroup.EditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/viewgroup.ViewGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create view group
      tags:
      - viewgroups
  /view-groups/{id}:
    delete:
      description: Delete view group by id
      operationId: viewgroups-delete-by-id
      parameters:
      - description: view group id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete view group by id
      tags:
      - viewgroups
    get:
      description: Get view group by id
      operationId: viewgroups-get-by-id
      parameters:
      - description: viewgroup id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/viewgroup.ViewGroup'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get view group by id
      tags:
      - viewgroups
    put:
      consumes:
      - application/json
      description: Update view group by id
      operationId: viewgroups-update-by-id
      parameters:
      - description: view group id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/viewgroup.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/viewgroup.ViewGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update view group by id
      tags:
      - viewgroups
  /view-positions:
    put:
      consumes:
      - application/json
      description: Update views positions
      operationId: views-update-positions
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/view.EditPositionItemRequest'
          type: array
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update views positions
      tags:
      - views
  /views:
    get:
      consumes:
      - application/json
      description: Get paginated list of views
      operationId: views-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: search query
        in: query
        name: search
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/viewgroup.View'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find views
      tags:
      - views
    post:
      consumes:
      - application/json
      description: Create view
      operationId: views-create
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/view.EditRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/viewgroup.View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Create view
      tags:
      - views
  /views/{id}:
    delete:
      description: Delete view by id
      operationId: views-delete-by-id
      parameters:
      - description: view id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Delete view by id
      tags:
      - views
    get:
      description: Get view by id
      operationId: views-get-by-id
      parameters:
      - description: view id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/viewgroup.View'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Get view by id
      tags:
      - views
    put:
      consumes:
      - application/json
      description: Update view by id
      operationId: views-update-by-id
      parameters:
      - description: view id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/view.EditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/viewgroup.View'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Update view by id
      tags:
      - views
  /weather-services:
    get:
      consumes:
      - application/json
      description: Get paginated list of services
      operationId: weather-services-find-all
      parameters:
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: filter query
        in: query
        name: filter
        type: string
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      - description: category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/serviceweather.Service'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find all services
      tags:
      - weather-services
  /weather-services/{id}:
    get:
      consumes:
      - application/json
      description: Get paginated list of entities
      operationId: weather-services-find-all-entities
      parameters:
      - description: service id
        in: path
        name: id
        required: true
        type: string
      - description: current page
        in: query
        name: page
        required: true
        type: integer
      - description: items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: sort query
        in: query
        name: sort
        type: string
      - description: sort query
        in: query
        name: sort_by
        type: string
      - description: show assigned instructions and execution flags
        in: query
        name: with_instructions
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginatedListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/serviceweather.Entity'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ValidationErrorResponse'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      summary: Find all entity by service id
      tags:
      - weather-services
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: x-canopsis-authkey
    type: apiKey
  BasicAuth:
    type: basic
  JWTAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
