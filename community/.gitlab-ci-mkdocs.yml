build_doc:
  stage: build
  tags: 
    - executor-docker
  image: python:alpine
  variables:
    MKDOCS_BRANCH: mkdocs
    URL_REPO: https://${ACCESS_TOKEN_NAME}:${ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    GIT_DEPTH: 0
    COMMUNITY_SWAGGER_PATH: $CI_PROJECT_DIR/community/go-engines-community/lib/api/docs/
    PRO_SWAGGER_PATH: $CI_PROJECT_DIR/pro/go-engines-pro/lib/api/docs/
    DOC_PATH: $CI_PROJECT_DIR/community/sources/docs/fr/
  before_script:
    - pip install -r community/sources/docs/requirements.txt
    - apk add git
    - git config user.name $ACCESS_TOKEN_NAME
    - git config user.email ${ACCESS_TOKEN_NAME}@${CI_SERVER_HOST}
    - export LAST_VERSION=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+(\.[0-9]+)?$' | head -1 | cut -d "." -f 1,2)
    - export TARGET_VERSION=$(echo ${CI_COMMIT_BRANCH}| cut -d "-" -f 2)
  script:
    # import swagger
    - cp $COMMUNITY_SWAGGER_PATH/{swagger.yaml,schemas_swagger.yaml} $DOC_PATH/swagger-community/
    - cp $PRO_SWAGGER_PATH/{swagger.yaml,schemas_swagger.yaml} $DOC_PATH/swagger-pro/
    # set the correct release number
    - 'sed -i "s/version: .*/version: $TARGET_VERSION/g" $DOC_PATH/guide-developpement/swagger-community/swagger.yaml'
    - 'sed -i "s/version: .*/version: $TARGET_VERSION/g" $DOC_PATH/guide-developpement/swagger-pro/swagger.yaml'
    # set the correct release note order
    - 'find $DOC_PATH/notes-de-version/ -maxdepth 1 -not -type d | cut -d / -f 5 |sort -rh |grep -vE "hidden|pages" > $DOC_PATH/notes-de-version/.pages'
    - 'sed -i "s/^/  - /" $DOC_PATH/notes-de-version/.pages'
    - 'sed -i "1s/^/nav:\n/" sources/docs/fr/notes-de-version/.pages'
    # build mkdoc
    - cd community
    - mike deploy --rebase -f -r $URL_REPO -p -b $MKDOCS_BRANCH -u $TARGET_VERSION
    - echo "TARGET_VERSION ($TARGET_VERSION) ;; LAST_VERSION ($LAST_VERSION)"
    - mike set-default --rebase -f -r $URL_REPO -p -b $MKDOCS_BRANCH $LAST_VERSION
    - mkdir build
    - git --work-tree=build/ checkout $MKDOCS_BRANCH -- .
    - tar -czf mkdocs.tar.gz build/*
  artifacts:
    when: on_success
    expire_in: "3 days"
    paths:
      - "community/mkdocs.tar.gz"
  rules:
    - if: $CI_COMMIT_MESSAGE =~ '/build_doc/' && $CI_COMMIT_BRANCH =~ '/^release.*/'

publish_doc:
  stage: publish
  tags:
    - executor-docker
  image: alpine
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk add openssh-client )'
    - apk add rsync
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - rsync -e "ssh -o StrictHostKeychecking=no" -avz "community/mkdocs.tar.gz" $DOC_USER@$DOC_HOST:/opt/docs/
    - ssh -o StrictHostKeychecking=no $DOC_USER@$DOC_HOST "sh /opt/push_doc-mike.sh"
  rules:
    - if: $CI_COMMIT_MESSAGE =~ '/build_doc/' && $CI_COMMIT_BRANCH =~ '/^release.*/'
