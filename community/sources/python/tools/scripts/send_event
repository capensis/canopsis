#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# --------------------------------
# Copyright (c) 2015 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

from __future__ import unicode_literals

from sys import argv, exit, stdin, stdout

from os.path import splitext, exists

from getopt import getopt, GetoptError

from urllib2 import build_opener, HTTPCookieProcessor, Request

from urllib import urlencode

from cookielib import CookieJar

from traceback import print_exc

try:
    from json import loads, dumps
except:
    from simplejson import loads, dumps


def usage():
    print(" Usage: send_event \n")
    print(" Options:")
    print("  -s, --server=[SERVER_ADDR]")
    print("     webserver address (default : localhost:8082)")
    print("  -a, --authkey=[AUTHKEY]")
    print("  -f, --file=[FILE_PATH]")
    print("     file contraining a json event to send")
    print("  -j, --json=[JSON]")
    print("     a json string containing a correct event to send")
    print("  -h, --help")
    print("     show help")


def main(argv):
    try:
        opts, _ = getopt(
            argv,
            "s:a:f:j:h",
            ["server=", "authkey=", "file=", "json=", "help"]
        )
    except GetoptError as err:
        print(err)
        usage()
        exit(2)

    if len(opts) < 1:
        usage()
        exit()

    authkey = None
    server = 'localhost:8082'
    file_path, file_name, file_extension = None, None, None
    #input_stream = None
    json_string = None

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            exit()
        if opt in ('--server', '-s'):
            server = arg
        if opt in ('--authkey', '-a'):
            authkey = arg
        if opt in ('--file', '-f'):
            file_name, file_extension = splitext(arg)
            file_path = arg
        if opt in ('--json', '-j'):
            try:
                json_string = loads(arg)
            except:
                print('Bad json string')
                exit()

    if not authkey:
        print('You must provide an authkey to access the webserver.\n \
            You can generate it from the Canopsis Web UI.')
        usage()
        exit()

    send_event(
        server=server, authkey=authkey, json_str=json_string,
        file_path=file_path, file_name=file_name, file_extension=file_extension
    )


def send_event(
    server='localhost:8082', authkey=None, file_path=None, json_str=None,
    file_name=None, file_extension=None
):

    #---------------------------authenticate---------------------------
    cj = CookieJar()
    opener = build_opener(HTTPCookieProcessor(cj))
    #print('http://%s/autoLogin/%s' % (server,authkey))
    r = opener.open('http://%s/autologin/%s' % (server, authkey))
    r = opener.open('http://%s/account/me' % server)

    try:
        response = loads(r.read())
    except Exception as err:
        print('Error: Bad response from server %s' % err)

    if not response['success']:
        print('Error: The provided authkey does not match any existing user')
        exit()

    #------------------------------find event source-----------------------
    event = None

    if json_str:
        event = json_str

    elif file_path:
        if file_extension != '.json':
            print('Error: Invalid file format (Must be .json)')
            exit()

        if not exists(file_path):
            print('Error: File not found (%s)' % file_path)
            exit()

        #------------------read file-------------------
        try:
            event = loads(open(file_path, "r").read().decode('utf-8-sig'))
        except Exception as err:
            print('Invalid json file: %s' % err)
            exit()

    #check if input stream
    elif not stdin.isatty():
        try:
            event = loads(stdin.read())
        except:
            print('Error: Invalid json stream')
            exit()

    #-----------------------------prepare event-----------------------------
    if not event:
        print(
            'Error: No json media found, you must provide file/stream/command')
        exit()

    if 'connector' not in event:
        event['connector'] = 'Cli'

    if 'connector_name' not in event:
        event['connector_name'] = 'Send_event'

    #-----------------------------send event-----------------------------
    clean_event = {}
    for k in event:
        v = event[k]
        clean_event[k] = u'{0}'.format(v)

    request_params = {'event': dumps(clean_event)}
    request = Request(
        'http://%s/event' % server, urlencode(request_params))
    r = opener.open(request)
    print('Webserver replied :')
    print(r.read())


if __name__ == "__main__":
    try:
        main(argv[1:])
    except Exception as err:
        print_exc(file=stdout)
        exit(1)
