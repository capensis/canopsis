#!/bin/bash

NAME="rabbitmq-server-conf"
VERSION=0.4
RELEASE=0
DESCRIPTION=""
REQUIRES="canohome canolibs supervisord-conf rabbitmq-server"

NO_ARCH=true
NO_DIST=true
NO_DISTVERS=true

function pre_install(){
	echo "Pre-install $NAME $VERSION-$RELEASE ..."
	check_code $?
}

function post_install(){
	echo "Post-install $NAME $VERSION-$RELEASE ..."

	launch_cmd 0 supervisorctl update

	launch_cmd 1 service rabbitmq-server start

	echo -n "Safe wait ..."

	STATE=0
	TRY=0
	while [ $STATE -eq 0 ]; do
	    if [ $TRY -eq 30 ]; then
	        break
	    fi
	    sleep 1
	    STATE=`launch_cmd 0 service rabbitmq-server status | grep RUNNING | wc -l`
	    TRY=$((TRY + 1))
	    echo -n "."
	done
	echo

	if [ $STATE -eq 0 ]
	then
		check_code 1 "Failed to test rabbit service ..."
	fi
	sleep 1

	ADMIN_EXISTS=`launch_cmd 0 rabbitmqctl list_users | grep "^admin" | wc -l`

	if [ $ADMIN_EXISTS -ne 1 ]
	then
		if [ "x$RABBITMQ_ADMIN_PASSWD" == "x" ]
		then
			while true
			do
				safe_prompt "RabbitMQ password for admin: " adminpass
				safe_prompt "Confirm password: " confirm

				if [ "$adminpass" == "$confirm" ]
				then
					break
				else
					echo "Passwords doesn't match"
				fi
			done
		else
			adminpass=$RABBITMQ_ADMIN_PASSWD
		fi

		echo " + Declare Admin user ..."
		launch_cmd 1 $PREFIX/bin/rabbitmqctl add_user admin $adminpass
		launch_cmd 1 $PREFIX/bin/rabbitmqctl set_user_tags admin administrator
	fi

	VHOST_EXISTS=`launch_cmd 0 rabbitmqctl list_vhosts | grep canopsis | wc -l`

	# Is this a first install or an update
	if [ $VHOST_EXISTS -ne 1 ]
	then
		echo " + Declare vhost ..."
		launch_cmd 1 $PREFIX/bin/rabbitmqctl add_vhost canopsis

		echo " + Declare permissions for Admin user ..."
		launch_cmd 1 $PREFIX/bin/rabbitmqctl set_permissions -p canopsis admin "\".*\"" "\".*\"" "\".*\""
	fi

	COMMONUSER_EXISTS=`launch_cmd 0 rabbitmqctl list_users | grep "\[canopsis\]" | wc -l`

	if [ $COMMONUSER_EXISTS -ne 1 ]
	then
		if [ "x$RABBITMQ_USER" == "x" ]
		then
			while true
			do
				safe_prompt "RabbitMQ common user: " cpsuser "show"

				user_exists=`launch_cmd 0 rabbitmqctl list_users | grep "^$cpsuser" | wc -l`

				if [ $user_exists -ne 1 ]
				then
					break
				fi
			done
		else
			cpsuser=$RABBITMQ_USER
		fi

		if [ "x$RABBITMQ_USER_PASSWD" == "x" ]
		then
			while true
			do
				safe_prompt "RabbitMQ password for $cpsuser: " cpspass
				safe_prompt "Confirm password: " confirm

				if [ "$cpspass" == "$confirm" ]
				then
					break
				else
					echo "Passwords doesn't match"
				fi
			done
		else
			cpspass=$RABBITMQ_USER_PASSWD
		fi

		echo " + Declare $cpsuser user ..."
		launch_cmd 1 $PREFIX/bin/rabbitmqctl add_user $cpsuser $cpspass
		launch_cmd 1 $PREFIX/bin/rabbitmqctl set_user_tags $cpsuser canopsis

		echo " + Declare permissions for $cpsuser user ..."
		launch_cmd 1 $PREFIX/bin/rabbitmqctl set_permissions -p canopsis $cpsuser "\".*\"" "\".*\"" "\".*\""

		echo " + Update $PREFIX/etc/amqp.conf ..."
		launch_cmd 1 $PREFIX/bin/initool set $PREFIX/etc/amqp.conf master userid $cpsuser
		launch_cmd 1 $PREFIX/bin/initool set $PREFIX/etc/amqp.conf master password $cpspass
	fi

	launch_cmd 1 service rabbitmq-server stop

	rm -f $PREFIX/var/log/rabbitmq/*
}

function pre_remove(){
	echo "Pre-remove $NAME $VERSION-$RELEASE ..."
	launch_cmd 0 service rabbitmq-server stop
}

function post_remove(){
	echo "Post-remove $NAME $VERSION-$RELEASE ..."
	check_code $?
}

function pre_update(){
	echo "Pre-update $NAME $VERSION-$RELEASE ..."

	rm $PREFIX/etc/init.d/rabbitmq-server &> /dev/null || true
	check_code $?
}

function post_update(){
	echo "Post-update $NAME $VERSION-$RELEASE ..."
	check_code $?
}

function purge(){
	echo "Purge $NAME $VERSION-$RELEASE ..."
	rm -Rf $PREFIX/var/lib/rabbitmq
	rm -Rf $PREFIX/var/log/rabbitmq
}
