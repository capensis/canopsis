#!/bin/bash

NAME="rabbitmq-server-conf"
VERSION=0.4
RELEASE=0
DESCRIPTION=""
REQUIRES="canohome canotools supervisord-conf rabbitmq-server"

NO_ARCH=true
NO_DIST=true
NO_DISTVERS=true

function pre_install(){
	echo "Pre-install $NAME $VERSION-$RELEASE ..."
	check_code $? 
}

function post_install(){
	echo "Post-install $NAME $VERSION-$RELEASE ..."

	launch_cmd 1 service rabbitmq-server start

	echo -n "Safe wait ..."
	
	STATE=0
	TRY=0
	while [ $STATE -eq 0 ]; do
	    if [ $TRY -eq 30 ]; then
	        break
	    fi
	    sleep 1
	    STATE=`su - $HUSER -c "service rabbitmq-server status | grep RUNNING | wc -l"`
	    TRY=$((TRY + 1))
	    echo -n "."
	done
	echo
	
	if [ $STATE -eq 0 ]
	then
		check_code 1 "Failed to test rabbit service ..."
	fi
	sleep 1

	ADMIN_EXISTS=`su - $HUSER -c "rabbitmqctl list_users" | grep "^admin" | wc -l`

	if [ $ADMIN_EXISTS -ne 1 ]
	then
		while true
		do
			read -s -p "RabbitMQ password for admin: " adminpass
			echo ""

			read -s -p "Confirm password: " confirm
			echo ""

			if [ "$adminpass" == "$confirm" ]
			then
				break
			else
				echo "Passwords doesn't match"
			fi
		done

		echo " + Declare Admin user ..."
		su - $HUSER -c "$PREFIX/bin/rabbitmqctl add_user admin $adminpass"
		check_code $?

		su - $HUSER -c "$PREFIX/bin/rabbitmqctl set_user_tags admin administrator"
		check_code $?
	fi

	VHOST_EXISTS=`su - $HUSER -c "rabbitmqctl list_vhosts | grep canopsis | wc -l"`
	# Is this a first install or an update
	if [ $VHOST_EXISTS -ne 1 ]
	then
		echo " + Declare vhost ..."
		su - $HUSER -c "$PREFIX/bin/rabbitmqctl add_vhost canopsis"
		check_code $?
		
		echo " + Declare permissions for Admin user ..."
		su - $HUSER -c "$PREFIX/bin/rabbitmqctl set_permissions -p canopsis admin \".*\" \".*\" \".*\""
		check_code $?
	fi

	COMMONUSER_EXISTS=`su - $HUSER -c "rabbitmqctl list_users" | grep "\[canopsis\]" | wc -l`

	if [ $COMMONUSER_EXISTS -ne 1 ]
	then
		while true
		do
			read -p "RabbitMQ common user: " cpsuser

			user_exists=`su - $HUSER -c "rabbitmqctl list_users" | grep "^$cpsuser" | wc -l`

			if [ $user_exists -ne 1 ]
			then
				break
			fi
		done

		while true
		do
			read -s -p "RabbitMQ password for $cpsuser: " cpspass
			echo ""

			read -s -p "Confirm password: " confirm
			echo ""

			if [ "$cpspass" == "$confirm" ]
			then
				break
			else
				echo "Passwords doesn't match"
			fi
		done

		
		echo " + Declare $cpsuser user ..."
		su - $HUSER -c "$PREFIX/bin/rabbitmqctl add_user $cpsuser $cpspass"
		check_code $?

		su - $HUSER -c "$PREFIX/bin/rabbitmqctl set_user_tags $cpsuser canopsis"
		check_code $?

		echo " + Declare permissions for $cpsuser user ..."
		su - $HUSER -c "$PREFIX/bin/rabbitmqctl set_permissions -p canopsis $cpsuser \".*\" \".*\" \".*\""
		check_code $?

		echo " + Update $PREFIX/etc/amqp.conf ..."
		su - $HUSER -c "$PREFIX/bin/initool set $PREFIX/etc/amqp.conf master userid $cpsuser"
		check_code $?

		su - $HUSER -c "$PREFIX/bin/initool set $PREFIX/etc/amqp.conf master password $cpspass"
		check_code $?
	fi

	launch_cmd 1 service rabbitmq-server stop
	
	rm -f $PREFIX/var/log/rabbitmq/*
}

function pre_remove(){
	echo "Pre-remove $NAME $VERSION-$RELEASE ..."
	service rabbitmq-server stop 
}

function post_remove(){
	echo "Post-remove $NAME $VERSION-$RELEASE ..."
	check_code $?
}

function pre_update(){
	echo "Pre-update $NAME $VERSION-$RELEASE ..."

	rm $PREFIX/etc/init.d/rabbitmq-server &> /dev/null || true
	check_code $?
}

function post_update(){
	echo "Post-update $NAME $VERSION-$RELEASE ..."
	check_code $?
}

function purge(){
	echo "Purge $NAME $VERSION-$RELEASE ..."
	rm -Rf $PREFIX/var/lib/rabbitmq
	rm -Rf $PREFIX/var/log/rabbitmq
}
