#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import ConfigParser
import subprocess
import os


class Service(object):
	"""
		Handle supervisord/internal services.
	"""

	internaldir = os.path.expanduser('~/etc/init.d')
	supervisordir = os.path.expanduser('~/etc/supervisord.d')

	def __init__(self, name, *args, **kwargs):
		"""
			:param name: Service name
			:type name: basestring
		"""

		super(Service, self).__init__(*args, **kwargs)

		self.name = name
		
		if name in os.listdir(Service.internaldir):
			self.internal = True

		elif '{0}.conf'.format(name) in os.listdir(Service.supervisordir):
			self.internal = False

			self.ensure_supervisord()
			self.group = self.check_group()

		else:
			raise RuntimeError("Unknown service: {0}".format(name))

	def ensure_supervisord(self):
		"""
			Make sure supervisord is running and updated.
		"""

		pidfile = os.path.expanduser('~/var/run/supervisord.pid')
		started = False

		if os.path.exists(pidfile):
			with open(pidfile) as f:
				pid = int(f.read())
				
				try:
					os.kill(pid, 0)
					started = True

				except OSError:
					started = False

			if not started:
				os.remove(pidfile)

		if not started:
			subprocess.call('/bin/bash -l -c "supervisord &>/dev/null"', shell=True)

		else:
			subprocess.call('/bin/bash -l -c "supervisorctl update &>/dev/null"', shell=True)

	def check_group(self):
		"""
			Check if supervisord service is referring to a group of process.
		"""

		confpath = os.path.expanduser('~/etc/supervisord.d/{0}.conf'.format(self.name))

		try:
			parser = ConfigParser.ConfigParser()
			parser.read(confpath)

		except ConfigParser.ParsingError as err:
			raise RuntimeError('Impossible to read {0}: {1}'.format(confpath, err))

		for section in parser.sections():
			if self.name in section:
				if section.startswith('group:'):
					return True

				elif section.startswith('program:'):
					try:
						nprocs = parser.getint(section, 'numprocs')

					except ConfigParser.NoOptionError:
						nprocs = 1

					if nprocs > 1:
						return True

		return False

	def internal_action(self, action):
		"""
			Run action on internal service.
		"""

		subprocess.call('/bin/bash -l -c "~/etc/init.d/{0} {1}"'.format(self.name, action), shell=True)

	def supervisord_action(self, action):
		"""
			Run action on supervisord service.
		"""

		if self.group:
			if action == 'status':
				subprocess.call('/bin/bash -l -c \'supervisorctl status | grep "{0}"\''.format(self.name), shell=True)
				return

			else:
				name = '{0}:*'.format(self.name)

		else:
			name = self.name

		subprocess.call('/bin/bash -l -c "supervisorctl {0} {1}"'.format(action, name), shell=True)

	def action(self, action):
		"""
			Run action on service.
		"""

		if action not in ['start', 'stop', 'restart', 'status']:
			raise RuntimeError('Unknown action {0}'.format(action))

		if self.internal:			
			self.internal_action(action)

		else:
			self.supervisord_action(action)

if __name__ == '__main__':
	import sys

	if len(sys.argv) == 2 and sys.argv[1] == '--status-all':
		services = os.listdir(Service.internaldir)
		services.extend(os.listdir(Service.supervisordir))

		for srv in services:
			srv, _ = os.path.splitext(srv)

			if srv not in ['.gitignore', 'canopsis']:
				sv = Service(srv)
				sv.action('status')


		sys.exit(0)

	elif len(sys.argv) != 3:
		print >>sys.stderr, "Usage: service <name> <action>"
		print >>sys.stderr, "       service --status-all"
		sys.exit(1)

	try:
		sv = Service(sys.argv[1])
		sv.action(sys.argv[2])

	except RuntimeError as err:
		print >>sys.stderr, err
		sys.exit(1)
