#!/usr/bin/env python
#--------------------------------
# Copyright (c) 2011 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

import logging, time, argparse
from cstorage import get_storage
from caccount import caccount

import pyperfstore2
import logging

from docopt import docopt
from datetime import datetime
import sys

doc = """clean_dbs, clean your Canopsis Database.

Usage:
  clean_dbs [--freshness <duration>] [--event_type <type>] [--verbose] [--do]
  clean_dbs -h | --help

Options:
  -h --help               Show help
  --do                    Remove items
  --freshness <duration>  Items on 'crecord_write_time' <  (Now - <duration>), you can use <int>[y/M/w/d/h/m/s]. Ex: '1d' for one day
  --event_type <type>     Items on 'event_type' in <type>
"""
args = docopt(doc)

options = {
	'freshness': 	args.get('--freshness', None),
	'event_type': 	args.get('--event_type', None),
	'do': 			args.get('--do', False),
	'verbose':		args.get('--verbose', False)
}

if not options['freshness']:
	options['freshness'] = '1d'

if not options['event_type']:
	options['event_type'] = ['sla', 'check','selector']
else:
	options['event_type'] = [ options['event_type'] ]


# Init logging
if options["verbose"]:
	logger_level = logging.DEBUG
else:
	logger_level = logging.INFO

logging.basicConfig(format='%(asctime)s %(levelname)s %(name)s %(message)s',level=logger_level)
logger 	= logging.getLogger('clean_dbs')


logger.debug("Option:")
logger.debug(" + freshness: %s" %	options["freshness"])
logger.debug(" + event_type: %s" %	options["event_type"])
logger.debug(" + do: %s" %			options["do"])
logger.debug(" + verbose: %s" %		options["verbose"])

freshness = options["freshness"]
unit = {"s" : 1, "m" : 60, "h" : 60*60, "d" : 60*60*24, "w" : 60*60*24*7, "M" : 60*60*24*30, "y" : 60*60*24*365}
last_char = freshness[len(freshness) -1 : ]

try:
	if last_char.isdigit():
		freshness = int(freshness)
	else:
		multiple = unit[last_char]
		freshness = int(freshness[ : len(freshness)-1])
		freshness *= multiple

except Exception,err:
	logger.error("error %s \n" %err) 
	sys.exit(1)
	
threshold = int(time.time() - freshness)


logger.info("Freshness:  %s seconds" % freshness)
logger.info("Threshold:  %s: %s" % (threshold, datetime.fromtimestamp(threshold).strftime('%Y-%m-%d %H:%M:%S')) )
logger.info("Event type: %s" %	options["event_type"])

logger.debug("Init all Storages")
storage = get_storage(namespace='events', logging_level=logger_level, account=caccount(user="root", group="root"))
manager = pyperfstore2.manager(logging_level=logger_level)

if not options["do"]:
	logger.info("/!\\ Simulation Mode, nothing to do /!\\")

################### EVENTS
logger.info("Find old events:")
mfilter = 	{
	'$and': [
		{'event_type': 			{ '$in': options['event_type'] }},
		{'crecord_write_time':	{ '$lt': threshold}}
	]
}

records = storage.find(mfilter, { '_id': 1, 'component': 1, 'resource': 1 })
logger.info(" + %s found" % len(records))

pfilter = {"$or": []}
event_ids = []
perfdata_ids = []

for record in records:
	#logger.debug(" + %s" % record._id)
	event_ids.append(record['_id'])

	if record.get('resource', None):
		pfilter["$or"].append({ 'co': record['component'], 're': record['resource'] })
	else:
		pfilter["$or"].append({ 'co': record['component'] })

#logger.debug("IDS to remove: %s" % ids)
#logger.debug("pfilter: %s" % pfilter)

if (len(pfilter["$or"])):
	logger.info("Find perfdata linked from events:")
	precords = manager.find(mfilter=pfilter, data=False)
	logger.info(" + %s found" % precords.count())
	logger.debug("Build array of ids:")
	perfdata_ids = [precord['_id'] for precord in precords]
	logger.debug(" + Done")

logger.info("Find old Metrics (linked from event):")
pfilter = { 'lts': {'$lt': threshold}, 'me': {'$nin': [ 'cps_statechange', 'cps_statechange_nok', 'cps_statechange_0', 'cps_statechange_1', 'cps_statechange_2', 'cps_statechange_3' ]} }

precords = manager.find(mfilter=pfilter, data=False)
logger.info(" + %s found" % precords.count())

logger.info("Check twin id:")
for precord in precords:
	if precord['_id'] not in perfdata_ids:
		perfdata_ids.append(precord['_id'])
logger.info(" + Done")

logger.info("Summary:")
logger.info(" + Events to delete:	%s" % len(event_ids))
logger.info(" + Perfdata to delete:	%s" % len(perfdata_ids))

if options["do"]:
	logger.info("Remove events ...")
	storage.get_backend().remove({'_id': {'$in': event_ids}})
	logger.info("Remove Perfdata ...")
	manager.remove(_id=perfdata_ids)
	perfdata_ids = []

################### PERFSTORE
logger.info("Find old Metrics:")
precords = manager.find(
		mfilter={
			'lts': {'$lt': threshold },
			'me': {'$nin': [ 'cps_statechange', 'cps_statechange_nok', 'cps_statechange_0', 'cps_statechange_1', 'cps_statechange_2', 'cps_statechange_3' ]
			}
		},
		data=False)

ids = [precord['_id'] for precord in precords if precord['_id'] not in perfdata_ids]

if options["do"]:
	manager.remove(_id=ids)

logger.info(" + %s found" % len(ids))


if not options["do"]:
	logger.info("/!\\ Simulation Mode, nothing to do /!\\")