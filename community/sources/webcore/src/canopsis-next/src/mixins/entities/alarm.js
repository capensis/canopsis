import { createNamespacedHelpers } from 'vuex';
import { get } from 'lodash';

import { EXPORT_STATUSES, REMEDIATION_INSTRUCTION_FILTER_ALL } from '@/constants';

const { mapGetters, mapActions } = createNamespacedHelpers('alarm');

/**
 * @mixin
 */
export default {
  computed: {
    ...mapGetters({
      getAlarmItem: 'getItem',
      getAlarmsList: 'getList',
      getAlarmsListByWidgetId: 'getListByWidgetId',
      getAlarmsMetaByWidgetId: 'getMetaByWidgetId',
      getAlarmsPendingByWidgetId: 'getPendingByWidgetId',
      getAlarmsExportByWidgetId: 'getExportByWidgetId',
    }),

    alarms() {
      return this.getAlarmsListByWidgetId(this.widget._id);
    },
    alarmsMeta() {
      return this.getAlarmsMetaByWidgetId(this.widget._id);
    },
    alarmsPending() {
      return this.getAlarmsPendingByWidgetId(this.widget._id);
    },
    alarmsExportPending() {
      const exportData = this.getAlarmsExportByWidgetId(this.widget._id);

      return exportData && exportData.status === EXPORT_STATUSES.running;
    },
  },
  methods: {
    ...mapActions({
      fetchAlarmItem: 'fetchItem',
      fetchAlarmsList: 'fetchList',
      fetchAlarmsListWithPreviousParams: 'fetchListWithPreviousParams',
      createAlarmsListExport: 'createAlarmsListExport',
      fetchAlarmsListExport: 'fetchAlarmsListExport',
      fetchAlarmsListCsvFile: 'fetchAlarmsListCsvFile',
    }),

    /**
     * Refresh alarm item by id with parameters generated by existing fields in alarm
     *
     * @param {string} alarmId
     * @returns {Promise<void>}
     */
    async refreshAlarmById(alarmId) {
      const alarm = this.getAlarmItem(alarmId);

      if (!alarm) {
        return;
      }

      const params = {
        limit: 1,
        with_instructions: REMEDIATION_INSTRUCTION_FILTER_ALL,
        correlation: !!alarm.consequences || !!alarm.causes,
      };

      if (alarm.v.steps) {
        params.with_steps = true;
      }

      if (alarm.v.resolved) {
        params.resolved = true;
      }

      if (get(alarm.consequences, 'data')) {
        params.with_consequences = true;
      }

      if (get(alarm.causes, 'data')) {
        params.with_causes = true;
      }

      await this.fetchAlarmItem({
        id: alarm._id,
        params,
      });
    },
  },
};
