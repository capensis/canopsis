.. _FR__Task:

======================
Canopsis Task Handling
======================

This document describes how tasks are executed/scheduled by Canopsis.

.. contents::
   :depth: 2

References
==========

 - :ref:`FR::Schema <FR__Schema>`
 - :ref:`FR::Event <FR__Event>`
 - :ref:`FR::Engine <FR__Engine>`

Updates
=======

.. csv-table::
   :header: "Author(s)", "Date", "Version", "Summary", "Accepted by"

   "David Delassus", "2015/10/06", "0.2", "Add job context", "Jonathan Labéjof"
   "David Delassus", "2015/10/06", "0.1", "Document creation", "Jonathan Labéjof"

Contents
========

Description
-----------

In Canopsis, tasks can be executed periodically or punctually:

 - periodically: they are scheduled by a **scheduler** :ref:`engine <FR__Engine>`
 - punctually: they are executed by a **task handler**

Scheduled tasks are then called *jobs*.

.. _FR__Task__Job:

Jobs
----

A job is described by a :ref:`data schema <FR__Schema__Data>`, and **MUST** contain:

 - an ID
 - a starting point
 - a recurrent rule
 - a context, which can be anything
 - configuration for the task, also described by a :ref:`data schema <FR__Schema__Data>`

.. _FR__Task__Scheduler:

Scheduler engine
----------------

The scheduler engine **MUST** periodically fetch :ref:`jobs <FR__Task__Job>`.

If the fetched jobs must be executed (depending on its recurrent rule), its task will be dispatched to the corresponding task handler.

It **SHOULD** provide an event processing algorithm, where the received event is a :ref:`job <FR__Task__Job>`.
The received job will then be dispatched to the corresponding task handler.

When the scheduler dispatches a task, it **MUST** add the following informations:

 - context received with the :ref:`job <FR__Task__Job>`
 - job ID

.. _FR__Task__Handler:

Task handler
------------

A task handler is an :ref:`engine <FR__Engine>` which **MUST** provide an event processing algorithm, where the received event is the task configuration.

The task configuration will be validated against the corresponding :ref:`data schema <FR__Schema__Data>`.
If the task is valid, it will be transmitted to the task handling algorithm, which **MUST** be implemented for each task handler.

The task handling algorithm **MUST** return informations about the task execution:

 - an error code
 - a message

Then, a :ref:`check event <FR__Event__Check>` **MUST** be generated by the event processing
algorithm to provide a feedback to the user.
