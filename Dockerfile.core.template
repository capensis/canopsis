#################
# CANOPSIS NEXT #
#################

FROM node:10.6-stretch as canopsis-next_build

COPY sources/webcore/src/canopsis-next /canopsis-next
WORKDIR /canopsis-next
RUN npm install

RUN NODE_ENV=production npm run build


###########
# SYSBASE #
###########

# Template here
FROM debian:stretch as canopsis_build

ENV http_proxy ${PROXY}
ENV https_proxy ${PROXY}
ENV CPS_HOME /opt/canopsis

ARG PROXY

SHELL ["/bin/bash", "-c"]

# Template here
RUN apt-get update; \
	apt-get -y --no-install-recommends install \
		build-essential \
		curl \
		libcurl4-openssl-dev \
		libsasl2-dev \
		libxml2-dev \
		libxslt1-dev \
		libssl-dev \
		libffi-dev \
		libxmlsec1-dev \
		libxmlsec1-openssl \
		libldap2-dev \
		pkg-config \
		python2.7-dev \
		python-pip \
		python-pkg-resources \
		python-virtualenv \
		python-wheel \
		virtualenv \
		net-tools \
		procps; \
	apt-get clean

RUN mkdir ${CPS_HOME}
WORKDIR ${CPS_HOME}

# Create venv
RUN virtualenv .; \
	source ./bin/activate; \
	# pip install -b /tmp/pipbuild setuptools pip wheel; \
	rm -rf /tmp/pipbuild; rm -rf ~/.cache;

# Copy conf
COPY sources/canopsis/etc ./etc
COPY docker/files/bashrc .bashrc
COPY docker/files/bash_profile .bash_profile
COPY docker/files/etc/ ./etc/

RUN chmod +x /opt/canopsis/.bash_profile

# Install canopsis
COPY sources/canopsis /sources/canopsis

# Install dependencies
RUN source ./bin/activate; \
	pip install -r /sources/canopsis/requirements.txt -b /tmp/pipbuild --no-cache-dir; \
	rm -rf /tmp/pipbuild; rm -rf ~/.cache;

# Install Canopsis
RUN source ./bin/activate; \
	pip install --no-cache-dir /sources/canopsis/ -b /tmp/pipbuild; \
	rm -rf /tmp/pipbuild; rm -rf ~/.cache;

RUN mkdir -p ./etc/init.d && \
    mkdir -p var/log/engines && \
    mkdir -p var/cache/canopsis && \
    mkdir -p tmp && \
    sed -r "s@~@${CPS_HOME}@g" -i ./etc/webserver.conf

RUN mkdir -p ${CPS_HOME}/var/www
COPY sources/webcore/src ${CPS_HOME}/var/www/src
COPY --from=canopsis-next_build /canopsis-next/dist ${CPS_HOME}/var/www/src/canopsis-next


##############
# CORE IMAGE #
##############
FROM debian:stretch-slim as core

ENV CPS_USER canopsis
ENV CPS_GROUP canopsis
ENV CPS_HOME /opt/canopsis

SHELL ["/bin/bash", "-c"]
WORKDIR ${CPS_HOME}

RUN groupadd ${CPS_GROUP} ;
RUN useradd -d ${CPS_HOME} -g ${CPS_GROUP} -s /bin/bash ${CPS_USER}

COPY docker/files/vimrc ${CPS_HOME}/.vimrc
ADD docker/files/entrypoint.sh /

# Configure OS
COPY docker/files/sudoers /etc/sudoers.d/canopsis

# Template here
# Check if every dependencies are required by canopsis-core
RUN echo "deb http://ftp.fr.debian.org/debian/ stretch main contrib non-free" > /etc/apt/sources.list ;\
	echo "deb http://security.debian.org/ stretch/updates main" >> /etc/apt/sources.list; \
	#
	# Keep the blank comments. It's used to make the file more readable and
	# it prevent docker to complain about an empty line.
	#
	rm -f /etc/localtime; \
	ln -s /usr/share/zoneinfo/UTC /etc/localtime; \
	#
	apt-get update; \
	apt-get dist-upgrade -y; \
	apt-get -y --no-install-recommends install locales; \
	#
	export LANG="en_US.UTF-8"; \
	echo "LANG=${LANG}" > /etc/locale.conf; \
	echo "${LANG} UTF-8" > /etc/locale.gen; \
	locale-gen; \
	#
	apt-get -y --no-install-recommends install \
		apt-transport-https \
		base-files \
		bash \
		ca-certificates \
		curl \
		dnsutils \
		iputils-ping \
		libsasl2-2 \
		libxml2 \
		libxslt1.1 \
		lsb-base \
		libffi6 \
		libgmp10 \
		libgnutls30 \
		libgnutlsxx28 \
		libgnutls-openssl27 \
		libhogweed4 \
		libicu57 \
		libidn11 \
		libnettle6 \
		libp11-kit0 \
		libpsl5 \
		libssl1.1 \
		libtasn1-6 \
		libxmlsec1 \
		libxmlsec1-openssl \
		libldap-2.4-2 \
		# python \
		python2.7 \
		# snmp \
		smitools \
		sudo \
		# tmux \
		vim; \
	apt-get clean


COPY --from=canopsis_build /${CPS_HOME} /${CPS_HOME}
RUN chown ${CPS_USER}:${CPS_GROUP} ${CPS_HOME}/var/log -R ;\
	chown ${CPS_USER}:${CPS_GROUP} ${CPS_HOME}/var/cache -R ;\
    chown ${CPS_USER}:${CPS_GROUP} ${CPS_HOME}/var/log -R ;\
	chown ${CPS_USER}:${CPS_GROUP} ${CPS_HOME}/tmp -R
USER ${CPS_USER}:${CPS_GROUP}

EXPOSE 8082
ENTRYPOINT /entrypoint.sh
